{{Header}}
{{#seo:
|description=Development Notes / Design Documentation about {{project name}} Infrastructure
}}
= Current Situation =
== Introduction ==
[[Privacy Policy Technical Details|{{project_name}}.org Site Security]]

This page talks about {{project name}} online hosting and (non-existing) testing infrastructure.

== File Hosting ==
Hosted by mirror, downloadable using TLS.

== Bug / Feature Request Tracker ==
https://phabricator.whonix.org.

(Works much better than github for a project at this scale.)

== Testing infrastructure ==
* CI build environment required.
* Automated Test Suite <ref>
Port [https://tails.boum.org/contribute/release_process/test/automated_tests/ Tails Test Suite] to {{project name}} or create a new one from scratch.
</ref> required.
* [[whonixcheck]]

== mailman3 ==
* https://lists.mailman3.org/archives/list/mailman-users@mailman3.org/thread/UOVLARM4CGR5OZBURPJO7YHMFYMOKNHE/

= backend =
== mediawiki ==
* [[Dev/mediawiki|mediawiki, codeselect, select code, short / long / recommended / detailed buttons]]

=== mediawiki advantages ===

* community contribution friendly - flagged revisions - usable way to allow anonymous users to edit and to let admins review changes before these go live
* sufficient protection from spam
* seo - plugins provide good OpenGraph meta tags and meta settings (description, images)
* wiki templates
* footnotes
* expand buttons
* footer
* mobile view
* mediawiki markup text file backups (but are not easily importable)
* [https://forums.whonix.org/t/short-and-detailed-buttons-in-the-wiki-html-help-wanted short and detailed buttons] (probably not unique to mediawiki)

=== mediawiki disadvantages ===
* does not look that great
** our mediawiki skin "foreground" looks better than usual mediawiki / wikipedia with the huge space wasting sidebar that does not have much useful content related to the wiki page being viewed
** still does not look great (but perhaps another [https://forums.whonix.org/t/mediawiki-skins mediawiki skin] could solve that)
** the table of contents at the top may not be great? Perhaps a table of contents on the left or right side (???) would be better?
** too much white spaces everywhere
* offline documentation not solved - https://forums.whonix.org/t/offline-documentation-discussion
* translations not solved
* data base is binary (mysql) (requires mysql data base)
** in other words: not flat file
** not easy "transparent" backups
** (Backup using git-mediawiki: https://github.com/{{project_name_short}}Bot/whonix-wiki-backup - that can probably not easily be restored.)
** (XML backup: https://github.com/{{project_name_short}}BOT/{{project_name_short}}WikiBackups)
** cannot rebuild from clean human readable source files

=== goals for new website ===
* flat file
* git based?
* prose.io ([http://prose.io/#adrelanos/vpn-firewall/edit/master/README.md example]) compatible?
* breadcrumbs navigation?
* javascript free?
* CMS free?
* bootstrap based?

* mobile friendly
* illustrative images
* quick page load times
* footer links (legal, imprint)!
* seo

* [https://forums.whonix.org/t/short-and-detailed-buttons-in-the-wiki-html-help-wanted short and detailed buttons]

== discourse forums ==
TODO: archival using httrack?

* cannot make complete backup - https://meta.discourse.org/t/how-to-backup-and-restore-a-whole-var-discourse-app-folder/152598
* backup restoration failing - https://meta.discourse.org/t/restore-problem-relation-theme-fields-does-not-exist/95500/7
* postgres database bugs - https://meta.discourse.org/t/restore-fails-could-not-create-unique-index/151380/20
* difficult to repair database - https://meta.discourse.org/t/a-basic-discourse-archival-tool/62614
* no archival - https://meta.discourse.org/t/a-basic-discourse-archival-tool/62614
* archival feature request #1 https://meta.discourse.org/t/print-long-topic-to-pdf-redux-again/44639/62
* archival feature request #2 https://meta.discourse.org/t/a-basic-discourse-archival-tool/62614/51
* feature request: [https://meta.discourse.org/t/option-to-use-flat-text-backing-files-instead-of-sql-postgres-backend/152787 Option to use flat/text backing files instead of SQL(Postgres) backend]

= Security =
See [[Trust#Trusting_the_Whonix_.E2.84.A2_Website]].

= DANE TLSA =
* test websites:
** mail: https://dane-test.had.dnsops.gov
** web: https://danetools.com/dane
* test website working example (mail): https://dane-test.had.dnsops.gov/server/dane_check.cgi?host=freebsd.org
* another website working example: https://dane.sys4.de/smtp/go6.si
* https://mytechiethoughts.com/linux/implementing-dane-with-certbot-using-lets-encrypt/
* what happen to these screenshots?
** https://www.dnssec-validator.cz/pages/screenshots.html
** https://www.dnssec-validator.cz/images/screenshots/firefox.png
** https://www.dnssec-validator.cz/images/screenshots/ie.png
** https://www.dnssec-validator.cz/images/screenshots/cr.png
** https://www.dnssec-validator.cz/images/settings/config.png
** Firefox saying: Verified by: Let's Encrypt
* not yet supported by SSL Labs https://github.com/ssllabs/ssllabs-scan/issues/118
* https://www.internetsociety.org/blog/2013/12/want-to-quickly-create-a-tlsa-record-for-dane-dnssec/
* https://www.cambus.net/creating-tlsa-records/
* letsencrypt vs DANE TLSA?
* https://webmasters.stackexchange.com/questions/129712/is-letsencrypt-compatible-with-dane-tlsa
* DANE TLSA standalone?
* DANE TLSA update required, useful when?
* https://github.com/FlippingBinary/lets-encrypt-tlsa
* https://forums.whonix.org/t/dane-tlsa-dns-based-authentication-of-named-entities-for-whonix-org/10218

quote https://mytechiethoughts.com/linux/implementing-dane-with-certbot-using-lets-encrypt/

<blockquote>
The problem with regular Let’s Encrypt certificates

As you know, Let’s Encrypt certificates renew every 90 days. This is not a problem in itself, however, the standard procedure is to generate a new private key with each renewal and, thus, an entirely new public key also. This will necessarily change the hashed key value that would appear in our TLSA record meaning that we would have to remember to update our DNS records on each renewal otherwise the wrong key will be specified and no one will trust our site/server/application! We need to tell Let’s Encrypt to re-use our private key so that the public key hash value does NOT change – that way our DNS record remains valid across certificate renewals.
</blockquote>

-> https://github.com/letsencrypt/boulder/issues/1882

-> https://www.internetsociety.org/blog/2016/01/lets-encrypt-certificates-for-mail-servers-and-dane-part-1-of-2/

-> https://www.internetsociety.org/blog/2016/03/lets-encrypt-certificates-for-mail-servers-and-dane-part-2-of-2/

* https://dane.sys4.de/common_mistakes
* https://wiki.archlinux.org/index.php/DANE
* https://github.com/FlippingBinary/lets-encrypt-tlsa
* https://web.archive.org/web/20200310053046/https://moxie.org/blog/ssl-and-the-future-of-authenticity/

= drop-www vs yes-www =
Quote https://docs.gandi.net/en/domain_names/faq/record_types/alias_record.html

<blockquote>
An ALIAS record will break DNSSEC on the bare domain (@), because @ A and @ AAAA responses will be missing the RRSIG records, which will break resolution on all resolvers.
</blockquote>

Quote https://docs.gandi.net/en/domain_names/faq/dns_records.html ('''bold''' added)

<blockquote>
A, AAAA, '''ALIAS (not yet supported with dnssec-enabled domains)''', CNAME, MX, NS, TXT, WKS, SRV, LOC, SPF, CAA, SSHFP, PTR, DNAME
</blockquote>

Quote https://help.heroku.com/NH44MODG/my-root-domain-isn-t-working-what-s-wrong

<blockquote>
Cloudflare - Note: Cloudflare use <code>CNAME Flattening</code>. This is the same thing as an <code>ALIAS</code> or <code>ANAME</code> record
</blockquote>

https://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root/

= Hide Server IP =
Separate server/IP for e-mail required since it cannot be hidden by CDN.

Quote https://support.cloudflare.com/hc/en-us/articles/115003687931-Warning-about-exposing-your-origin-IP-address-via-DNS-records

<pre>
To take advantage of Cloudflare’s performance and security benefits, we recommend you orange-cloud DNS records that handle HTTP traffic, including A, AAAA, and CNAME. However, do not orange-cloud A, AAAA, or CNAME records used to resolve MX records.  For instance, if you have an MX record that points to mail.example.com as your mail server, orange-clouding the A record for mail.example.com will break your mail traffic.
</pre>

<pre>
However, there are times when some of your DNS records need to remain grey-clouded. For example:

    A, AAAA, or CNAME records used for mail traffic must not be orange-clouded because email routing won’t pass through Cloudflare's proxy.
    When you have to host multiple services (for example, a website and email) on the same physical server

To mitigate this risk, we recommend that you:

    Host your email service in a server (in-house or external) that is different from your site’s origin server
    Analyze the impact of hosting multiple services on the same origin server in cases when having grey-clouded DNS records can’t be avoided
    Orange-cloud all records that share the same origin IP address as your root domain and can be safely proxied through Cloudflare
</pre>

Quote https://support.cloudflare.com/hc/en-us/articles/200168876-Email-undeliverable-when-using-Cloudflare

<pre>
Use separate IP addresses for mail traffic and HTTP/HTTPS traffic. Cloudflare recommends using non-contiguous IPs from different IP ranges.
</pre>

Compatible with SPF, DKIM and DANE?

= See Also =
* [[Dev/mediawiki|mediawiki, codeselect, select code, short / long / recommended / detailed buttons]]
* [[Dev/Web_Backend|Web Backend, CMS vs non-CMS, vs github-pages, etc.]]

= Footnotes =
* [[Deprecated#Infrastructure]]
{{reflist|close=1}}

[[Category:Design]]

{{Footer}}
