{{Header}}
{{Title|
title=Whonix Live Mode
}}
{{#seo:
|description=Whonix Live Mode. Read-only mode. Make all writes go to RAM instead of the hard disk. This is NOT an anti-forensics feature!
|image=https://www.whonix.org/w/images/f/ff/Whonixlive.jpg
}}
{{Maintainer|
|status=testing
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=medium
|maintainer=[https://forums.whonix.org/u/algernon Algernon]
|support=[[Support]]
}}

= Introduction =

Users can optionally run Whonix as a live system. <ref>
Since Whonix 14.
</ref> Booting into live mode will make all writes  go to RAM instead of the hard disk. Everything that is created / changed / downloaded in the VM during that session will not persist after shutdown. This also holds true for malicious changes made by malware, so long as it did not break out of the virtual machine.

There are two live mode options available, [https://github.com/Whonix/grub-live <code>grub-live</code>] and [https://github.com/Whonix/ro-mode-init <code>ro-mode-init</code>].

* <code>grub-live</code> will create a new boot menu entry which the user has to select manually but it is the more failsafe and hence the recommended option.
* With <code>ro-mode-init</code> the boot menu will stay the same and the system will automatically boot into live mode when it detects a read-only disk otherwise it boots normally into persistent mode.

= Warning =

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
Live mode is not amnesic by itself and needs extra steps to be taken on the host to be effective. Also, memory forensics has not been taken into account! The primary objective is preventing malware from gaining persistence and having an unchanged system after each reboot.<br />
<br />
{{workstation_product_name}} and {{gateway_product_name}}: It is also recommended to regularly boot into persistent mode for installation of [[Update|updates]].

Whonix-Gateway: If live mode is used with {{gateway_product_name}}, regularly booting into persistent mode is important to keep Tor's normal [[Tor_Entry_Guards|guard]] rotation schedule.
}}


When Whonix is run as a live system, all changes are written to RAM by default. However, it is possible for this design to be bypassed if swap files, core dumps and other relevant configurations are in effect. Fortunately, most of these can be disabled. <ref>[[FAQ#Is_there_a_Whonix_Amnesic_Feature_.2F_Live_CD_.2F_Live_DVD.3F_What_about_Forensics.3F|Is there a Whonix Amnesic Feature / Live CD / Live DVD? What about Forensics?]]</ref> <ref>[[Warning#Whonix_is_not_Amnesic|Whonix is not Amnesic]]</ref>  <ref>[[Full_Disk_Encryption_and_Encrypted_Images#Other_Security_Considerations|Encrypted Guest Images - Other Security Considerations]]</ref> <ref>[[Core Dumps]]</ref> 

To stymie disk forensics, ideally full disk encryption should be applied on the host and the computer should be powered off when not in use. Alternatively, the whole host OS could be run from RAM, or a live system run on the host with all writes going to RAM. The latter method also requires a correctly implemented write protection switch.

To make memory forensics harder, the machine should either be removed from any power source (by pulling the plug / removing the battery) and/or the memory should be wiped upon shutdown.

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = Since live mode makes each write go to RAM, the user might want to increase the memory assigned to the VM to improve performance; for example, if large files are regularly downloaded.
}}



=== Anti-Forensics Precautions ===

Whonix 15 includes grub-live by default. When using this feature in Whonix VMs, some precautions need to be taken even on trusted systems like GNU/Linux hosts to prevent leaving traces (proprietary OSs are a lost cause). At the moment, the only advantage of doing this over running [[Grub-live|grub-live]] on the host, is to achieve selective amnesia for some VMs while others remain persistent. As grub-live development continues to advance allowing for selective exemption of host directories, this may not be necessary in the future. This section is a work in progress and not exhaustive.


* Dealing with swap:

Tails documentation comments that host swapping may be the biggest threat to anti-forensics on Linux when running in a VM <ref>https://tails.boum.org/doc/advanced_topics/virtualization/index.en.html#security</ref>

Linux does use swapping despite having apparent "free" memory. The kernel tends to swap out long-inactive and memory-consuming processes. This frees up RAM for caches, thus improves responsiveness.


<u>Disabling swap for entire system</u>

Turning off for the whole system may cause a system instability/crashes if the RAM hard limit is hit. However the ample RAM in new systems makes it unlikely  and it is worth the tradeoff.<ref>https://superuser.com/questions/243357/how-to-prevent-a-specific-program-from-swapping</ref> Disabling swapalso disables hibernation functionality.


This command will disable swap and delete the file during the life of this session:
{{CodeSelect|code=
sudo swapoff -a
}}

To disable swap in a persistent way edit the <code>fstab</code> file and comment out the line with the swap partition with a <code>#</code>:
{{CodeSelect|code=
sudo nano /etc/fstab
}}

Save and reboot.

Confirm it is off by checking the <code>free</code> command. The swap line should show zeros:
{{CodeSelect|code=
free -h
}}


<u>Disabling swapping selectively for KVM VMs</u>

An alternative KVM only solution is to set guest memory pages to being locked<ref>https://serverfault.com/questions/561446/how-can-i-keep-important-vms-in-memory-without-disabling-swap</ref><ref>https://libvirt.org/formatdomain.html#elementsMemoryBacking</ref>

<pre>
<memoryBacking><locked/></memoryBacking>
</pre>

This option is not without disadvantages however and can be abused by malicious guests DoSing the host through RAM exhaustion.<ref>When set and supported by the hypervisor, memory pages belonging to the domain will be locked in host's memory and the host will not be allowed to swap them out, which might be required for some workloads such as real-time. For QEMU/KVM guests, the memory used by the QEMU process itself will be locked too: unlike guest memory, this is an amount libvirt has no way of figuring out in advance, so it has to remove the limit on locked memory altogether. Thus, enabling this option opens up to a potential security risk: the host will be unable to reclaim the locked memory back from the guest when it's running out of memory, which means a malicious guest allocating large amounts of locked memory could cause a denial-of-service attack on the host. Because of this, using this option is discouraged unless your workload demands it; even then, it's highly recommended to set a `hard_limit` (see [memory tuning](https://libvirt.org/formatdomain.html#elementsMemoryTuning)) on memory allocation suitable for the specific environment at the same time to mitigate the risks described above.</ref>

N.B. Setting <code>vm.swappiness = 0</code> does not completely prevent swapping.<ref>https://superuser.com/questions/760102/why-do-i-get-swapping-even-if-i-set-vm-swappiness-to-0</ref>


* Enable grub-live on Whonix Gateway too:

It is recommended users run the live package on Whonix Gateway too after initial Tor start when a guard has been set. This should eliminate any Tor related cached data like DNS requests that could leave traces about web activity. However be warned that it may make your Tor behavior distinguishable from regular Tor users when it comes to redownloading consensus files more frequently or when switching to a new guard after some months have passed. <ref>http://forums.dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion/t/whonix-live-mode-amnesia-amnesic-non-persistent-anti-forensics/3894/127?u=hulahoop</ref>


* Disabling program crash dumps:

Besides swap there is the problem of disabling process memory dumping to disk.


<u>Kernel</u>

A user has to go out of their way to enable kernel memory dumps which isn't done by default, with kdump-tools on Debian.<ref>https://www.bentasker.co.uk/documentation/linux/312-installing-and-configuring-kdump-on-debian-jessie</ref>


<u>Userspace</u>

The default core dump file size is 0 on Debian Linux:<ref>https://nanxiao.me/en/enable-generating-core-dump-file-on-debian-linux/</ref>

{{CodeSelect|code=
ulimit -c
0
}}

It is enforced for systemd-coredump too.

Can be verified with lack of core files in <code>/var/spool</code> or <code>/var/lib/systemd/coredump</code> when an intentional crash is induced (<code>/var/crash</code> doesn't exist on Debian but may be available on other Linux distributions).<ref>https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/#linux-and-core-dumps</ref>


<u>Disable setuid processes dumping their memory</u>

Processes with elevated permissions (or the setuid bit), might be still able to perform a core dump, depending on your other settings. As these processes usually have more access, they might contain more sensitive data segments in memory. So time to change this as well. The behavior can be altered with a sysctl key, or directly via the /proc file system. For permanent settings, the sysctl command and configuration is typically used. A setting is called a ‘key’, which has a related value attached to it (also known as a key-value pair).

To disable program with the setuid bit to dump, set the fs.suid_dumpable to zero:
{{CodeSelect|code=
sudo su

echo "fs.suid_dumpable=0" >> /etc/sysctl.conf
}}


Reload the sysctl configuration with the -p flag to activate any changes you made.
{{CodeSelect|code=
sysctl -p
}}

= Live-mode Configuration =

== Qubes ==

<code>grub-live</code> is currently [[unsupported]] on [[Qubes]], but may become available in the future. Refer to the following [https://forums.whonix.org/t/whonix-live-mode/3894/31 forum discussion] for further information.

In Qubes R4, [[Qubes/DisposableVM|Qubes DisposableVMs]] are a suitable alternative, as well as the [https://www.qubes-os.org/doc/live-usb/ Qubes Live USB].

== VirtualBox ==

{{Box|text=
'''1.''' Backup.
{{Box|text=
'''Option 1:''' Create a snapshot of your VM. '''OR'''
}}

{{Box|text=
'''Option 2:''' Alternatively backup the <code>/boot</code> folder.

{{CodeSelect|code=
sudo cp -a /boot /boot.back
}}}}
}}

{{Box|text=
'''2.''' Install <code>grub-live</code>.

{{Install Package
|package=grub-live
}}
}}

{{Box|text=
Following reboot, a second boot entry called "Whonix Live-mode" will be visible. Simply press <code>Enter</code> to boot the live system and use it as normal.
}}

{{Box|text=
To increase security, the VM disks can be set to read-only. Otherwise, malware running as root in the VM could theoretically mount the image read-write and gain persistence in this way.

{{Box|text=
1. To do so, power off the machine.

2. From the command line run:

{{CodeSelect|code=
VBoxManage setextradata vmname "VBoxInternal/Devices/lsilogicsas/0/LUN#0/AttachedDriver/Config/ReadOnly" 1
}}

to set the disk to read-only with "vmname" being the name of your virtual machine e.g. {{gateway_product_name}}.
To boot into normal mode again, simply revert this change via:

{{CodeSelect|code=
VBoxManage setextradata vmname "VBoxInternal/Devices/lsilogicsas/0/LUN#0/AttachedDriver/Config/ReadOnly"
}}

and choose the normal boot option in the GRUB menu.
}}
}}

== KVM ==

{{Whonix Live Backup}}

{{Box|text=
'''2.''' Install <code>grub-live</code>.

{{Install Package
|package=grub-live
}}
}}

Following reboot, a second boot entry called "Whonix Live-mode" will be visible. Simply press <code>Enter</code> to boot the live system and use it as normal.

To increase security, the VM disks can be set to read-only. Otherwise, malware running as root in the VM could theoretically mount the image read-write and gain persistence in this way.
To do so, power off the machine and set the hard disk to read-only in the virt-manager GUI before booting into live mode. To boot into normal mode again, simply revert this change and choose the normal boot option in the GRUB menu.

== Alternative Configurations ==
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
Skip this section if the [[{{project name short}} Live#KVM|KVM Live-mode]] or [[{{project name short}} Live#VirtualBox|Virtualbox Live-mode]] configuration steps above have already been completed.
}}


Virtualbox and KVM:

* [[{{project name short}} Live/ro-mode-init]]

VirtualBox only:

* [[{{project name short}} Live/Immutable Disk Method on VirtualBox]]

= Debugging/Errors =

An inconsistent filesystem will likely result in errors during live-boot. For instance, inconsistencies can arise when the VM is killed instead of performing a normal shutdown in persistent mode. Therefore, to make sure it is consistent, run <code>fsck</code> in persistent mode. Debian automatically does this during boot. VMs running in live mode can be killed without problems.

In the case of non-<code>fsck</code> related errors using <code>ro-mode-init</code> (like dropping to an initramfs shell), add the following to the kernel command line/GRUB menu for easier debugging:

{{CodeSelect|code=
debug=1 break=init-premount
}}

= Miscellaneous =
In the future, running Whonix from a [[FAQ#Will_there_be_a_Whonix_Live_CD_or_DVD.3F|Live CD or DVD]] might be supported. Check this wiki entry at a later date.

To learn more about live mode, refer to the [https://forums.whonix.org/t/whonix-live-mode Live-mode forum discussion].

= Footnotes =
{{reflist|close=1}}
[[Category:Documentation]]
{{Footer}}
