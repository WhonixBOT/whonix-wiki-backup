{{Header}}
{{#seo:
|description=Documentation for the NEXT Whonix version! ONLY for developers! No guarantee it really makes into the next Whonix version.
}}

= Warning =
'''Documentation for the NEXT Whonix version! ONLY for developers! No guarantee it really makes into the next Whonix version.'''

= Qubes =
== Torified dom0 Updates ==
Go to {{Code2|Qubes VM Manager -> System -> Global Settings}}. See the {{Code2|UpdateVM}} setting. Choose your desired Whonix-Gateway ProxyVM from the list. For example: sys-whonix.

<pre>
Qubes VM Manager -> System -> Global Settings -> UpdateVM -> sys-whonix
</pre>

<ref>
implement dom0 -> right click -> VM settings / easy way to configure updatevm setting:<br />
https://github.com/QubesOS/qubes-issues/issues/1165
</ref> <ref>
Or by cli:
<pre>
qubes-prefs --get updatevm
</pre>

<pre>
qubes-prefs --set updatevm sys-whonix
</pre>
</ref>

= onionshare =
'''Unfinished!''' Work in progress! See also:

* https://forums.whonix.org/t/feature-request-onionshare-support/300
* use [https://github.com/micahflee/onionshare/releases/tag/0.8 onionshare 0.8] or above, because it has the required support for ephemeral Tor hidden services <ref>Tor control protocol command add_onion</ref>
* TODO [https://github.com/Whonix/control-port-filter-python control-port-filter-python]:
** [https://phabricator.whonix.org/T448 Control Port Filter Proxy does not yet support registering Tor control protocol events]
<br />
On Whonix-Gateway.

Needs Tor 0.2.7.5 or higher.

{{Open with root rights|
filename=/etc/apt/sources.list.d/torproject.list
}}

Add.

<pre>
deb http://deb.torproject.org/torproject.org tor-experimental-0.2.7.x-jessie main
</pre>

Save.

[[Update]] package lists and dist-upgrade.

<pre>
sudo apt-get update && sudo apt-get dist-upgrade
</pre>

Control Port Filter Proxy<ref>[[Dev/CPFP]]</ref> needs some adjustments.

{{Open with root rights|
filename=/etc/cpfpy.d/50_onionshare.conf
}}

Add the following content.

<pre>
## Keep existing contents of variable CONTROL_PORT_FILTER_WHITELIST
## and extend it with control port commands required by onionshare as per:
## https://github.com/micahflee/onionshare/blob/master/onionshare/onionshare.py
CONTROL_PORT_FILTER_WHITELIST=protocolinfo 1
CONTROL_PORT_FILTER_WHITELIST=getinfo version
CONTROL_PORT_FILTER_WHITELIST=add_onion *
</pre>

We would also have to add something like this.

<pre>
add_onion new:best port=80,60132
</pre>

I.e. something like this.

<pre>
add_onion *:* port=*,*
</pre>

Or something like this.

<pre>
add_onion *
</pre>

We likely also need the following.

<pre>
del_onion *
</pre>

Perhaps others. To be tested.

But this is not supported yet by CPFP, because [https://phabricator.whonix.org/T445 CONTROL_PORT_FILTER_WHITELIST wildcard feature] is not yet implemented. (The virtport number (60132) is variable.)

Strictly for testing purposes (dangerous once Whonix-Workstation has been compromised!), we could add the following debugging option to let all Tor control port commands pass without any filtering.

<pre>
CONTROL_PORT_FILTER_DISABLE_FILTERING=true
</pre>

Restart Control Port Filter Proxy.

<pre>
sudo service control-port-filter-python restart
</pre>

Inside Whonix-Workstation.

[https://github.com/micahflee/onionshare/issues/232#issuecomment-162349804 Requires] python-stem 1.3.0 or higher.

Current status:

Even though Control Port Filter Proxy does not filter anything, it still does not work. It hangs at the following message.

<pre>
Connecting to Tor control port to set up hidden service on port 43826.
Staring ephemeral Tor hidden service and awaiting publication
</pre>

This is probably because [https://phabricator.whonix.org/T448 Control Port Filter Proxy does not yet support registering Tor control protocol events].

Security implications not researched yet.

* [https://phabricator.whonix.org/T446 research control port filter proxy whiltelist wildcard security implications]
* [https://phabricator.whonix.org/T446#7496 security implications of a compromised Whonix-Workstation using Tor control protocol command add_onion]

= ricochet =
'''Unfinished!''' See also: <br />
* https://github.com/ricochet-im/ricochet/issues/30
* https://phabricator.whonix.org/T444

Let's finish development of [[#onionshare]] first. See above. Figuring out how to make onionshare work inside Whonix has made more progress.

Doesn't work yet, because Control Port Filter Proxy<ref>[[Dev/CPFP]]</ref> does not support wildcards yet. Might also not work for other reasons yet.

Security implications not researched yet.

On Whonix-Gateway, Control Port Filter Proxy needs some adjustments.

{{Open with root rights|
filename=/etc/cpfpy.d/50_ricochet.conf
}}

Add the following content.

<pre>
## Keep existing contents of variable CONTROL_PORT_FILTER_WHITELIST
## and extend it with control port commands required by torsion as per:
## "Documentation request for Whonix setup"
## https://github.com/special/torsion/issues/30
CONTROL_PORT_FILTER_WHITELIST=GETINFO status/circuit-established,SETCONF HiddenServiceDir,SETCONF HiddenServicePort,SETEVENTS STATUS_CLIENT
</pre>

Restart Control Port Filter Proxy.

<pre>
sudo service control-port-filter-python restart
</pre>

= whonixcheck SSL Certificate Pinning =
== How ==
'''UNFINISHED!''' See: https://github.com/Whonix/Whonix/issues/24

'''Advanced users only!'''

In Whonix-Gateway and Whonix-Workstation.

You need {{Code2|torbrowser-launcher}} installed. <ref>Because torbrowser-launcher ships The Tor Projects SSL certificate</ref> Currently only available from {{Code2|wheezy-backports}}.

To enable this on a by case base, use the --pin-tpo-cert command line option. Example.

<pre>
whonixcheck --pin-tpo-cert
</pre>

Or to permanently enable this.

Create a file {{Code2|/etc/whonix.d/50_user.conf}}.

<pre>
sudo nano /etc/whonix.d/50_user.conf
</pre>

Add.

<pre>
PIN_TPO_CERT="true"
</pre>

= VPN before Tor =
VPN_SERVERS was abolished for better security. <ref>https://phabricator.whonix.org/T460</ref>

After installing Whonix-Gateway, do the following steps before activating Tor in {{Code|Whonix Setup Wizard}}.

{{Firewall Settings}}

Add the following settings. You can skip comments (starting with {{Code|#}}). Don't use {{Code|;}} for comments. <ref>That config file is a bash fragment.</ref> Likely you do not need to either uncomment (removing the {{Code|#}} in front) or modify {{Code|VPN_INTERFACE}} / {{Code|LOCAL_NET}}.

<pre>
## Make sure Tor always connects through the VPN.
## Enable: 1
## Disable: 0
## DISABELD BY DEFAULT, because it requires a VPN provider.
VPN_FIREWALL=1

## For OpenVPN.
#VPN_INTERFACE=tun0

## Destinations you don not want routed through the VPN.
## 10.0.2.2-10.0.2.24: VirtualBox DHCP
#      LOCAL_NET="\
#         127.0.0.0-127.0.0.24 \
#         192.168.0.0-192.168.0.24 \
#         192.168.1.0-192.168.1.24 \
#         10.152.152.0-10.152.152.24 \
#         10.0.2.2-10.0.2.24 \
#      "
</pre>

Save.

{{Reload Firewall}}

{{Open with root rights|filename=
/etc/sudoers.d/tunnel_unpriv
}}

Comment in. (Remove the single hashes ({{Code2|#}} in front of all lines, but do not remove the double hashes ({{Code2|##}}).

In the following example we are using the free RiseUp VPN, because it is known to support TCP, UDP, SSL. You can use any VPN you like.

Look inside the [https://help.riseup.net/vpn riseup VPN help page] for [https://help.riseup.net/en/riseup-ca <code>RiseupCA.pem</code>] and (right click) [https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem download] it. Store it in {{Code2|/etc/openvpn/RiseupCA.pem}}.

TODO: won't work without Tor being enabled

<pre>
scurl https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem | sudo tee /etc/openvpn/RiseupCA.pem
</pre>

You need a riseup.net account. You need to know your riseup account name. Go to https://user.riseup.net/users/riseupusername/vpn to obtain your VPN secret. (VPN password) (Replace "riseupusername" with your actual riseup user name.) (Or just got to https://user.riseup.net, login and click on "VPN".) 

{{Open with root rights|filename=
/etc/openvpn/auth.txt 
}}

Add. (Add your actual user name and password.)

<pre>
riseupusername
vpnsecret
</pre>

Save.

<ref>We must run OpenVPN as user 'tunnel', because that is the only user besides user {{Code2|clearnet}} that will be allowed to establish connections.</ref>

Note, you must use IP addresses. You cannot use DNS hostnames. For example, you could not use {{Code2|vpn.riseup.net}}. You have to use IP addresses such as for example {{Code2|198.252.153.226}}. You find out the IP from your provider or by using nslookup on the host. Example. (You need to use your actual DNS hostname, not {{Code2|vpn.riseup.net}}.

<pre>
nslookup vpn.riseup.net
</pre>

{{Open with root rights|filename=
/etc/openvpn/openvpn.conf
}}

Add.

Note: make sure to adjust the {{Code|remote 198.252.153.226 80}} variable in your config (unless you are using {{Code|nyc.vpn.riseup.net}} as your VPN service). Replace the IP ({{Code|198.252.153.226}}) and port ({{Code|80}}) to match your VPN service.

<pre>
client

auth-user-pass auth.txt

## using nyc.vpn.riseup.net 80
remote 198.252.153.226 80

ca RiseupCA.pem
remote-cert-tls server
script-security 1
proto tcp

user tunnel
iproute /usr/bin/ip_unpriv

dev tun0
persist-tun
</pre>

<ref>
The [https://github.com/Whonix/usability-misc/blob/master/usr/bin/ip_unpriv /usr/bin/ip_unpriv] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.

The [https://github.com/Whonix/usability-misc/blob/master/etc/sudoers.d/tunnel_unpriv /etc/sudoers.d/tunnel_unpriv] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.

The [https://github.com/Whonix/usability-misc/blob/master/lib/systemd/system/openvpn%40openvpn.service.d/50_unpriv.conf /lib/systemd/system/openvpn@openvpn.service.d/50_unpriv.conf] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.
</ref>

Save.

TODO: update-resolv-conf ?

Create the OpenVPN systemd service file.

<pre>
sudo cp /lib/systemd/system/openvpn@.service /lib/systemd/system/openvpn@openvpn.service
</pre>

Enable the OpenVPN systemd service file.

<pre>
sudo systemctl enable openvpn@openvpn
</pre>

Start the OpenVPN systemd service.

<pre>
sudo service openvpn@openvpn start
</pre>

Check the OpenVPN systemd service status.

<pre>
sudo service openvpn@openvpn status
</pre>

TODO:

Make sure /var/run/openvpn is writable by user tunnel.

Enable Tor using Whonix Setup Wizard.

{{whonixsetup}}

= Footnotes =
<references/>

{{Footer}}

[[Category:Documentation]]
