__NOINDEX__
<!--
Copyright:

   {{project name}} Computer Security Education wiki page Copyright (C) Amnesia <amnesia at boum dot org>
   {{project name}} Computer Security Education wiki page Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.

The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in {{project name}} virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
The {{project name}} Computer Security Education wiki page is forked from the Tails Enable MAC Changer page, from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/doc/advanced_topics/mac_changer.mdwn;hb=770c6f26f8dcd06452fef1c57dafb2878e0dee11> and on the Tails macchanger page from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/todo/macchanger.mdwn;hb=f27853e23d7985594d54f00f30153b6acd97312e>.
-->
{{Header}}
{{#seo:
|description=THIS WIKI PAGE IS DEPRECATED AND OUTDATED. PLEASE REFER TO THE COMPUTER SECURITY EDUCATION SECTION - https://www.whonix.org/wiki/Documentation
|image=https://www.whonix.org/w/images/3/36/Abstract-989922-640.jpg
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px|alt=Whonix first time users warning]]
| text       = 
'''THIS WIKI PAGE IS DEPRECATED AND OUTDATED. PLEASE REFER TO THE COMPUTER SECURITY EDUCATION SECTION [[Documentation|HERE]]'''
}}

__TOC__

== Introduction ==
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px|alt=Whonix first time users warning]]
| text       = 
'''THIS WIKI PAGE IS DEPRECATED AND OUTDATED. PLEASE REFER TO THE COMPUTER SECURITY EDUCATION SECTION [[Documentation|HERE]]'''
}}


{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px|alt=Whonix first time users warning]]
| text       = 
Before reviewing this section, be sure to also read the [[Warning]] page.
}}


{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This wiki entry purposefully focuses on:
* General computing security information.
* Host operating system security advice.
* Preparatory steps before installing {{project name}} using a Type I hypervisor (Qubes-Whonix) or a Type II hypervisor like VirtualBox or KVM.
}}

== General ==
With its default settings, {{project name}} may provide [[Comparison with Others#Security|better protection]] than Tor alone. Achieving greater security depends on how much time the user is willing to invest in {{project name}} configuration. Security also rests upon the daily practices and procedures that have been adopted by the user, see [[Documentation]].

== Safer Upgrades ==
If {{project name}} is already installed, <i>before</i> a {{project name}} upgrade is performed on the current platform it is best to shutdown any running virtual machine (VM) instances, particularly if they are attached to the internal virtual network ("Whonix" or "sys-whonix"):

* [[{{q project name short}}|{{q project name}}]]: Before upgrading {{project name}} TemplateVMs, close as many open VMs as possible. Do not run VMs from different domains at the same time as upgrading. 
* [[{{non q project name short}}|{{non q project name}}]]: If running VM instances are not shutdown, there is a cross-contamination risk for new machines being imported into the virtualizer. For example, this is possible if a powerful adversary has taken control over those VMs currently in use. This action is not required if the user intends to create a new virtual network for the machines being imported.

== Tor Browser ==
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Tip: [[{{non q project name short}}|{{non q project name}}]] users are recommended to always have the latest [https://www.torproject.org/projects/torbrowser.html.en Tor Browser Bundle] (TBB) release installed on the host operating system (OS). [[{{q project name short}}|{{q project name}}]] users may also want to have TBB installed in a non-Whonix TemplateVM, like Fedora or Debian.
}}


The TBB is useful to test whether or not:

* The user lives in a censored area.
* Tor is blocked by the Internet Service Provider (ISP). 
* (Private) (obfuscated) bridges will be needed for operation of Tor Browser in {{project_name}}, see [[Bridges]].


If TBB fails to properly connect to Tor on the host OS or from a non-Whonix AppVM in Qubes, then {{project name}} will similarly fail to work. Another benefit of installing TBB in this fashion is that if Tor Browser unexpectedly stops running in {{project_name}}, then Tor Browser can still be independently used to visit the {{project name}} website for a solution to this issue.

For even greater security and privacy, users should read and follow the advice in the [[Tor_Browser|Tor Browser]] chapter.

== Host Security ==

=== Core Dumps ===

All OS platforms have a "core dump" functionality which poses potential security and privacy risks. According to Wikipedia: <ref>https://en.wikipedia.org/wiki/Core_dump</ref>

<blockquote>In computing, a core dump (in Unix parlance), memory dump, or system dump consists of the recorded state of the working memory of a computer program at a specific time, generally when the program has crashed or otherwise terminated abnormally. In practice, other key pieces of program state are usually dumped at the same time, including the processor registers, which may include the program counter and stack pointer, memory management information, and other processor and operating system flags and information. Core dumps are often used to assist in diagnosing and debugging errors in computer programs.</blockquote>

The primary function of core dumps is to provide the user or programmer with specialized information to determine the root cause of a system crash in order to perform debugging. These files are viewable as text or image formats, and can be analysed with special tools. In Windows, both kernel-mode dumps and user-mode dumps are available. The former contains information on either the full memory or large sections of it, while the latter is limited to single processes. <ref>https://en.wikipedia.org/wiki/Core_dump</ref>

==== Security and Privacy Risks ====

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Most of today’s operating systems, libraries, languages, and so on leave sensitive data they handle - passwords, financial and other information - scattered throughout memory, and it often leaks to disk. Information may be left there for an indeterminate period and this increases the risk of a system compromise. <ref>https://cs.stanford.edu/people/jchow/papers/lifetime-sigops04.pdf</ref>
}}


Core dumps can potentially contain sensitive information like: <ref>https://wiki.archlinux.org/index.php/Core_dump</ref> <ref>https://cs.stanford.edu/people/jchow/papers/lifetime-sigops04.pdf</ref> <ref>https://security.stackexchange.com/questions/131552/risks-of-encryption-keys-contained-in-a-memory-dump-after-a-crash</ref>

* Any activities undertaken in a session.
* All existing contents in RAM at the time of a crash:
** Disk encryption keys and passwords.
** Details of open documents.
** Other passwords.
** Detailed system information that can assist targeted attacks.


Clearly, how long copies of data survive and where they end up are critical factors. There is no guarantee that RAM is wiped or overwritten during this process. This is not just a theoretical concern, as exploits in the wild have been observed which force privileged applications to perform core dumps, disclosing the contents of shadow password files and other information in the process. <ref>https://cs.stanford.edu/people/jchow/papers/lifetime-sigops04.pdf</ref>

While this information is stored locally on GNU/Linux distributions, this is not the case on proprietary platforms. Windows and macOS generally ship this memory information to the OS vendor. <ref>https://cs.stanford.edu/people/jchow/papers/lifetime-sigops04.pdf</ref> <ref>https://msdn.microsoft.com/en-us/library/windows/desktop/bb787181%28v=vs.85%29.aspx</ref> <ref>https://en.wikipedia.org/wiki/Crash_Reporter</ref> <ref>http://www.networkworld.com/article/2164903/windows/windows-how-to-solve-windows-8-crashes-in-less-than-a-minute.html</ref> <ref>Notably, GNU/Linux platforms like Debian usually have core dumps turned on via systemd's default settings.</ref>

For greater security, advanced users should consider configuring the OS to avoid making core dumps. If possible, preventing access to process memory is also advisable, along with secure storage of the file system. <ref>https://docs.tibco.com/pub/rendezvous/8.3.1_january_2011/html/tib_rv_administration/rv_adm.6.072.htm</ref> <ref>https://stackoverflow.com/questions/17068818/how-to-deal-with-passwords-securely-within-your-application</ref> GNU/Linux users can further research disabling core dump features [https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/ here] and [https://wiki.archlinux.org/index.php/Core_dump here].

=== Hostnames ===

Computers are given hostnames for a number of good reasons. For instance, this is particularly useful for computers which operate on a network, as administrators and users are then able to ping computers, remotely connect to the computer, mount computer disks, and conduct other relevant activities. Naming conventions for computers are usually left to the individual, and may either comprise random chosen selections (“MrBig”, “coffeelover”, “Qubes-WhonixRocks” etc.), or default values that comprise information such as user name, login name, and device brand / model / make.

In the case of smaller devices like smart phones, these usually have manufacturer-assigned names which are either generic (“Samsung Phone”) or completely unique (“android_f7s89f8ir78etywt”), and may contain information such as the brand name, language used, and the name of the device owner. In many cases, hostnames cannot be changed - or at least not without “rooting” the device. <ref>https://tools.ietf.org/html/rfc8117</ref> In the case of {{project_name}}, the hostname is always set to "host". <ref>https://github.com/Whonix/anon-base-files</ref> <ref>https://github.com/Whonix/anon-base-files/blob/master/etc/hostname.anondist</ref>

The hostname given to a user’s home computer or device can be leaked via a number of protocols, posing a privacy risk depending on the specificity of the naming convention. Vulnerable protocols which may leak the hostname include, but are not limited to: <ref>https://tools.ietf.org/html/rfc8117</ref> <ref>Refer to the source paper for further information on these protocols.</ref>

* DHCP.
* DNS address to name resolution.
* Multicast DNS.
* Link-local Multicast Name Resolution.
* DNS service discovery.


Disclosure of information is particularly problematic for mobile devices, since adversaries that monitor remote networks (like Wi-Fi hotspots) are able to obtain the hostname via passive monitoring, or active probing using a variety of Internet protcols. In combination with traffic analysis, adversaries that can obtain a hostname may be able to extract information that identifies the particular device and its properties; potentially revealing unique individuals utilizing the device. <ref>https://tools.ietf.org/html/rfc8117</ref>

Even if generic names are used for hostnames such as “pinkrose” or “linuxfan”, the possible identity of the user is narrowed significantly to a much smaller subset, particularly when combined with data on sites that are visited. This may quickly lead to user identification because hostname disclosure allows for tracking of the computer or device across many domains, and one-time exposure of the user via clearnet traffic can inform databases which link unique hostnames to user identities.

As a further example, consider an adversary that is tracking users connecting to a specific Wi-Fi hot spot in an airport. After retrieving the hostname of a particular user “ABSmith”, and observing VPN connections to the Apple corporate network, the two pieces of information reveal that Mr Smith is the owner, and is an employee of Apple.

'''Recommendations'''

Obviously a generic hostname is advisable, but in practice, there are limited other solutions available at present. One is to turn off any protocols that are not strictly necessary and which leak hostnames, particularly when insecure places are visited. This reduces the attack surface, but is impractical for certain protocols; for example, DHCP is necessary for Internet connectivity and many services depend on protocols such as mDNS. Another option is to use different hostnames for different purposes, rather than relying on a global hostname - this option is available on some OSes. Ultimately, a randomized hostname protocol is necessary to protect privacy, similar to methods utilized for MAC addresses. <ref>https://tools.ietf.org/html/rfc8117</ref>

=== Malware ===
{{Anchor|AntiVirus}}
{{Anchor|Malware}}
{{Malware}}

=== Firmware Trojans ===
{{Firmware Trojans}}

=== Avoid Out-of-band Management Features ===

A commonly decried hardware feature on modern platforms is the [https://software.intel.com/en-us/blogs/2011/12/14/intelr-amt-and-the-intelr-me/ Intel Management Engine (ME) and Active Management Technology (AMT)]. 

==== Out-of-band Management Design ====

Out-of-band management has been around since 1998, when it was dubbed the Intelligent Platform Management Interface (IPMI) framework. <ref>https://en.wikipedia.org/wiki/Ipmi</ref> It consists of a proprietary firmware running on the Baseboard Management Controller (BMC), <ref>https://en.wikipedia.org/wiki/Baseboard_management_controller#Baseboard_management_controller</ref> which is a dedicated micro-controller in enterprise NICs to allow complete remote control over a machine despite its power state. <ref>Facebook has put out OpenBMC, an interesting implementation that theoretically can be placed on BMCs. Problematically, most vendors (HP, Dell, IBM and so on) will not let users install firmware that is not signed by them. In addition to permission issues, without available low-level drivers and publicly available hardware that will run the firmware, the user is simply out of luck.</ref>

Modern Intel ME is a firmware running on a dedicated micro-controller in all machines, while Intel AMT is the remote access feature introduced as part of the vPro platform. Most Intel hardware produced in the last ten years supports ME and AMT "features". <ref>https://archive.org/download/IntelCentrino2WithVproTechnologyAndIntelCore2Processor/IntelCentrino2WithVproTechnologyAndIntelCore2ProcessorWithVproTechnology.pdf</ref> This includes: desktops, servers, ultrabooks, tablets, and laptops with the Intel Core vPro processor family (Intel Core i3, i5, i7, and Intel Xeon processor E3-1200 product family). <ref>https://en.wikipedia.org/wiki/Intel_Active_Management_Technology</ref> Other popular hardware manufacturers also have an analogous feature to ME. For instance, AMD's "Secure Processor" (formerly "Platform Security Processor") is based in turn on ARM TrustZone technology. <ref>www.amd.com/en-us/innovations/software-technologies/security</ref>

==== Out-of-band Management Functionality ====

The Electronic Frontier Foundation (EFF) states: <ref>https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it</ref>

<blockquote>The ME is a largely undocumented master controller for your CPU: it works with system firmware during boot and has direct access to system memory, the screen, keyboard, and network.</blockquote>

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = If the Intel ME is shipped with the AMT module which is both enabled and provisioned, then <i>potentially</i> any vulnerabilities present could allow attackers to bypass password authentication for the module.
}}


Attackers who bypass password authentication can: <ref>https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it</ref>

* Interact with the screen or console in a fashion identical to a user.
* Boot arbitrary operating systems or install new operating systems.
* Steal disk encryption passwords.


If a system is vulnerable, the effect of this Intel technology is administrators (or hackers) can remotely monitor, maintain, update, upgrade and repair (or sabotage) computers, even while they are sleeping. This activity is distinct from software-based (in-band) management, since hardware-based management uses TCP/IP stack communication channels (bypassing any firewalls present), and the presence of an OS or locally installed management agent is not required. <ref>https://en.wikipedia.org/wiki/Intel_Active_Management_Technology#Security</ref> 

==== Exploitation Risk ====

Unfortunately, Intel ME and AMT have created serious security risks, because faults in the design potentially allow remote attackers to access the user's computer secretly and have full control and awareness. <ref>https://semiaccurate.com/2017/05/01/remote-security-exploit-2008-intel-platforms/</ref> On 1 May 2017, these fears were realized when Intel confirmed and patched a Remote [https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00075&languageid=en-fr Elevation of Privilege bug (CVE-2017-5689)] in the ME technology. 

Not every machine is susceptible to this attack, even though every Intel platform with either Intel Standard Manageability, Active Management Technology, or Small Business Technology, from Nehalem in 2008 to Kaby Lake in 2017 has a potentially remotely exploitable security hole. In many cases, AMT is enabled but <i>not</i> provisioned by default for the 1st to 7th generation processors. Nevertheless, if a system is vulnerable the risks to unpatched systems include: <ref>https://semiaccurate.com/2017/05/01/remote-security-exploit-2008-intel-platforms/</ref>

* An unprivileged network attacker gaining system privileges to provisioned Intel management engines.
* An unprivileged local attacker could provision manageability features to gain unprivileged network or local system privileges.


The safest course of action is for users to disable the AMT module if possible in BIOS and to make sure that LMS is not installed. Failing that, the Intel firmware image should be updated to remove the security vulnerability. <ref>https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it</ref>

==== General Privacy and Security Concerns ====

The concerns posed by Intel (and partially AMD) firmware is comparable to any other proprietary firmware blob running on a user's system or all its peripherals. Almost every component in a modern computer has firmware running on auxiliary processors of varying architectures, all of which have privileged machine access. The inner workings of firmware binaries can still be investigated and examined for malware via reverse engineering. <ref>http://xvilka.me/h2hc2014-reversing-firmware-radare-slides.pdf</ref> <ref>https://recon.cx/2014/slides/Recon%202014%20Skochinsky.pdf</ref>

Manufacturers are unlikely to insert a malicious backdoor intentionally into every product. The reason is if/when the backdoor was discovered, its intent would be undeniable and it would destroy the reputation of the business and severely impact revenue. Recent disclosures indicate that some adversaries instead favor targeted attacks (product interdiction and implants) to avoid detection for as long as possible. <ref>https://theintercept.com/2014/10/10/core-secrets/</ref> <ref>http://www.spiegel.de/international/world/the-nsa-uses-powerful-toolbox-in-effort-to-spy-on-global-networks-a-940969.html</ref> "Zero day" exploits are another preferred method of access by adversaries. <ref>Significant and previously unknown vulnerabilities are used as a way into all systems without leaving any ''a priori'' discoverable traces of the infection until they are used. Zero days are typically used selectively to extend their shelf-life. Another similar but more common method is compromising targets via serious bugs that users often fail to patch. See [https://theintercept.com/2017/04/14/leaked-nsa-malware-threatens-windows-users-around-the-world/ here] and [https://www.eff.org/deeplinks/2016/09/nsas-failure-report-shadow-broker-vulnerabilities-underscores-need-oversight here] for examples.</ref>

The problem with out-of-band management is exemplified by the recent Intel security advisory. Exposing proprietary, hard-to-patch blobs which contain bugs to the network can lead to remote exploitation by advanced adversaries, including common criminals. The "Nobody But Us" (NOBUS) concept promoted by adversaries is simply a fallacy as evidenced by recent worldwide security incidents, including the leaking of the adversary toolkit used for hacking targets. <ref>https://www.infowars.com/shadow-brokers-release-most-damaging-nsa-hacking-tools-yet/</ref> According to prominent Intel ME researchers and reverse-engineers, only corporate AMT firmware includes the networking stack, but the safest action is for users to avoid computers with this feature entirely. <ref>https://www.coreboot.org/pipermail/coreboot/2016-December/082748.html</ref> <ref>There were some mobile variants which had access to the wireless 3G chip (for anti-theft), but this functionality has been dropped.</ref>

In principle, the concept of out-of-band management has its place in data centers, not on personal home computers. Even in the former case, without Libre software the owner of the machine(s) cannot be sure they are the only person with remote access control, in order to patch security vulnerabilities on demand. <ref>Libre software can also contain bugs, but it at least gives users the freedom to fix them.</ref> While the functionality is not secret, running a network-facing, bug-ridden proprietary OS and giving hardware privileged access to a machine has proven a [http://fish2.com/ipmi/itrain-gz.html horrible] [https://en.wikipedia.org/wiki/Intel_AMT#Known_vulnerabilities_and_exploits idea]. 

==== Hardware Recommendations ====

When buying new hardware, the user should avoid Intel hardware that has AMT. Unfortunately that rules out most modern Intel hardware produced in the last ten years. AMD chipsets do not contain fully featured out-of-band management like AMT. However, there are other comparable problems (from a freedom perspective) with hardware produced by both Intel and AMD. <ref>https://www.fsf.org/blogs/community/active-management-technology</ref>

It has been recently discovered that ME can be disabled and mostly erased with a simple python script. The functionality of systems running both Libre and proprietary BIOS firmwares were unaffected, including recent CPU generations. Only experts should attempt this procedure, since the computer may become "bricked" (unusable) if the procedure is completed incorrectly. <ref>https://phoronix.com/scan.php?page=news_item&px=Intel-ME-Cleaning</ref> <ref>https://github.com/corna/me_cleaner/wiki/me_cleaner-status</ref> <ref>https://github.com/corna/me_cleaner</ref>

==== Avoid Other Out-of-band Features ====

Users should also avoid or disable the commonly deployed PXE boot <ref>https://en.wikipedia.org/wiki/Preboot_Execution_Environment#Acceptance</ref> and Wake-on-Lan (WoL) "features". PXE is implemented either as a Network Interface Card (NIC) BIOS extension or as UEFI code in modern devices (where it can be easily disabled). <ref>https://www.techwalla.com/articles/how-to-disable-pxe</ref> <ref>https://en.wikipedia.org/wiki/Preboot_Execution_Environment#Overview</ref> On most systems, WoL hardware functionality is usually blocked by default and explicitly needs to be enabled using the system BIOS or UEFI. <ref>https://en.wikipedia.org/wiki/Wake-on-LAN#Respond_to_the_Magic_Packet_and_restore_full_power</ref> <ref>https://en.wikipedia.org/wiki/Wake-on-LAN#Hardware_implementations</ref> 

Though rare nowadays, also avoid machines with the LoJack anti-theft feature since it is a persistent BIOS/UEFI firmware module that shares features with trojans or rootkits. For instance, laptops can be remotely locked, have files deleted, or disclose their exact location. Further, the module "phones home" daily to a monitoring center, providing location, user, software and hardware information. <ref>https://en.wikipedia.org/wiki/LoJack_for_Laptops</ref>

=== Using a Dedicated Host Operating System and Computer ===

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Both Non-Qubes-Whonix and [[{{q project name short}}|{{q project name}}]] users should avoid [https://www.qubes-os.org/doc/multiboot/ dual / multi-boot configurations]. The other OS (like Windows) could modify the unprotected /boot partition or firmware to maliciously compromise Qubes or the host OS, and also potentially spy on user activities.
}}


[[{{non q project name short}}|{{non q project name}}]] users are recommended to use one dedicated host OS just for hosting {{project name}} VMs. Otherwise, if the host OS which is used on a daily basis is compromised, {{project name}} cannot provide any additional protection since the host is part of the system's [[#Malware|trusted computing base]]. 

For even greater security, the dedicated host OS can be used on a computer solely bought for {{project name}} activities. Ideally this computer will have never been used for anything else before, negating the risk of a prior hardware compromise.

=== Using {{project name}} on External Media ===

At this time, {{project name}} does not provide a [https://github.com/Whonix/Whonix/issues/262 user-friendly USB creator] (community contributions are welcome!). However, for greater security users can install the host operating system(s) required for {{project name}} on a dedicated ([[Advanced_Security_Guide#Full_Disk_Encryption|encrypted]]) external disk(s) such as a USB flash drive, FireWire and eSATA devices and so on. 

Using external media reduces the risk of other operating system(s) infecting {{project name}} host operating system. When {{project name}} disk(s) are not in use, they can either be removed or hidden. 

There are a number of online guides explaining how to [https://www.debian.org/CD/live/ install Linux on a USB]. These instructions can be followed to create a live {{project name}} USB, with the exception that both a supported virtualizer and {{project name}} must also be installed on the external media.

=== Using a Non-shared Host ===

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Tip: {{project name}} should preferably be used only on computers without shared access.
}}


It is unwise to allow others to use your computer, even if they are trustworthy individuals. If they are not equally knowledgeable in computer security, then one mistake could potentially lead to compromise of the entire system. <ref>If necessary, this risk is partially mitigated by creating untrusted domains in [[{{q project name short}}|{{q project name}}]] for other users.</ref>

Needless to say, {{project name}} should not be hosted in the [https://en.wikipedia.org/wiki/Cloud_computing cloud], on a foreign server that is not controlled by the user, on a [https://en.wikipedia.org/wiki/Virtual_private_server virtual private server (VPS)], or other remote hosting options. The risks include: <ref>https://en.wikipedia.org/wiki/Cloud_computing#Security_and_privacy</ref> <ref>https://en.wikipedia.org/wiki/Cloud_security</ref>

* Data on these systems is readily accessible to their owners.
* Data can be accidentally or deliberately altered / deleted.
* Legal ownership of data is disputed.
* Shared technological vulnerabilities include insecure interfaces and application program interfaces (APIs), data loss / leakage, and hardware failure.
* Proven vulnerability to large scale attacks like [https://en.wikipedia.org/wiki/Hyperjacking "hyperjacking"], along with exposure to traditional threats like network eavesdropping, invasion, denial of service attacks, side-channel attacks and so on.

=== Firmware Updates ===
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This chapter contains general security advice and is unspecific to Whonix.
}}


Due to the difficulty of this topic and the specificity of hardware and host OS firmware, this issue is generally outside the scope of {{project name}} documentation. The links provided further below may not be the most relevant to the end user, necessitating further individual research.

==== Firmware on Personal Computers ====

Firmware is generally defined as the type of software that provides control, monitoring and data manipulation of engineered products. <ref>https://en.wikipedia.org/wiki/Firmware</ref> In the case of computers, firmware is held in non-volatile memory devices such as [https://en.wikipedia.org/wiki/ROM ROM], [https://en.wikipedia.org/wiki/Eprom EPROM] or [https://en.wikipedia.org/wiki/Flash_memory flash memory] and is associated with: <ref>https://en.wikipedia.org/wiki/Firmware#Personal_computers</ref> <ref>https://en.wikipedia.org/wiki/Firmware#Examples</ref> <ref>http://www.darkreading.com/partner-perspectives/intel/raising-the-stakes-when-software-attacks-hardware/a/d-id/1319423</ref> <ref>https://www.fsf.org/campaigns/priority-projects/hardware-firmware-drivers</ref>

* [https://en.wikipedia.org/wiki/BIOS BIOS] [https://wiki.gentoo.org/wiki/BIOS_Update updates].
* [https://en.wikipedia.org/wiki/Binary_blob Non-free] drivers or [https://packages.debian.org/jessie/firmware-linux-nonfree firmware].
* [https://en.wikipedia.org/wiki/Microcode Processor microcode] [https://wiki.archlinux.org/index.php/Microcode updates] (on Debian systems, depending on your processor, either the [https://packages.debian.org/jessie/intel-microcode intel-microcode] or the [https://packages.debian.org/jessie/admin/amd64-microcode amd-microcode] package).
* Firmware in storage devices like harddrives, DVD drives, and flash storage.
* All computer peripherals like printers, scanners and cameras / webcams.
* [https://help.ubuntu.com/community/BIOSUpdate UEFI] compliant firmware.
* [https://en.wikipedia.org/wiki/Firmware#Examples Routers and firewalls].
* Network adapters, IO controllers, power management and graphics processing units.
* 3-D graphics engines.


==== Firmware Updating and Security Problems ====

The major problem with updating firmware is that it cannot be done automatically in most cases. Therefore, it is difficult to fix functionality or security issues after the hardware has shipped. While utility programs are often available to update BIOS, firmware in other devices is rarely updated and mechanisms for detecting and updating firmware is not standardized. <ref>https://en.wikipedia.org/wiki/Firmware#Personal_computers</ref> If firmware can be upgraded, this is usually possible via a program created by the provider. Old firmware should always be saved before upgrading. If the process fails or the newer version performs worse, the process can be reverted. <ref>https://en.wikipedia.org/wiki/Firmware#Flashing</ref>

Updating firmware may or may not improve security. On the one hand it may fix vulnerabilities, but on the other  hand an update may introduce a new backdoor. If the reader knows of any such examples, they can be freely listed here. Unfortunately, end users must blindly trust the hardware producer, so it might be better to install non-free updates anyway. <ref>Also see this debian-security mailing list thread, [https://lists.debian.org/debian-security/2013/09/msg00027.html How secure is an installation with no non-free packages?]</ref> Until these re-writable firmware areas are locked down or the code is open-sourced and vastly simplified, it is likely to remain a rich environment for malicious adversaries. <ref>http://www.darkreading.com/partner-perspectives/intel/raising-the-stakes-when-software-attacks-hardware/a/d-id/1319423</ref> <ref>Mark Shuttleworth, founder of the Ubuntu Linux distribution, has described [http://www.markshuttleworth.com/archives/1332 proprietary firmware as a security risk], stating "firmware on your device is the NSA's best friend" and calling firmware "a trojan horse of monumental proportions".</ref>

The reality is that advanced adversaries are routinely hacking the firmware of [https://www.wired.com/2013/09/nsa-router-hacking/ Internet routers, switches and firewalls], along with [https://www.wired.com/2015/02/nsa-firmware-hacking/ harddrive firmware], and [https://wikileaks.org/vault7/#Dark%20Matter UEFI/EFI and ethernet adapters]. The number of targets is already in the tens of thousands on an annual basis. Subverting firmware in this manner provides a stealthy and persistent presence that can eavesdrop on or re-route all network data, or access information in invisible storage areas that are unecrypted (bypassing disk encryption). Worst of all, the firmware sabotage is believed to survive software updates or complete OS re-installations. Attacks may also be designed to corrupt firmware so machines are prevented from booting, even with an external drive. <ref>http://www.darkreading.com/partner-perspectives/intel/raising-the-stakes-when-software-attacks-hardware/a/d-id/1319423</ref>

=== Using Open-source Hardware ===
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This chapter contains general security advice and is unspecific to Whonix. Users interested in this topic should undertake significant research before purchasing any open-source hardware.
}}


==== Hardware Trust in Modern Computing ====
Security researcher and Qubes founder, Joanna Rutkowska, has noted that modern computing and networking security relies upon a critical foundation - trusted hardware and firmware domains. Even high-security operating systems have an security upper bound that is defined by the trustworthiness of hardware components that are ideally placed to compromise the entire system if bugs or backdoors are present: <ref>https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf</ref>

<blockquote>... for years we have been, similarly, assuming the underlying hardware, together with all the firmware that runs on it, such as the BIOS/UEFI and the SMM, GPU/NIC/SATA/HDD/EC firmware, etc., is all. . . trusted.
<br />
But isn’t that a rational assumption, after all?<br />
<br />
Well, not quite: today we know it is rather unwise to assume all hardware and firmware is trusted. Various research from the last ten years, as discussed below, has provided enough evidence for that, in the author’s opinion. We should thus revisit this assumption. And given what’s at stake, the sooner we do this, the better.
</blockquote>

Rutkowska has concluded the following hardware components and mechanisms are all vulnerable to exploitation and often flawed in their implementation, making them easy to "backdoor": <ref>https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf</ref>

* x86 boot security (BIOS implementation).
* Vt-d (CPU-enforced sandboxing of networking).
* Graphics cards (GPUs) and sub-systems.
* USB controllers.
* Disk controllers (SATA etc.).
* Embedded controllers (for keyboard operation, battery charging etc.).
* Audio cards.
* Peripheral devices.
* Intel Management Engine (ME) and AMD Security Processor (embedded microcontrollers).
* Built-in speakers, microphones and cameras.


This is particularly true for privileged, out-of-band hardware components like Intel ME's AMT which can read or write any of the host computer's memory, without any constraints - the perfect, undetectable rootkiting infrastructure. <ref>https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf</ref> In short, it appears that modern computing architectures are impossible to secure properly, especially since popular, proprietary hardware options (Intel and AMD) dominate the market. <ref>AMD-based x86 platforms have analogous hardware mechanisms to Intel, so they are not theoretically safer.</ref>

==== Open-source Hardware Alternatives ====
Users who are motivated to avoid proprietary hardware solutions are in a bind. There are few options available that are truly "free" (open-source), affordable, and provide suitable processing power to run "secure" operating systems like [[{{q_project_name_short}}|{{q_project_name}}]], because specific hardware requirements like VT-d and VT-x are necessary for compatibility with future software releases. 

Open-source hardware is also not perfectly secure, since it is not "stateless", that is, lacking any persistent storage. <ref>https://blog.invisiblethings.org/papers/2015/state_harmful.pdf</ref> Further, "free" hardware does not really exist, since by definition it requires that hardware be free at all levels, including: licensing, the chip and circuit board designs, the field-programmable gate array, source code, relevant repositories and so on. Also, proprietary "soft cores" which are often incorporated in various hardware circuits need to be purged to meet the necessary criteria. <ref>https://www.wired.com/2015/03/richard-stallman-how-to-make-hardware-designs-free/</ref> <ref>https://www.wired.com/2015/03/need-free-digital-hardware-designs/</ref>

===== ARM-based Platforms =====

ARM architecture dominates smartphone and tablet markets and provides a good level of performance. However,  an open-source "ARM processor" is non-existent, because only the specifications and other intellectual property (IP) are released to manufacturers under specific licenses. This leads to NVIDIA, Samsung and others combining the ARM IP with their own, leading to the actual, customized processors called System-on-Chips (SoCs). <ref>https://blog.invisiblethings.org/papers/2015/state_harmful.pdf</ref> ARM SoCs also often have a TrustZone extension, with implementation providing similar functionality to Intel's ME. There is nothing special in ARM architecture that prevents the possible introduction of backdoors.

===== Open-source Processors =====

Unfortunately, a fully open-source, Linux-capable based processor (SoC) is not yet available, with the design still being finalized. While this project will eventually allow a 64-bit RISC-V instruction set architecture and the development of low-cost boards, the wait may be lengthy (many years) and it is not clear such processors will perform well enough for typical desktop workflows like watching movies, running browsers, using office suites and so on. It is also unknown whether this design will allow for security technologies like IOMMU and memory virtualization. <ref>http://www.lowrisc.org/about/</ref> <ref>https://blog.invisiblethings.org/papers/2015/state_harmful.pdf</ref>

==== Final Hardware Purchase ====
The Free Software Foundation (FSF) makes a number of relevant recommendations: <ref>https://www.fsf.org/resources/hw</ref>

* Find devices which support fully free distributions of GNU/Linux.
* Purchase hardware from manufacturers who support GNU/Linux.
* Purchase hardware which supports coreboot/libreboot as a proprietary BIOS replacement. <ref>For example, the Thinkpad X200 and X60 laptop series. Users utilizing coreboot/libreboot with Intel CPUs are not necessarily safe, since the Firmware Support Package (FSP) can still potentially modify things in a malicious manner.</ref>
* Purchase hardware without the need for proprietary drivers or firmware: [http://h-node.org/ hdnode.org].
* Check the [https://www.fsf.org/resources/hw/endorsement/criteria FSF criteria] for hardware certification requirements.
* If looking for a single-board computer (SBC), check the [https://www.fsf.org/resources/hw/single-board-computers list] of available (flawed) hardware. <ref>None of these options are completely free in their design.</ref>
* Check the list of [http://www.coreboot.org/Supported_Motherboards motherboards] that are compatible with coreboot. <ref>Some motherboards still require proprietary CPU microcode.</ref>


===== Buyer Considerations =====

Based on the preceding information and links, users seeking an open-source solution need to make a compromise. Since RISC processors supporting a fully-fledged operating system do not yet exist, the closest thing available is [https://www.fsf.org/resources/hw/single-board-computers single-board computers (SBCs)], which are delivered as one circuit board that are powerful enough to run a real operating system. 

These systems generally contain a SoC with an ARM processor, with options like [http://spectrum.ieee.org/consumer-electronics/portable-devices/novena-a-laptop-with-no-secrets Novena] and [http://www.mouser.com/new/pandaboardorg/pandaboardES/ PandaBoardES] falling into this category. However, they still have a number of closed-source binary blobs and the FSF also notes "severe flaws" in these products due to proprietary design concerns.

High-end laptop options like those provided by [https://puri.sm/ Purism] also seek to remove as many proprietary blobs as possible, for example by using coreboot in place of the standard BIOS implementation. Unfortunately, this solution is expensive and still relies on an Intel processor. Despite the claims that ME is "neutralized", the ME still poses potential security threats to the user as highlighted in Rutkowska's research.

In practical terms, it is just simpler for the majority of users to purchase a standard closed-source architecture. This provides a high-performance solution and the features necessary for compatibility with high-end operating systems like [[{{q project name short}}|{{q project name}}]]. In the coming years when open-source processors and hardware designs further mature and the necessary functionality is provided for virtualization, users will then have a reasonable and fairly-priced alternative.

==== Firmware Considerations ====
[https://en.wikipedia.org/wiki/Open-source_hardware Open-source hardware] is not affected by the non-free firmware updates issue described in the previous chapter. Such hardware might be more trustworthy, but open source firmware can be just as insecure as a proprietary one. Fortunately, open source firmware increases the chances of making it actually secure, with options like coreboot appearing to be a promising solution. <ref>https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf</ref>

=== Host Operating System ===
==== Windows Hosts ====
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = GNU/Linux, Xen or BSD are the only serious options for a host operating system that respects privacy. The user can stop reading here or review the rest of this Windows chapter to find out why.
}}

{{Windows_Hosts}}

==== MacOS Hosts ====
In a similar vein to Windows platforms, there are also many problems with Apple operating systems including: <ref>https://www.gnu.org/proprietary/malware-apple.en.html</ref>

* Intentional backdoors allowing remote root privileges, wipes and deletion of applications.
* Censorship of allowable programs like games, and media, political, bitcoin and health-focused applications.
* An insecure design allowing execution of malicious code by applications and the extraction of a user's messaging history.
* Forced system upgrades without user consent.
* Imposing arbitrary limits on the use of software.
* Bricking devices if fixed by an "unauthorized" repair shop.
* Scanning user system files.
* Failing to fix system security bugs and preventing users from taking manual steps to do so.
* Bricking devices that had been unlocked without permission.
* Deleting files from user devices that had been downloaded from sources competing with Apple companies.
* Using biometric markers like fingerprints to allow devices to be used.
* Sending lots of personal user information to Apple servers. For example, automatically uploading photos and videos used by certain applications, and sending unsaved documents and program files to Apple servers without permission.
* Sending user search terms and location information to Apple.
* Imposing digital restrictions mechanisms.
* Preventing users from installing older versions of operating systems.
* Designing user interfaces to make specific options hard to find and enable/disable.


See [https://www.gnu.org/proprietary/malware-apple.en.html this write-up] by the FSF for further detailed information. <ref>https://fix-macosx.com/</ref>

==== GNU/Linux Hosts ====
A [https://www.fsf.org/about/what-is-free-software Free Software] OS that respects user freedom is the only practical choice when it comes to privacy and security. It also comes with many advanced anti-exploit [[Advanced_Security_Guide#Hardened_Kernels|mechanisms]] built-in.

Use GNU/Linux on the host and only use in-repository software that is automatically gpg-signed and installed from the distributor's repositories by the package manager. This is far safer than downloading programs from the Internet like Windows users are required to do.

===== Recommended GNU/Linux Distribution =====
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = [https://www.debian.org/ Debian GNU/Linux] is recommended as providing a reasonable balance of usability, security and user freedom.
}}


Interested readers can find a complete list of reasons to use Debian [https://www.debian.org/intro/why_debian here]. For instructions on downloading, verification and installation see [[Debian|Debian Tips]]. 

Formerly, virtually any GNU/Linux distribution could be recommended in order to protect user privacy, however Ubuntu's data-mining functionality makes it an unsuitable choice. <ref>https://fixubuntu.com/</ref> In fact, Ubuntu's February 2016 Privacy Policy still states at the time of writing: <ref>https://www.ubuntu.com/legal/terms-and-policies/privacy-policy</ref>

<blockquote>When you enter a search term into the dash Ubuntu will search your Ubuntu computer and will record the search terms locally. Depending on whether you have opted in or out (see the “Online Search” section below), we may also send your keystrokes as a search term to productsearch.ubuntu.com and selected third parties so that we may complement your search results with online search results from such third parties including: Facebook, Twitter, BBC and Amazon. Canonical and these selected third parties will collect your search terms and use them to provide you with search results while using Ubuntu.<br />
<br />
By searching in the dash you consent to:
1. the collection and use of your search terms and IP address in this way; and <br />
2. the storage of your search terms and IP address by Canonical and such selected third parties (if applicable).
</blockquote>

<div class="toccolours mw-collapsible mw-collapsed">
For other reasons not to use Ubuntu or Ubuntu-derived distributions, expand this section.
<div class="mw-collapsible-content">
Ubuntu's paltry contributions to the upstream Libre projects they heavily rely on is a policy decision and not a coincidence. As stated by Canonical founder Mark Shuttleworth: "It is absolutely true we have no interest in the core fundamentals of the Linux kernel, none whatsoever." <ref>http://www.theinquirer.net/inquirer/news/2168086/canonical-linux-kernel</ref>

Canonical only bothers to majorly contribute in any way when forking significant projects; for example, Wayland into Mir, GNOME into Unity<ref>https://ask.fedoraproject.org/en/question/25127/how-to-build-unity-in-fedora/</ref>, .deb packages incompatible with Debian because of  zstd compression <ref>https://www.phoronix.com/scan.php?page=news_item&px=Ubuntu-Zstd-Deb-Packages</ref>. This appears to be a consistent attempt to fragment the software stack to lock in users and put pressure on competing distributions and vendors. <ref>http://mjg59.dreamwidth.org/25376.html</ref> <ref>http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/Mir-vs.-Wayland-show-why-upstream-projects-matter</ref>

The Ubuntu Contributor License Agreement gives them complete power over patents that cover contributed code. Essentially they are granted the right to re-license this code under any license of their choice, including a proprietary one.

Ubuntu also has a history of treating staff in a hostile fashion. For example, the Kubuntu spin project lead was unilaterally removed without warning and contrary to wishes of his team members. <ref>https://kver.wordpress.com/2015/05/27/making-sense-of-the-kubuntucanonical-leadership-spat/</ref> Canonical also pilfered donation funds originally meant for desktop spin projects (Kubuntu, Lubuntu and others). In Kubuntu's case, after funding was abruptly dropped, Blue Systems had to step in to save the popular project.<ref>http://www.pcworld.com/article/2998647/operating-systems/kubuntus-founder-resigns-accuses-canonical-of-defrauding-donors-and-violating-copyright.html</ref> <ref>https://lists.ubuntu.com/archives/kubuntu-devel/2012-February/005782.html</ref>

Canonical has also been applying an absurd intellectual property (IP) policy over packages in its repositories for years. This resulted in claims that Canonical owns the copyright over any binaries compiled by their servers. After the FSF stepped in and arranged a resolution over a period of 2 years, the policy was amended to state that Canonical’s IP policy cannot override packages with GPL licenses. However, this now means that any package with a permissive license is now copyrighted by Canonical. <ref>https://www.fsf.org/news/canonical-updated-licensing-terms</ref> <ref>http://mjg59.dreamwidth.org/37113.html</ref> 

Unfortunately, downstream forks based on Ubuntu cannot be relied upon either. For example, the popular Linux Mint distro was threatened with being cut off from access to Ubuntu infrastructure unless they caved in to Canonical's binary licensing terms. <ref>https://forums.linuxmint.com/viewtopic.php?t=152450</ref> Since then, Linux Mint has developed a version based on Debian instead. Canonical's vague trademark and IP policy has become toxic for downstream distributions. Many have made the smart choice to re-base on Debian instead of Ubuntu over the years including Kali, {{project name}} and others. <ref>https://mjg59.dreamwidth.org/45939.html</ref>

A final major concern is Canonical's friendly relationship with Microsoft. This should make all GNU/Linux users uncomfortable, given Microsoft's strategy of "Embrace, Extend, Extinguish" with respect to Free Software. <ref>http://www.zdnet.com/article/microsoft-and-canonical-partner-to-bring-ubuntu-to-windows-10/</ref>
</div>
</div>

There are of course other options. See [[Dev/Operating_System#Why_don.27t_you_use_.3Cyour_favorite_most_secure_operating_system.3E_for_Whonix.3F | "Why don't you use <your favorite most secure operating system> for Whonix?"]] for analysis of alternatives.

=== Router and Local Area Network Security ===
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = If the Whonix-Gateway is ever compromised, it can theoretically access any computer in the [https://en.wikipedia.org/wiki/Local_area_network local area network (LAN)].
}}


Based on the threat posed by a Whonix-Gateway compromise, users who have administrator control over the home network are strongly recommended to lock down the web interface of the home router and apply the strictest settings possible.

==== The State of Router Insecurity ====
Most routers provided by ISPs and those widely available in electronics stores are profoundly insecure, have outdated software and firmware, enable settings by default that open exploit opportunities, and remain vulnerable if users fail to take appropriate steps. <ref>https://www.defcon.org/images/defcon-18/dc-18-presentations/Heffner/DEFCON-18-Heffner-Routers.pdf</ref> 

Many experienced users who are concerned about computing security overlook these problems and instead focus on general operating system and networking solutions, rather than this weak endpoint frequently targeted by attackers, including state-level adversaries. Compromised routers can easily spy on a user's activities, conduct man-in-the-middle attacks, alter unencrypted data, or send the user to websites that masquerade as webmail or on-line banking portals. <ref>http://www.tomsguide.com/us/home-router-security,news-19245.html</ref>

==== Suitable Hardware and Router Configurations ====

Experts routinely advise that low-grade routers should be avoided. Cheap models often fail to notify of firmware updates that patch security vulnerabilities, have limitations on password length for administrator access, and typically come as a less-secure, combined modem/router unit. 

Users should consider upgrading to a commercial-grade router that is normally intended for small businesses as a sensible investment in security. Further, it is safer to have a personally owned routing device that connects to an ISP-provided modem/router in order to maximize administrative control over routing and wireless features of the home network. 

Before purchase, check the router has firewall capabilities and that it supports Network Address Translation (NAT), so internal systems cannot be directly accessed from the Internet. Also check whether the router can be configured off-line, which is an advantage. Disconnect or turn-off routers/modems when they are not in use. <ref>http://www.usar.army.mil/Portals/98/Documents/Slicksheet_BestPracticesForKeepingYourHomeNetworkSecure.pdf</ref> <ref>http://www.tomsguide.com/us/home-router-security,news-19245.html</ref>

==== Accessing Router Settings ====

To access and change router settings, the user must type the router's IP address into a web browser address bar and enter the administrative login and password. Users who are unsure of the default login credentials can check the list [http://www.routerpasswords.com/ here] and search by manufacturer and model.

Routers usually have a common address like: <code>192.168.1.1</code>, but there are many alternatives depending on the make and model of the router. Check the manual that comes with the router to determine the correct address, or alternatively research the manufacturer's website to determine this address. <ref>http://www.pcworld.com/article/243290/how_to_lock_down_your_wireless_network.html</ref> 

If users cannot confirm the relevant address to access the router, terminal commands can be used to trace the ip route or various networking tools can be accessed to ascertain it.

===== Linux =====

On Linux operating systems, run the following command in a terminal. <ref>In [[{{q_project_name_short}}|{{q_project_name}}]], this command is run from the NetVM terminal.</ref>

{{CodeSelect|code=
ip route
}}

The output starting with "default via XXX.XXX.XXX.XXX" is the relevant router IP address for changing settings. 

Alternatively, most linux desktops have a network icon which has this information: <code>Right-click on network icon</code> -> <code>Select "Connection Information" or similar</code>. 

The IP address displayed next to "Default Route" or "Gateway" is the relevant address required. <ref>https://www.howtogeek.com/233952/how-to-find-your-routers-ip-address-on-any-computer-smartphone-or-tablet/</ref>

===== Windows =====

To find the router IP address in Windows, open a command prompt.

<code>Start</code> -> <code>Search box</code> -> <code>Type cmd</code>

At the command prompt, run. <ref>http://19216811.wiki/how-to-find-ip-address-in-windows/</ref>

{{CodeSelect|code=
ipconfig
}}

The output should show the relevant IP address next to the "Default Gateway".

Alternatively, look for the relevant network settings under: <code>Control Panel</code> -> <code>Network and Internet</code> -> <code>View network status and tasks</code> -> <code>Left-click on the appropriate connection</code> -> <code>Left-click on "Details"</code>.

The router's IP address is to the right of the IPv4 Default Gateway.
Network and router configuration<ref>https://mentecuriosa.net/192-168-1-254-entrar-a-la-configuracion-wi-fi-del-router/</ref>

===== macOS =====

In a terminal, run. <ref>https://apple.stackexchange.com/questions/20547/how-do-i-find-my-ip-address-from-the-command-line</ref>

{{CodeSelect|code=
ifconfig
}}

This command will show all the interfaces and their respective IP and MAC addresses. 

Alternatively, look for the relevant network settings under: <code>System Preferences</code> -> <code>Network</code> -> <code>TCP/IP (hardwired) or Wi-Fi (wireless) section</code>. <ref>http://osxdaily.com/2011/10/05/find-router-ip-address-mac/</ref>

==== Recommended Router Settings ====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Many router models do not allow the user to change specific settings discussed in this section.
}}

===== General Router Settings ===== 

To lock down the router, the following settings are recommended: <ref>http://routersecurity.org/checklist.php</ref> <ref>http://www.tomsguide.com/us/home-router-security,news-19245.html</ref> <ref>https://www.defcon.org/images/defcon-18/dc-18-presentations/Heffner/DEFCON-18-Heffner-Routers.pdf</ref>

* Change the default router username and password to something suitably long and random using a [https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases Diceware passphrase]. <ref>It may be sensible to tape this on the router so it is not lost in the future.</ref>
* Turn off [https://security.stackexchange.com/questions/38631/what-are-the-security-implications-of-enabling-upnp-in-my-home-router Universal Plug and Play (UPnP)], which can allow applications to open ports to external computers.
* Disable [https://en.wikipedia.org/wiki/NAT_Port_Mapping_Protocol NAT-PMP], since it has similar functionality to UPnP.
* Disable the [http://routersecurity.org/hnap.php Home Network Administrative Protocol] since it allows remote management of network devices.
* If port forwarding is necessary, it should be limited to a source IP address and/or source IP address subnet.
* Keep router firmware up-to-date at all times for better security. Set the self-updating firmware option if it is available.
* Do not bind services to the external interface. 
* Reconfigure the router firewall rules to drop all relevant incoming packets. 
* Disable the HTTP interface and enable the HTTPS interface instead, preferably on a non-standard port. For example: <code>https://192.168.1.1:82</code> instead of <code>http://192.168.1.1</code>
* Use the browser's incognito or private mode when accessing the administrative interface so the URL is not saved in the browser history.
* Change the [https://en.wikipedia.org/wiki/SSID Service Set ID (SSID)] which often leaks router information. Do not use personally identifying information like the apartment number you live in.
* If offered, disable cloud-based router management because trust is shifted to another person between the user and the router.
* Do not use mesh router systems that do not permit local administrative access.
* Disable remote administrative access and administrative access over Wi-Fi. Set administrator access only via wired ethernet connections (not possible with mesh routers).
* Disable all other remote-access protocols like [https://en.wikipedia.org/wiki/Ping_%28networking_utility%29 PING], [https://en.wikipedia.org/wiki/Telnet Telnet] and [https://en.wikipedia.org/wiki/Ssh SSH].
* Firewall ports should be set to "stealth" rather than "closed". This way no response is given to unsolicited external communications from attackers probing the network.
* Set logging to on, if the feature is available. This allows for a record of unsolicited incoming connection attempts, attempted logins and so on.
* Avoid administrating the router with a smartphone application.
* Use Gibson Research Corp.'s [https://www.grc.com/shieldsup Shields Up port-scanning service] to test the router for hundreds of common vulnerabilities, most of which can be mitigated by the router's administrator.

===== Wireless Network Router Settings ===== 

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' [https://kryptera.se/assets/uploads/2017/10/usenix2016-wifi.pdf Recent research] suggests that WPA2 encryption may be broken. <ref>Due to flawed 802.11 random number generation (generating insufficient entropy), downgrade attacks on group keys transmitted in the 4-way handshake (forcing usage of RC4 encryption), decryption of the 128-bit group key, and injection of group traffic into unicast traffic. This means unicast wifi traffic can be decrypted.</ref> Although various countermeasures are reported in the literature and Linux distributions have already patched relevant software, users who require greater security may wish to disable Wi-Fi completely on their systems. <ref><blockquote>We tested this attack against an Asus RT-AC51U and a laptop running Windows 7. The group key was obtained by exploiting the weak random number generator as discussed in Section 3.4.1. In order to successfully perform the ARP poisoning attack against Windows, we injected malicious ARP requests. First, we were able to successfully inject the ARP packets using the group key. This confirms that the group key can be used to inject unicast packets. Once we poisoned the ARP cache of both the victim and router, they transmitted all their packets towards the broadcast MAC address. At this point we were able to successfully decrypt these broadcast packets using the group key, and read out the unicast IP packets sent by both the victim and router.</blockquote></ref>
}}


The following wireless settings are recommended: <ref>http://www.pcworld.com/article/243290/how_to_lock_down_your_wireless_network.html</ref> <ref>http://www.tomsguide.com/us/home-router-security,news-19245.html</ref> <ref>http://routersecurity.org/checklist.php</ref>

* Disable [https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup Wi-Fi Protected Setup (WPS)] because it allows any device to connect to the network with the relevant eight-digit PIN.
* Do not bother disabling SSID broadcasting since it is trivial to guess.
* Do not rely on the [https://en.wikipedia.org/wiki/Wired_Equivalent_Privacy WEP] and [https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access WPA] standards which are cryptographically weak and have known security weaknesses. Use the [https://en.wikipedia.org/wiki/WPA2 WPA2] standard so only authorized users can use the network. <ref>Usually the WPA2 Personal standard is fine; the WPA2 Enterprise version is only required for businesses.</ref>
* Use routers that exclusively use WPA2, preferably with the AES standard (CCMP) and not TKIP which is less secure.
* Enable the "Block WAN Requests" option to conceal the network from other Internet users.
* Limit the number of [https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol Dynamic Host Configuration Protocol (DHCP)] leases (connects) to the Wi-Fi network to match the number of personal devices owned.
* Enable MAC Filtering so only specific devices may connect to the network.
* If you must allow use of the Wi-Fi network to visitors, set up a guest network that turns itself off after a set period.
* Use the 5-GHz band for Wi-Fi instead of the standard 2.4GHz band (if possible), since the 5 GHz band does not travel as far.
* If possible, schedule Wi-Fi networks to turn off at night, and then turn on in the morning.

==== Router Firmware ====

Strong consideration should be given to flashing the wired/wireless router with an open-source GNU/Linux distribution. Solutions such as [https://wiki.openwrt.org/ OpenWrt] and [https://www.dd-wrt.com/site/ DD-WRT] provide firmware that is suitable for a large variety of wired and wireless routers and embedded systems. 

The strengths of this approach are openness, regularly updated firmware images, a great number of functionalities (fully-featured), less bloat, and more control over router behavior. The downside is that open-source firmware is  not free of bugs; careful research is required before attempting this procedure. Check the online guides for instructions on how to proceed and whether the home router is compatible with the available firmware.

=== Host Firewall ===

It is recommended to use a simple host firewall and deny any incoming connections on all ports. For a Linux host OS like Debian, Ubuntu and Arch Linux, [https://en.wikipedia.org/wiki/Uncomplicated_Firewall gufw] provides a simple graphical user interface for the Uncomplicated Firewall program. <ref>Uncomplicated Firewall by itself only provides a command-line interface for managing the netfilter firewall. Iptables are used by the program for configuration.</ref>

The following steps install [https://packages.debian.org/jessie/gufw gufw on a Debian host].

1. Install gufw.

{{CodeSelect|code=
sudo apt-get update && sudo apt-get install gufw
}}

2. Start gufw.

{{CodeSelect|code=
gufw
}}

3. Press <code>Unlock</code>. Enter the password.

4. Press <code>Enabled</code>. <ref>The firewall is disabled by default.</ref>

5. Check the settings.

By default, the settings should be <code>Incoming: Deny</code> and <code>Outgoing: Allow</code>.

Although not recommended, users can add special firewall rules, use pre-configured options for common programs and services, or set other advanced options in gufw by following [https://help.ubuntu.com/community/Gufw this guide].

=== Disable TCP Timestamps ===
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = TCP timestamps provide protection against [https://en.wikipedia.org/wiki/Protection_Against_Wrapped_Sequence_Numbers#TCP_timestamps wrapped sequence numbers]. 
}}


The downside of TCP timestamps is adversaries can remotely calculate the system uptime and boot time of the machine and the host's clock down to millisecond precision. These calculated uptimes and boot times can also help to detect hidden network-enabled operating systems, as well as link spoofed IP and MAC addresses together and more. <ref>http://forensicswiki.org/wiki/TCP_timestamps</ref> 

To prevent this information leaking to an adversary, it is recommended to disable TCP timestamps on any operating systems being used. The less information available to attackers, the greater the security.

{{Anchor|Linux or Qubes}}
==== Qubes ====
TCP timestamps are disabled by default in Qubes R3.1 and above. <ref>https://github.com/QubesOS/qubes-issues/issues/1344</ref>

==== Linux ====
<ref>
Temporary disabling TCP timestamps for testing purposes.

Note: Users can skip this temporary option and instead apply the chapter's main instructions if a permanent solution is desired.

To dynamically disable TCP timestamping on Linux (when using Qubes: in the NetVM).

Become root.

{{CodeSelect|code=
sudo su
}}

Disable TCP timestamps.

{{CodeSelect|code=
echo 0 > /proc/sys/net/ipv4/tcp_timestamps
}}
</ref>

Open a terminal (Konsole).

Become root.

{{CodeSelect|code=
sudo su
}}

Add the following line to {{Code2|/etc/sysctl.d/tcp_timestamps.conf}}.

{{CodeSelect|code=
net.ipv4.tcp_timestamps = 0
}}

To do that, use the following command.

{{CodeSelect|code=
echo "net.ipv4.tcp_timestamps = 0" > /etc/sysctl.d/tcp_timestamps.conf
}}

To apply the sysctl settings without a reboot, run the following command.

{{CodeSelect|code=
sysctl -p
}}

Check if the changes have been properly set.

{{CodeSelect|code=
sysctl -a | grep net.ipv4.tcp_timestamps
}}

If it worked correctly, the system should provide the following output.

<pre>
net.ipv4.tcp_timestamps = 0
</pre>
==== Windows ====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = The user must have administrator privileges.
}}


To disable TCP timestamps on Windows, run the following root command.

{{CodeSelect|code=
netsh int tcp set global timestamps=disabled
}}

==== Other Operating Systems ====
'''MacOS'''

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This procedure is untested. It should also work for BSD-like operating systems.
}}


Users must disable rfc1323 which handles TCP timestamps. To check system-set TCP values, run. <ref>https://serverfault.com/questions/216956/how-to-check-tcp-timeout-in-linux-macos</ref>

{{CodeSelect|code=
sysctl net.inet.tcp
}}

A value of 1 against <code>net.inet.tcp.rfc1323</code> indicates it is enabled, while 0 indicates it is disabled.

To permanently disable TCP timestamps, run. <ref>https://macosx.com/threads/slow-tcp-ip-smc-router.9132/</ref> <ref>https://seconfig.sytes.net/blog/p/9201755583327191420/office-where-mac-computers-couldn-t-browse-https-sites</ref>

{{CodeSelect|code=
sudo su
}}

{{CodeSelect|code=
echo net.inet.tcp.rfc1323=0 > /etc/sysctl.conf
}}

To temporarily disable TCP timestamps (until reboot) for testing purposes, run. 

{{CodeSelect|code=
sudo sysctl -w net.inet.tcp.rfc1323=0
}}

TODO: expand.

=== Disable ICMP Timestamps ===

The Internet Control Message Protocol (ICMP) is used by network devices, including routers, to send operational information and error messages such as whether a service is available or if a host/router cannot be reached. Unlike TCP and UDP, it is a network level, not transport layer protocol. Commonly network utilities are based on ICMP messages, such as ''traceroute'' and ''ping''. <ref>https://en.wikipedia.org/wiki/ICMP_Timestamp</ref> 

The ICMP protocol includes timestamps for time synchronization, with the originating timestamp being set to the time (in milliseconds since midnight) since the sender last touched the packet. A timestamp reply is also generated, consisting of the originating timestamp (sent by the sender) as well as a "receive timestamp", which captures when the timestamp was received and a reply sent. <ref>https://en.wikipedia.org/wiki/ICMP_Timestamp#Timestamp</ref>

==== Qubes ====

ICMP timestamps are disabled by default in Qubes R3.1 and above. <ref>https://github.com/QubesOS/qubes-issues/issues/1346</ref>

==== Linux ====

ICMP timestamps need to be blocked with the [[#Firewall|firewall]]. <ref>Advanced users can of course use IP tables. For example in [https://lists.debian.org/debian-firewall/1999/12/msg00010.html Debian]: <code>ipchains -p icmp -s $INTIP/0 13 -i $INTIF -j DENY</code> and <code>ipchains -p icmp -s 0.0.0.0/0 14 -i $EXTIF -j DENY</code></ref> This is distribution dependent and varies widely as does having a firewall enabled on your specific OS. Be aware that some distributions do not turn on the firewall by default. 

There are many differing ways to accomplish blocking ICMP timestamps via the command line, therefore users are recommended to consult the specific distribution's documentation. <ref>For instance, [http://www.thegeekstuff.com/2010/07/how-to-disable-ping-replies-in-linux/ Debian users] could edit the <i>/etc/systcl.conf</i> file manually and add <code>net.ipv4.icmp_echo_ignore_all = 1</code></ref> The most straightforward way is to download a GUI front-end (like gufw) to configure the firewall and have it set to silently drop all incoming connections by default, and allow only outgoing traffic from the machine.

==== Windows ====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This is untested.
}}


Recent Windows operating systems (Win 10, Win 8/8.1, Win 7) should have disabled ICMP settings by default in the Windows firewall. <ref>http://www.sysprobs.com/enable-ping-reply-and-ftp-traffic-in-windows-10-and-server</ref> 

'''From the Menu'''

The status of ICMP timestamps can be manually checked and changed on Windows systems via the Firewall settings. <ref>https://answers.microsoft.com/en-us/windows/forum/windows_7-security/check-icmp-timestamp-response/062ffa99-ffae-4ab0-a328-84371ed46ed8?tab=question&status=AllReplies#tabs</ref>

<code>Right-click on Start button</code> -> <code>Select Control Panel</code> -> <code>Select Windows Firewall</code> -> <code>Select Advanced Settings tab</code>

The ICMP Settings dialog box should show the ICMP timestamp is disabled: <code>Allow incoming timestamp request</code> is unchecked. <ref>https://msdn.microsoft.com/en-us/library/ms912869%28v=winembedded.5%29.aspx</ref>

'''From the Command Line'''

ICMP timestamp responses can be disabled via the netsh command line utility. This is necessary for Vista and earlier Windows versions. <ref>https://social.technet.microsoft.com/Forums/windows/en-US/219f3dcc-3e5b-4d9b-88ae-137215575c7f/icmp-timestamp-response?forum=w7itprosecurity</ref>

Open a terminal.

Run as an administrator.

{{CodeSelect|code=
netsh firewall set icmpsetting 13 disable
}}

Outgoing ICMP timestamp responses are now blocked.

==== Other Operating Systems ====

'''MacOS'''

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This is untested.
}}


MacOS systems should have ICMP timestamps disabled by default. Therefore, if the firewall is enabled and "Stealth Mode" is set, the system should not respond to any ICMP requests. This is how to check the system is properly secured: <ref>http://osxdaily.com/2015/11/18/enable-stealth-mode-mac-os-x-firewall/</ref>

<code>Menu</code> -> <code>System Preferences</code> -> <code>Security & Privacy</code> -> <code>Select the Firewall tab</code> -> <code>Check Firewall is On</code> -> <code>Click Firewall Options</code> -> <code>Enable Stealth Mode</code> -> <code>Click OK</code>

The "Block all incoming connections" checkbox should also be enabled for greater security. 

The user can also manually change or check the timestamp status of ICMP, since the system variable is  <code>net.inet.icmp.timestamp</code> in the <i>/etc/sysctl.conf</i> file. <ref>https://security.stackexchange.com/questions/46090/why-is-icmp-timestamping-disabled-on-os-x</ref> 

To permanently disable ICMP timestamps. <ref>https://superuser.com/questions/680200/os-x-how-to-make-it-reply-to-icmp-time-stamp-query</ref>

{{CodeSelect|code=
sudo sh -c "echo net.inet.icmp.timestamp=0 >> /etc/sysctl.conf"
}}

'''OpenBSD''' 

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This is untested.
}}


The easiest solution is to configure the firewall to block incoming and outgoing ICMP packets with ICMP types 13 (timestamp request) and 14 (timestamp response). <ref>https://beyondsecurity.zendesk.com/hc/en-us/articles/203609549--How-can-I-mitigate-ICMP-Timestamp-</ref>

Alternatively, set the relevant sysctl variable to 0 (it is enabled by default). In a terminal, run.

{{CodeSelect|code=
sysctl -w net.inet.icmp.tstamprepl=0
}}

TODO: expand.

{{Anchor|Microphone}}

=== Microphones ===

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Advanced adversaries already have specialized implant plug-ins which can [https://theintercept.com/2014/03/12/nsa-plans-infect-millions-computers-malware/ take over the computer's microphone] and record nearby conversations. <ref>The implant is called CAPTIVATEAUDIENCE, while the webcam equivalent is called GUMFISH.</ref> <ref>https://www.wired.com/2014/03/webcams-mics/</ref>
}}


'''Eavesdropping Risk'''

The user should check whether the computer or notebook has a microphone. Microphones are often built-in and go unnoticed. In most cases it is recommended to disable the microphone for security reasons. If the Whonix-Workstation is ever compromised by malware, an adversary could eavesdrop through the microphone. <ref>One attack vector is the use of [https://theintercept.com/2014/03/12/nsa-plans-infect-millions-computers-malware/ spam emails which containing malware].</ref>

'''Voice Recognition'''

It is safe to assume that everyone has had an unencrypted phone call during their lifetime and that one of them has been recorded. Voiceprints allow a person to be identified from the specific characteristics (acoustics) of their voice and it is a useful biometric marker. <ref>https://en.wikipedia.org/wiki/Speaker_recognition#Technology</ref> This means personal and unique voiceprints can be used to link non-anonymous and "anonymous" voice samples; a process called voice recognition and documented on the [[VoIP|VoIP]] wiki page in the introduction chapter. <ref>Writing styles are also personal and unique. Individuals can be identified with a similar method called [https://en.wikipedia.org/wiki/Stylometry stylometry], which is documented on the [[Surfing_Posting_Blogging|Surfing Posting Blogging]] wiki page.</ref>

'''Disabling or Removing Microphones'''

Unfortunately, by default microphones that are connected to the host are made available to virtual machines like Whonix-Workstation (except for [[{{q_project_name_short}}|{{q_project_name}}]], see further below).

For the greatest security, external microphones should be unplugged. If the microphone is built-in and the user decides to disable it, there may be a BIOS option to achieve this. Suitably skilled users may also attempt to remove built-in microphones, although this is more difficult.

'''Select Use of Microphones'''

[[Multiple_Whonix-Workstations|Multiple Whonix-Workstations]] should be used for: making internet calls, conducting [[Voip|Voice over IP (VoIP]]), or microphone use for other reasons inside Whonix-Workstation. In this way the microphone is used in selected, not all, Whonix-Workstations. Unplug the microphone after use.

For [[VoIP|VoIP]] purposes, audio passthrough capability may need to be enabled for the respective hypervisor. The following section documents how to get audio working on [[Download|supported platforms]].

Expand for more information:

<div class="toccolours mw-collapsible mw-collapsed">
==== KVM ====
<div class="mw-collapsible-content">
[[KVM]] by default emulates a line-in/line-out in the virtual sound device, meaning microphone passthrough to guests is enabled if it is turned on for the host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed">
==== VirtualBox ====
<div class="mw-collapsible-content">
[[VirtualBox]] does not yet have a feature to disable microphones inside virtual machines.<ref>https://www.virtualbox.org/ticket/12026</ref> Mute it on the host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed">
==== Qubes ====
<div class="mw-collapsible-content">
Qubes VM Manager is used to attach or detach microphones to selected VMs.

<code>Qubes VM Manger</code> -> <code>Right-click on VM</code> -> <code>Attach/deattach audio input device to the VM</code> <ref>Or left-click the microphone button on the Qubes VM Manager toolbar for the selected VM.</ref>
</div>
</div>

=== Webcams ===

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Webcams pose a [https://www.wired.com/2014/03/webcams-mics/ spying] [https://www.theguardian.com/world/2014/feb/27/gchq-nsa-webcam-images-internet-yahoo risk]. Webcams on infected machines can be used to take snapshots and/or eavesdrop using the webcam's built-in microphone.
}}


The user should always check if their computer or notebook has a webcam. One might be built-in, but have gone unnoticed - check the computer's datasheet and operating system hardware manager to be sure.

It is recommended that webcams are disabled or removed, unless the user plans to use it inside Whonix-Workstation. If webcam use is planned, it should be disabled and possibly unplugged immediately after use. 

External webcams should also be unplugged for optimal security. If the webcam is built-in, the user should check whether it can be disabled with a BIOS setting. Suitably skilled users can attempt to remove built-in webcams, although this may be difficult. Alternatively, the webcam can be covered externally with adhesive tape or a cap.

=== Wireless Input Devices ===

Avoid using wireless keyboards and mice because most send data unencrypted. Even if this wasn't the case, there is no way to verify the robustness of the cryptography involved in proprietary products. A local adversary (up to 100 meters away) can sniff keystrokes and inject their own, allowing them to take over the machine.<ref>https://www.schneier.com/blog/archives/2016/03/security_vulner_6.html</ref><ref>https://www.schneier.com/blog/archives/2016/08/security_vulner_7.html</ref>

=== Backups ===

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = It is important to store multiple, <i>encrypted</i> backups of sensitive data. 
}}


If the user does not possess at least two copies of the original data, then it should be considered lost. The reason is data on one medium might become inaccessible and beyond repair at any minute. In this case, the computer would not even detect the risk, so data recovery tools would not be of help either. <ref>In such cases the user might get lucky with professional data recovery companies, but the usual cost is a few thousand dollars.</ref>

Best practice recommendations:

* Store the original, encrypted file on a medium like the internal hard drive.
* Create a first encrypted backup: for example, on an external hard drive from manufacturer A.
* Create a second encrypted backup: for example, on an external hard drive from manufacturer B.


For greater security and to protect from incidents like fire or theft, backups in separate physical locations are recommended. Additionally, backups can be stored on remote servers, but the user must be sure it is encrypted properly. <ref>That is, with a recommended encryption method and a suitably long passphrase.</ref>

== {{project name}} information ==

=== MAC Address ===

==== Introduction ====

All network cards, both wired and wireless, have a unique identifier called a {{Code2|MAC address}}<ref>https://en.wikipedia.org/wiki/MAC_address</ref>. MAC addresses are stored in hardware and are used to assign an address to computers on the local network. 

The MAC address is <i>normally</i> not traceable because it is not passively sent to computers beyond the local router. <ref>Unless the computer is infected with [https://en.wikipedia.org/wiki/Malware Malware] designed to disclose this identifier.</ref> However, other computers on the local network can potentially log it, which then would provide proof that the user's computer has been connected to that specific network. If users intend to use an untrusted, public network then {{Code2|MAC spoofing}} should be considered. <ref>https://en.wikipedia.org/wiki/MAC_spoofing</ref>

'''MAC Spoofing Warning'''

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' According to recent research, MAC address spoofing is not effective against advanced tracking techniques that can still enumerate the address by looking at physical characteristics of the Wi-Fi card. <ref>[http://papers.mathyvanhoef.com/asiaccs2016.pdf ''Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms'']</ref> Unfortunately, a solution requires manufacturers to modify drivers or firmware of their hardware products to add privacy preserving mitigations.
}}


One workaround is to buy new "burner" Wi-Fi USB sticks of different brands. Take care to disable the computer's native Wi-Fi functionality in the BIOS setting if pursuing this option. The reason is the computer's characteristics are likely to have already been logged if it was ever used from an untrusted hotspot. Connectivity with these burner devices should only be enabled from the intended public destination. At no point should burner devices be used for network connections at locations tied to, or regularly visited by, the user. Use a different stick for every new location to avoid location profiling/tracking.

'''Other Location Tracking Risks'''

Dealing with the MAC address problem is only one piece of the larger location tracking puzzle. [[Tor#Advanced_Topics|Attention]] must also be given to changing the usual Tor entry guards used for connections. To thwart this attack, entry guard changes are necessary for every Tor instance on the user's machine host (apt-transport-tor) and guest.

An authentication technique can fingerprint devices - and also track user devices as a side-effect - by observing inter-packet timings on a LAN's wire-segment. The timing effects are the result of how various components in a machine create packets. <ref>[http://www2.ece.gatech.edu/cap/papers/1569740227-3.pdf ''A Passive Technique for Fingerprinting Wireless Devices with Wired-side Observations'']</ref> Fortunately, this technique cannot be used to identify devices across the internet. <ref>The primary weakness of this technique is that it relies on fine-grained packet timing; timing that is lost as a result of buffering in switches and routers. Therefore, this technique and similar methods are not suited for identification across the Internet. Rather, it is perfectly suited for the significant challenge of local network access control and other local network activities like counterfeit detection.</ref> This technique can be defeated by inducing random delays in a machine's packet stream. Since there is no concern about impersonating other devices on the LAN, it doesn't matter that such an authentication system will view such machines as "unknown". <ref>Figure 7(a) shows attackers that can vary their packet sizes, change their data rate, and tunnel their packets through another protocol. Figure 7(b) presents attackers that can introduce constant or random delays to the packet stream and load the CPU with intensive applications to overshadow normal behavior. Figure 7(c) shows an attacker that can modify or change its operating system. GTID (the passive fingerprinting method) detects these attacks and classifies all of these devices that generated attack traffic from previously seen devices as unknown.</ref> Note that spectrum analyzers are also mentioned as a way to fingerprint the unique electromagnetic (EM) characteristics of a Wi-Fi card. The disposable USB Wi-Fi workaround would mitigate this attack. <ref>There have also been physical layer approaches to fingerprinting wireless devices. Radio frequency (RF) emitter fingerprinting uses the distinct EM characteristics that arise from differences in circuit topology and manufacturing tolerances. This approach has a history of use in cellular systems and has more recently been applied to Wi-Fi and Bluetooth emitters. The EM properties fingerprint the unique transmitter of a signal and these differ from emitter to emitter. This technique requires expensive signal analyzer hardware to be within RF range of the target.</ref>

==== Using a Home Connection ====
{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = '''Tip:''' MAC address changes for home connections are not required.
}}


{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' This recommendation comes with an important caveat. If a browser exploit is successfully used for activities outside a VM, then the physical MAC address could be revealed to an attacker. If a user is already under suspicion, this would eventually provide proof of identity. In this scenario, if the MAC address was changed beforehand, then root access is required to discover the real physical address (this has <i>not</i> yet been tested).
}}


'''Connectivity Risk'''

If the user's home network has a cable modem internet connection, the ISP either provides the cable modem device as part of the service or requires pre-registration of the MAC address of the self-provided cable modem in order to setup the service. 

If a user manages to hack or change the MAC address of the modem, the service would immediately cease functioning because the IP address assignment is apportioned for, and bound to, that specific MAC address. As a result, when connecting from behind a cable modem/NAT router, MAC address spoofing of the computer's ethernet adapter may be pointless. If a user is traced, the trackable endpoint will be the MAC address of the cable modem device.

==== Using a Public Computer ====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This refers to use of computers in public places like libraries and Internet cafes.
}}


The MAC address should not be changed in this scenario, otherwise it may bring undesired administrator attention to the service/user and/or simply prevent access to the Internet.

==== Using a Personal Computer in a Public Network ====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = This refers to using a personal laptop, desktop or any other Internet-facing device in a public network.
}}


In this scenario, the MAC address should be changed. A new set of Tor entry guards should be selected by removing <i>/var/lib/tor/state</i>. Attempts should be made to disguise the use of Tor from the administrator of the public network. Depending on the user's configuration, this may involve using an obfsproxy bridge or the tunneling of traffic through SSH or a VPN prior to connecting to the Tor network. 

Depending on the user's threat model, changing the MAC address and using Tor might rule out revisiting that public network again in the future. If the same public network is to be reused, then users must decide whether to use the same MAC address (and set of Tor entry guards) or to create a new MAC address.

If MAC address logging by the administrator is suspected, it could be unwise to change the MAC address, since this may appear suspicious. If the user believes the network is sufficiently public and they have not been observed, then it might be safe to use a new MAC address - with a popular vendor ID and random/unique second part - each time the network is used.

For more discussion on this rather complex topic, see [[Dev/MAC]].

==== Random MAC Addresses ====
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' Using a completely random MAC address is not recommended. While this technique might be sufficient to confuse lessor adversaries, it will not defeat skilled adversaries.
}}


The problem of using a random MAC address is that the vendor ID which is chosen may be non-existent. Even if it exists, the user might end up with a vendor ID which has either never been used or not for decades. When spoofing MAC addresses, it is critical to use a a popular vendor ID. The initial, second part of the MAC address can safely be random or unique. <ref>Also note that if MAC address changing is always enabled, it might cause connectivity problems on some networks.</ref>

Research on this issue is still ongoing. {{project name}} cannot yet provide detailed instructions on how to create appropriate MAC addresses fulfilling the criteria above.

==== Auto-connect Risk ====

Apart from the difficulty in creating an appropriate MAC address for spoofing purposes, there are also technical hurdles to overcome in the form of preventing automatic network connections.

Preparing a spoofed MAC address will be futile if (when the computer is booted) it instantly connects to the public network, disclosing the user's real MAC address in the process:

* For VM users: The host operating system most likely automatically connects via updates, perhaps time sync, and other avenues. 
* For Physical Isolation users: Whonix-Gateway automatically connects to Tor after start.
* For USB Wi-FI device users: Automatic connections might also occur, depending on the configuration.

==== Changing MAC Addresses ====
===== For Qubes Hosts =====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Qubes OS does not currently “anonymize” or spoof the MAC address automatically.
}}


Qubes users can manually change MAC addresses in the NetVM by following either the Network Manager or macchanger guides. Refer to the following Qubes documentation and related support items:

* https://www.qubes-os.org/doc/anonymizing-your-mac-address/
* https://groups.google.com/forum/#!searchin/qubes-users/macchanger/qubes-users/gUPK-YqkC3E/WsarnjrddrsJ
* https://github.com/QubesOS/qubes-issues/issues/938

===== For Linux Hosts =====
<div class="toccolours mw-collapsible mw-collapsed">
If you are interested in MAC address spoofing in [[{{non q project name short}}|{{non q project name}}]], please press on Expand on the right.
<div class="mw-collapsible-content">
{{non-q-project}}

TODO: please help to test and expand these instructions.

'''1. Edit the Network Interfaces File'''

* Standard-[[Download|Whonix]]-Version (VM) users: Edit ''/etc/network/interfaces'' on the host.
* [[Physical Isolation]] users: Edit ''/etc/network/interfaces'' on Whonix-Gateway.


'''2. Get Macchanger'''

In a terminal, run.

{{CodeSelect|code=
su
}}
{{CodeSelect|code=
apt-get update && apt-get install macchanger
}}

'''3. Change the MAC Address (I)'''

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = The following steps will manually change the MAC address for the device. An example is provided for a wireless device (wlan0). Replace wlan0 to match your device, such as a ethernet device (eth0) and so on.
}}


{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
macchanger -a wlan0
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}

If instructions from Step 1+ did not work, the following steps might also work without macchanger. Replace wlan0 to match your specific device.
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
ifconfig wlan0 hw ether 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}
Or use iproute2 commands to change the MAC address.
{{CodeSelect|code=
ip link set down wlan0
}}
{{CodeSelect|code=
ip link set wlan0 address 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ip link set up wlan0
}}

'''4. Change the MAC Address (II)'''

Below <code>iface eth0 inet dhcp</code>, add.

{{CodeSelect|code=
hwaddress ether 00:00....
}}

'''5. ''Optional:'' Automatically Randomize MAC Address on Boot'''

If this is desired, add.

{{CodeSelect|code=
pre-up macchanger -e eth0
}}

'''6. Change New Network Interfaces Settings'''

To prevent automatically bringing up new network interfaces, uncomment the following.

{{CodeSelect|code=
auto eth0
}}

Then set manual bring ups with the following.

{{CodeSelect|code=
sudo ifup eth0
}}
</div>
</div>

===== For Windows Hosts =====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = In Windows, the MAC address can be changed with specific tools, by editing the registry, or via Device Manager.
}}


The following instructions outline MAC address spoofing in Windows 10 via Device Manager. Complete the following steps: <ref>http://windowsreport.com/mac-address-changer-windows-10/</ref>

<code>Press Windows Key + X</code> -> <code>select Device Manager</code> -> <code>Expand the list of Network adapters</code> -> <code>Right-click the appropriate adapter</code> -> <code>Select Properties</code> -> <code>Navigate to Advanced tab</code> -> <code>Select Network Address</code> -> <code>Enter any 12 digit hexadecimal value</code> -> <code>Click OK</code>

Reboot the computer for the changes to take effect. To check the changes are correct, in a terminal run. 

{{CodeSelect|code=
ipconfig /all 
}}

The physical address of the adapter should show the new MAC address.

===== For MacOS Hosts =====

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = These steps are untested.
}}


'''1. Find the Current MAC Address of the Interface''' <ref>http://www.online-tech-tips.com/computer-tips/how-to-change-mac-address/</ref>

<code>Open System Preferences</code> -> <code>Click on Network</code> -> <code>Select the interface from the listbox on the left</code> -> <code>Select the Advanced button</code> -> <code>Click on Hardware tab</code>

The first line is the MAC address of the interface.

'''2. Change the MAC Address'''

Note: There is no eth0 on default configurations of MacOS. By default, <code>en0</code> and <code>en1</code> are the physical network connections (wired and wireless LAN). <ref>https://superuser.com/questions/1190550/physical-and-wireless-interfaces-in-macos</ref> Disconnect from the networks before running these commands.

In a terminal, run as an administrator.

<pre>
ifconfig en0 | grep ether
</pre>

The output will show the MAC address for the en0 interface. Depending on how many interfaces there are on the computer, the command might need to be run several times by adding 1 to the number each time.

Once a MAC address is listed that matches the one seen via System Preferences, the user knows which interface (en0, en1....) to change. 

In a terminal, run the following as an administrator. Change "en0" to match the relevant interface, and "XX:XX:XX:XX:XX:XX" for the desired new MAC address (for example: f8:1e:df:d8:9d:8a).

{{CodeSelect|code=
sudo ifconfig en0 ether XX:XX:XX:XX:XX:XX
}}

'''3. Check the MAC Address has Changed'''

In a terminal, re-run.

<pre>
ifconfig en0 | grep ether
</pre>

The output should show a value matching the user's change.

==== Sources ====
See footnote. <ref>
* https://tails.boum.org/contribute/design/MAC_address/
* https://tails.boum.org/todo/macchanger/
* https://tails.boum.org/blueprint/macchanger/
* Worth reading! Thanks to Tails!
* [[Dev/MAC]]
</ref>

== Known Bugs ==

Follow these links to learn more about known bugs affecting [[Non-Qubes-Whonix_Known_bugs|Non-Qubes-Whonix]] and [https://phabricator.whonix.org/maniphest/query/rU7JDXYUa7vC/#R Qubes-Whonix]. For a list of all open issues affecting {{project name}} on both platforms, refer to the [https://phabricator.whonix.org/ Phabricator bug tracker].

== Greater Security and Next Steps ==

After reading and applying relevant steps outlined in this section, users can [[Download|download]] and  [[Verify_the_Whonix_images|verify]] the {{project name}} images before [[Install|installing]] them. In all cases, users should follow the [[Post Install Advice|post-installation advice]]. 

For greater security pre and post {{project name}} installation, users should also refer to the [[Documentation]] pages to learn more about potential threats and mitigations. For instance, users might like to consult the [[Design]] pages and consider the recommendations outlined in the [[Security_Guide|Security Guide]] and [[Advanced_Security_Guide|Advanced Security Guide]]. Users with limited time can refer to the [[Security_Guide#System_Hardening_Checklist|System Hardening Checklist]].

== References ==
{{reflist|close=1}}

= License =
{{License_Amnesia|{{FULLPAGENAME}}}}

{{Footer}}

[[Category:Documentation]]
