<!--
Copyright:

   Whonix Computer Security Education wiki page Copyright (C) Amnesia <amnesia at boum dot org>
   Whonix Computer Security Education wiki page Copyright (C) 2012 -2014 Patrick Schleizer <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.

The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in Whonix virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
The Whonix Computer Security Education wiki page is forked from the Tails Enable MAC Changer page, from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/doc/advanced_topics/mac_changer.mdwn;hb=770c6f26f8dcd06452fef1c57dafb2878e0dee11> and on the Tails macchanger page from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/todo/macchanger.mdwn;hb=f27853e23d7985594d54f00f30153b6acd97312e>.
-->
{{Header}}
{{#seo:
|description=Basic Computer Security Advice. Useful Before Installing Whonix for Better Security.
|og:image=https://www.whonix.org/w/images/3/36/Abstract-989922-640.jpg
}}

== Introduction ==

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px|alt=Whonix first time users warning]]
| text       = 
<!--T:208-->
Make sure you have already read the [[Warning]] page.
}}
== General ==
Whonix, with its default settings, [[Comparison with Others#Security|may]] provide better protection than Tor alone. Higher levels of security can be achieved depending on how much you are willing to invest in security practices and procedures. See [[Documentation]].

== Safer Upgrades ==
If you already have Whonix installed, before performing an upgrade to your current Whonix setup, you are advised to shutdown any running Whonix instance currently attached to the internal virtual network named 'Whonix'. This is required to prevent cross contamination of the new machines you are importing, in the event that a powerful adversary has taken control over the ones currently in use.

Note: This is not required if you intend to create a new virtual network for the machines you are importing.

== Tor Browser Bundle ==
It is recommended that you always have the latest release of [https://www.torproject.org/projects/torbrowser.html.en Tor Browser Bundle] installed on your host. 

The Tor Browser Bundle is great for testing, whether you live in a censored or not and if Tor is blocked by your ISP or not. If you need (private) or (obfuscated) bridges for the Tor Browser Bundle, you will also need them for Whonix. (See [[Bridges]].)

If the Tor Browser Bundle fails to work on your system, Whonix will similarly fail to work. If the Tor Browser unexpectedly stops running in Whonix, you can still use the Tor Browser independently to visit the Whonix Homepage.

== Host Security ==

=== Malware ===
{{Anchor|AntiVirus}}
{{Anchor|Malware}}
Why is it important to have a malware free system?

The integrity of the host is a critical part of the system's [https://en.wikipedia.org/wiki/Trusted_computing_base Trusted Computing Base]. If the host system is compromised by Malware<ref>https://en.wikipedia.org/wiki/Malware</ref> so is every virtual machine with Whonix, Tor and all anonymous communication. Malware can see your desktop, everything you type, send and receive.

Should I use an antivirus tool?

Antivirus products and personal firewalls<ref>https://en.wikipedia.org/wiki/Personal_firewall</ref> are NOT drop in solutions for a secure host. Malware can often stay undetected and application level personal firewalls are often circumvented <ref>
https://www.grc.com/lt/leaktest.htm</ref>. Polymorphic code<ref>
https://en.wikipedia.org/wiki/Polymorphic_code
</ref> and Rootkits<ref>https://en.wikipedia.org/wiki/Rootkit
</ref> essentially render Antivirus products helpless. <ref>
http://arstechnica.com/security/2014/05/antivurus-pioneer-symantec-declares-av-dead-and-doomed-to-failure/
</ref> <ref>
[https://www.reddit.com/r/IAmA/comments/sq7cy/iama_a_malware_coder_and_botnet_operator_ama/?limit=500000 A botnet authors was even writing undefeatable malware and trolling antivirus vendors.]
</ref> Some antivirus software also harms your privacy by sending files on your system back to company servers for analysis.

Are antivirus tools totally useless?

Actually worse than useless. In case of sophisticated and targeted attacks, the Antivirus software can serve as a pathway to exploiting a system's kernel (since they almost always run with admin privileges).<ref>https://theintercept.com/2015/06/22/nsa-gchq-targeted-kaspersky/</ref>

How to prevent a malware infection?

The optimal scenario is to not get infected by Malware in the first place. Once malicious code has accessed a system, it is next to impossible to contain. Hardening the operating system and isolating software that processes untrusted data with hypervisors are good basic steps.

Is there a way to find out if one is infected with malware?

Detection of off-the-shelf malware is a very hard problem. Conceptually a lost cause. Off-the-shelf malware - if widespread enough - has a chance of being detected by a technical person. It may also happen that tailored malware gets detected by a technical person, but the combination of tailored malware and a technical person looking and being lucky may not happen so often.

Detection of tailored malware is even harder.

As a non-technical person you don't have great options. Either you can:

* Spend a few years to learn the technical skills (knowledge about operating systems, network protocols, package analyzer, programming, disassembly), then try your luck.
* Pay a lot money to a very technical person trying to find malware on your system. (Figure out the salary / payment for a security researcher / malware analyst and pay be ready to pay them for a few months.)
* Be a high value target, have a probable explanation / evidence why you think you are being compromised and happen to find a very technical person to volunteer finding the malware. Most likely only people who have a strong intrinsic motivation. Like, if Snowden thought he was infected by a tailored virus, he might find someone looking into it to then publicly expose it.

=== Firmware Trojans ===
Once infected with a very sophisticated malware that modifies low-level firmware, it can very difficult to detect in almost all cases. Note this should not be confused with [https://en.wikipedia.org/wiki/Hardware_Trojan hardware/circuit trojans] which are malicious modifications made to machine components during the manufacturing process (though even those are not immune to detection<ref>https://en.wikipedia.org/wiki/Hardware_Trojan#Detecting_Hardware_Trojans</ref>).

Can a virtualizer such as Qubes, VirtualBox, KVM etc. prevent hardware compromise?

Running everything inside VMs is a very reasonable approach. However, it also only raises the bar. Making it more difficult / expensive to compromise the whole system. It's not a perfect system.

No distribution of Linux [or Xen, or...] like Debian, Qubes, BSD or whatnot can solve the issue of not needing to throw out the hardware. These are issues with hardware so they can only be really fixed at the hardware level. Software levels at best can provide workarounds.

The problem is that there is no hardware that consists of entirely Libre firmware. Analyzing the [https://en.wikipedia.org/wiki/Firmware firmware] of hardware or at least wiping a maybe-compromised version and overwriting it with a most-likely-clean firmware is much, much harder than it ought to be. The firmware being Libre Software would make verification easier though wouldn't stop infection. Disassembling hardware components (BIOS, disk controllers, CPU, Intel AMT) and flashing them with clean versions offline is so difficult, that it's just cheaper to buy new hardware.

A hypothetical stateless computer
<ref>https://blog.invisiblethings.org/2015/12/23/state_harmful.html</ref><ref>https://github.com/rootkovska/state_harmful/blob/master/state_harmful.md</ref> would deal with persistence of malware but cannot protect against damage (data-exfiltration) done by successful exploitation.

Bundling undesirable anti-features like DRM in closed firmware is further evidence that we need Libre firmware in addition to [https://www.gnu.org/philosophy/free-hardware-designs.html Libre hardware designs].

=== Using a dedicated host operating system ===

It is recommended that you use a dedicated host operating system just for hosting Whonix Virtual Machines. Should your every day operating system already be compromised, Whonix could not provide any additional protection. It's best to have one dedicated host operating system which is used to only host Whonix.

=== Using Whonix on External Media ===

Unfortunately, [https://github.com/Whonix/Whonix/issues/262 Whonix does not provide a user friendly USB creator (help welcome!)]. However, you can install the host operating system(s) required for Whonix on ([[Advanced_Security_Guide#Full_Disk_Encryption|encrypted]]) a dedicated external disk(s) such as USB, FireWire, eSATA, etc for futher security. This will reduce the risk of other operating system(s) infecting Whonix's host operating system. You can remove and hide the Whonix disk(s) while they are not in use. 

There are a number of guides online explaining how to install Linux on USB. Whonix differs only in that you must install a supported virtualizer and Whonix.

=== Using your own host ===

It is recommended that you only use Whonix on computers you own with no shared access. While other users may be trusted, they might not be equally knowledgeable in computer security. Only one mistake is required for your system to be compromised. 

Needless to say, hosting Whonix in the cloud, on a foreign server you do not physically control, on a VPS etc is not recommended. Information on these systems is readily accessible to their owners/regulators.

=== Using a dedicated host computer ===

For the ultimate host security option you should use a dedicated computer just for hosting Whonix. Ideally one, that you never used for anything else before.<ref>To reduce risks of eventual previous hardware compromised.</ref>

=== Firmware Updates ===
'''This chapter contains general security advice and is unspecific to Whonix.'''

Due to the hardware and host operating system specificity and difficulty of this topic, it is outside the scope of Whonix documentation. The links provided may not be the most relevant and you may have to research this topic further on your own.

This includes [https://en.wikipedia.org/wiki/BIOS BIOS] [https://wiki.gentoo.org/wiki/BIOS_Update updates], [https://en.wikipedia.org/wiki/Binary_blob non-free] drivers or [https://packages.debian.org/jessie/firmware-linux-nonfree firmware] and [https://en.wikipedia.org/wiki/Microcode processor microcode] [https://wiki.archlinux.org/index.php/Microcode updates] (on Debian systems, depending on your processor, either the [https://packages.debian.org/jessie/intel-microcode intel-microcode] or the [https://packages.debian.org/jessie/admin/amd64-microcode amd-microcode] package).

Updating firmware may or may not improve security. On one hand you may fix vulnerabilities. On the other hand, an update may introduce a new backdoor. If you know of examples of one of these situations, feel free to edit this chapter. As an end user, you unfortunately have to blindly trust the hardware producer anyway, so it might be better to get the non-Free updates.

(See also the thread on the debian-security mailing list [https://lists.debian.org/debian-security/2013/09/msg00027.html How secure is an installation with no non-free packages?])

=== Using Libre Software Hardware ===
'''This chapter contains general security advice and is unspecific to Whonix.'''

[https://en.wikipedia.org/wiki/Open-source_hardware Open-source hardware] is not affected by the non-Free firmware updates issue described above. Such hardware might be more trustworthy. (The Lemote Yeeloong Notebook maybe?)

TODO: research and expand

=== Host Operating System ===
==== Windows Hosts ====
GNU/Linux is the only serious option for having a private host operating system. You can stop reading this windows chapter here or go on reading to find out why.

If you want to just use your system without harassment (advertisements, forced updates, remotely removing applications without your consent) and surveillance then its worth investing comparably less effort in learning Linux instead of playing whack-a-mole with malware on your system by people who wrote it.

By using any version of Windows, you completely forfeit your privacy by using this OS. An anonymous browser or OS is of little help when the host is compromised and sends info about what you type or download to a third party. The trustworthiness of the host is a [[Computer_Security_Education#Malware|crucial]] part of any threat model.
Windows is also bundled with a large number of programs that 'phone home' by default.<ref>https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxyLeaks#Windows</ref> 

Additional privacy risks have been introduced with Windows 8. One example is the smartscreen filter, which reports to Microsoft what software you are running on your computer. <ref>http://log.nadim.cc/?p=78</ref> This feature includes a kill switch that can allow Microsoft (or any one with an exploit for this mechanism) to delete programs on your machine without your consent. <ref>http://www.pcmag.com/article2/0,2817,2400985,00.asp</ref>

Windows 10 takes surveillance of users to a whole new level. It runs a telemetry spyware program out-of-the-box that snoops on the users' files, what programs you are running and for how long, text input including your unique typing pattern<ref>http://www.pcworld.com/article/2974057/windows/how-to-turn-off-windows-10s-keylogger-yes-it-still-has-one.html</ref>, voice input, location info, contacts, calendar records and web browsing history, as well as automatically connecting the machines to open hotspots and showing targeted ads. There is no way to remove telemetry. Know that with non-enterprise editions you have no way to completely opt-out of the surveillance "features" of Windows 10.<ref>https://www.eff.org/deeplinks/2016/08/windows-10-microsoft-blatantly-disregards-user-choice-and-privacy-deep-dive</ref> Even if you can tweak some settings you cannot trust that they will be respected because they forced code on user's machines despite turning off windows updates many times before <ref>https://web.archive.org/web/20071011010707/http://informationweek.com/news/showArticle.jhtml?articleID=201806263</ref><ref>https://archive.fo/LffTy</ref><ref>http://arstechnica.com/information-technology/2015/07/windows-10-updates-to-be-automatic-and-mandatory-for-home-users/</ref><ref>http://voices.washingtonpost.com/securityfix/2007/09/microsofts_stealth_update_come.html </ref> <ref>http://www.zdnet.com/blog/hardware/confirmation-of-stealth-windows-update/779</ref>

Microsoft has been aggressively and deceptively forcing Windows 10 on users get people to run the spyware.They backported it to Windows 7 and 8 for those that held back so odds are you are already running it.<ref>http://www.theregister.co.uk/2015/09/01/microsoft_backports_data_slurp_to_windows_78_via_patches/</ref> Even if you "disable" windows update on windows 7 and 8 Microsoft is still able to modify the system. For more details about Windows malicious behavior check the [https://www.gnu.org/proprietary/malware-microsoft.en.html factual write-up]. 

Ignoring for a second its own built-in malware, Windows is a pile of legacy code full of security holes thats easily compromised. Before patching Windows, Microsoft is known to consult with intelligence agencies and provide information on security holes before they inform the public and fixes are produced.<ref>https://www.techdirt.com/articles/20130614/02110223467/microsoft-said-to-give-zero-day-exploits-to-us-government-before-it-patches-them.shtml</ref> Since the NSA also buys security exploits from software companies <ref>https://threatpost.com/nsa-bought-exploit-service-from-vupen-contract-shows/102314</ref> and uses them to gain unauthorized access into computer systems, <ref>http://www.theguardian.com/world/2013/oct/04/tor-attacks-nsa-users-online-anonymity</ref> it is reasonable to assume that the NSA also uses information supplied by Microsoft and that Windows users are at a higher risk.

Microsoft updates use weak cryptographic verification such as MD5 and SHA-1. The CMU Software Engineering Institute said about MD5 in 2009, it "should be considered cryptographically broken and unsuitable for further use". <ref>https://en.wikipedia.org/wiki/MD5#cite_note-11</ref> In 2012, the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature. <ref>http://arstechnica.com/security/2012/06/flame-crypto-breakthrough/</ref>

{{Libre Software Security}}

Before Windows 8, there was no central software repository comparable to for example Debian apt-get where users can download software. Most Windows users are still using Windows 7 <ref>
https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Desktop_and_laptop_computers
www.webcitation.org/6mgUAxhv9
</ref> and have their reasons for refusing to upgrade to higher Windows versions.

A common way on the Windows platform to install additional software is to search the internet for it and to install it. It is not simple to never end up on a website that bundles software downloads with adware or worse malware. Even if someone always downloads software from reputable websites, users very commonly act in very insecure ways. For example if someone downloads Mozilla Firefox from a reputable website chip.de <ref>
http://www.chip.de/downloads/Firefox-64-Bit_85086969.html
http://www.webcitation.org/6mgUDIObc
</ref> then the download would happen over an insecure plain http connection. (At time of writing, chip.de still did not enforce https for its whole website.) In that case it is trivial for internet service provider (ISP) level adversaries, WiFi providers etc. to mount [[Warning#Man-in-the-middle_attacks|man-in-the-middle attacks]] and to inject malware into the download. But even if https is used for downloads, it would only provide a very basic form of authentication.

To keep a system free of secure and free of malware it is strongly advised to [[Warning#Always_Verify_Signatures|always verify software signatures]]. This however is very difficult if not impossible for Windows users. Most of the time in the Windows world, no software signature files (OpenPGP / gpg signatures) are provided by the producers of the software. Therefore it is probably save to conclude, that almost nobody on the Windows platform is always verifying software signatures for strong authentication.

In contrast in the Linux world, for most Linux distributions, software repositories are provided. For example Debian and Debian based distributions are using apt-get which provides strong authentication because it verifies all software downloads against Debian's repository signing key. That process is default, automatic and does not require any user action. On the contrary, apt-get shows warning should the user attempt to install unsigned software. For software that is not available in the distribution's software repository, most times OpenPGP / gpg signatures are available. In the Linux world it is much more practically doable to always verify software signatures.

Windows is not a [https://en.wikipedia.org/wiki/Security-focused_operating_system security-focused operating system]. Due to Microsoft's proprietary restrictive Windows licensing policy, there are no legal software projects that are providing a security-focused remix of Windows. On the other hand, in the Linux world there are Libre Software security-focused remixes of Linux such as [https://www.qubes-os.org Qubes OS].

==== Mac OS-X Hosts ====
There are many problems with Apple's OSes including surveillance, censorship of what programs you can run and DRM crippleware to limit what you can do with your devices. See [https://www.gnu.org/proprietary/malware-apple.en.html this write-up] by the FSF for more information.<ref>https://fix-macosx.com/</ref>

==== GNU/Linux Hosts ====
A [https://www.fsf.org/about/what-is-free-software Free Software] OS that respects user freedom, is the only realistic choice when it comes to privacy and security.

Use GNU/Linux on the host and only using in-repository software is automatically gpg signed and installed from the distributor's repositories by the package manager. This is much safer than downloading stuff from the web like you have to do as a Windows user.

===== Which GNU/Linux Distribution do you recommend? =====
[http://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/ Debian GNU/Linux] is recommended. For extra security tips for download, verification and installation see [[Debian|Debian Tips]].

It used to be that any GNU/Linux distribution is a safe bet with privacy however Ubuntu's data-mining functionality makes it an unsuitable choice.<ref>https://fixubuntu.com/</ref>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
For other reasons not to use Ubuntu or Ubuntu-derived distros expand this section.
<div class="mw-collapsible-content">
Ubuntu's paltry contributions to the upstream libre projects they rely on so much is a policy not a coincidence with "It's absolutely true we have no interest in the core fundamentals of the Linux kernel, none whatsoever." - Mark Shuttleworth (Canonical founder).<ref>http://www.theinquirer.net/inquirer/news/2168086/canonical-linux-kernel</ref>

The only time they bother contributing in any major way is when forking major projects (Wayland into Mir and GNOME into Unity - both which cannot be built without major effort on any other distro but their's)<ref>https://ask.fedoraproject.org/en/question/25127/how-to-build-unity-in-fedora/</ref> in attempt to fragment the open source software stack to lock in users and put pressure on competing distros and vendors.<ref>http://mjg59.dreamwidth.org/25376.html</ref><ref>http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/Mir-vs.-Wayland-show-why-upstream-projects-matter</ref>

Their Contributor License Agreement gives them complete power over patents that cover contributed code and grants them the right to re-license this code under any license of their choice including a proprietary one.

Hostile treatment of Kubuntu spin project lead and unilaterally removing him without warning and contrary to wishes of his team members.<ref>https://kver.wordpress.com/2015/05/27/making-sense-of-the-kubuntucanonical-leadership-spat/</ref> Canonical also pilfered donation funds originally meant for desktop spin projects (Kubuntu, Lubuntu...) despite abruptly dropping funding in Kubuntu's case and Blue Systems stepped in to save the popular project.<ref>http://www.pcworld.com/article/2998647/operating-systems/kubuntus-founder-resigns-accuses-canonical-of-defrauding-donors-and-violating-copyright.html</ref><ref>https://lists.ubuntu.com/archives/kubuntu-devel/2012-February/005782.html</ref> For years Canonical has been applying an absurd intellectual property policy over packages in its repositories - claiming it owns the copyright over any binaries compiled by their servers. After the FSF stepped in and arranged a resolution over 2 years, the amended policy now states that Canonical’s IP policy can’t override packages with GPL licenses, but that now means that any package with a permissive license is now copyrighted by them.<ref>https://www.fsf.org/news/canonical-updated-licensing-terms</ref><ref>http://mjg59.dreamwidth.org/37113.html</ref> 

You cannot rely on downstream forks based on Ubuntu either - The popular Linux Mint distro was threatened to be cut off from accessing Ubuntu infrastructure unless they caved in to Canonical's binary licensing terms.<ref>https://forums.linuxmint.com/viewtopic.php?t=152450</ref> Since then they put out a version based on Debian instead. Their vague trademark and IP policy has become radioactive for downstream distros and many have made the smart choice to re-base on Debian instead of Ubuntu over the years including Kali, Whonix and others.<ref>https://mjg59.dreamwidth.org/45939.html</ref>

Canonical is getting snugly with Microsoft which should make you uncomfortable given the latter's strategy of Embrace, Extend, Extinguish of Free Software.<ref>http://www.zdnet.com/article/microsoft-and-canonical-partner-to-bring-ubuntu-to-windows-10/</ref>
</div>
</div>

There are of course other options. See [[Dev/Operating_System#Why_don.27t_you_use_.3Cyour_favorite_most_secure_operating_system.3E_for_Whonix.3F | "Why don't you use <your favorite most secure operating system> for Whonix?"]] for analysis of alternatives.

=== LAN/Router Security ===

If your Whonix-Gateway is ever compromised, it can theoretically access any computer in your local network. Therefore, if you are the administrator of your home network, it's recommended that you lock down the web interface of your home router, i.e. installing the latest firmware with latest security patches and using a secure password.

=== Host Firewall ===

Having a simple host firewall (gufw - Uncomplicated Firewall<ref>https://en.wikipedia.org/wiki/Uncomplicated_Firewall</ref> on Debian), denying all incoming ports, is recommended as well.

On the host, on Debian.

1. Install gufw.

{{CodeSelect|code=
sudo apt-get update && sudo apt-get install gufw
}}

2. Start gufw

{{CodeSelect|code=
gufw
}}

3. Press unlock. Enter password.

4. Press enable.

5. Settings: Incoming: Deny Outgoing: Allow

=== Disable TCP Timestamps ===

Adversaries can remotely access the current uptime of your machine and the host's clock-down to millisecond precision. To avoid this information being passed, it is recommended that you disable TCP timestamps on your systems. The less information attackers can get, the higher the security.

{{Anchor|Linux or Qubes}}
==== Qubes ====
If you are using Qubes R3.1 or above, then there is nothing to do since this is the Qubes R3.1 and above. <ref>
https://github.com/QubesOS/qubes-issues/issues/1344
</ref> Otherwise you should upgrade the latest stable Qubes version.

==== Linux ====
<ref>
temporary

You can skip this Temporary chapter and move on to [[#Permanently]] if you are looking for a permanent solution.

To dynamically disable TCP timestamping on Linux...

(When using Qubes: in the NetVM.)

Become root.

{{CodeSelect|code=
sudo su
}}

Disable TCP timestamping.

{{CodeSelect|code=
echo 0 > /proc/sys/net/ipv4/tcp_timestamps
}}
</ref>

Open a terminal (Konsole).

Become root.

{{CodeSelect|code=
sudo su
}}

You need to add the following line to {{Code2|/etc/sysctl.d/tcp_timestamps.conf}}:

{{CodeSelect|code=
net.ipv4.tcp_timestamps = 0
}}

To do that, you could use the following command.

{{CodeSelect|code=
echo "net.ipv4.tcp_timestamps = 0" > /etc/sysctl.d/tcp_timestamps.conf
}}

To apply the sysctl settings without reboot, run the following command.

{{CodeSelect|code=
sysctl -p
}}

Check if it's really set.

{{CodeSelect|code=
sysctl -a | grep net.ipv4.tcp_timestamps
}}

If it worked correctly, the system should respond the following:  net.ipv4.tcp_timestamps = 0

==== Windows ====

To disable TCP timestamping on Windows, run the following root command:

{{CodeSelect|code=
netsh int tcp set global timestamps=disabled
}}

Note: You must have administrator privileges.

==== Other Operating Systems ====
TODO

=== Disable ICMP Timestamps ===
==== Qubes ====
[https://github.com/QubesOS/qubes-issues/issues/1346 This will be the default in Qubes 3.1 and above.]

==== Linux ====
ICMP Timestamps need to be blocked using your firewall. This is distro dependent and varies widely as does having a firewall enabled on your specific OS - some distros don't turn it on. There are many differing ways to accomplish this via command-line, its recommended to consult your distro's documentation.

Instead for a more straightforward way, you advised to download a GUI front-end to configure your firewall and have it set to silently drop all incoming connections by default, allowing only outgoing traffic from your machine.

==== Other Operating Systems ====
TODO: document.

=== Microphone ===
Does your computer or notebook have a microphone? You could have a built-in one, but never noticed it. In most cases it is recommended to disable your microphone for security reasons. If your Whonix-Workstation ever gets compromised by malware, an adversary could eavesdrop through your microphone. It is safe to assume, that everyone has have a unencrypted phone call during ones life time and that one of them has been recorded. 

Voice and writing is very personal, unique so your non-anonymous and "anonymous" voice can be easily linked. This is called voice recognition and documented on the [[VoIP|VoIP]] wiki page in the introduction chapter. (For writing this technique is called stylometry and documented on the [[Surfing_Posting_Blogging|Surfing Posting Blogging]] wiki page.)

External microphones should be unplugged for ultimate security. If your microphone is built-in and you decide to disable your microphone, you can check the BIOS see find out if the microphone can be disabled. Removing built-in microphones may be a bit more difficult, but if you have the skills to remove it, go for it.

By default, unfortunately microphones connected to your host are available to virtual machines such as the Whonix-Workstation.

If you want to make internet calls, [[Voip|Voice over IP (VoIP]]) or use the microphone for other reasons inside Whonix-Workstation, use [[Multiple_Whonix-Workstations|Multiple Whonix-Workstations]] and use the microphone only in selected, not all Whonix-Workstations. Unplug your microphone after use.

For [[VoIP|VoIP]] purposes you may need to enable audio passthrough capability for your respective hypervisor. This page documents the steps on getting audio working on [[Download|supported platforms]].

Expand for more information:

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== KVM ====
<div class="mw-collapsible-content">
[[KVM]] by default emulates a line-in/line-out in the virtual sound device, meaning microphone passthrough to guests is enabled if its turned on for the host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== VirtualBox ====
<div class="mw-collapsible-content">
[[VirtualBox]] does not yet have a feature to disable microphones inside virtual machines.<ref>https://www.virtualbox.org/ticket/12026</ref> Mute it on your host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== Qubes ====
<div class="mw-collapsible-content">
As per the usual Qubes feature.

Qubes VM Manger -> Right click on VM -> Attach/deattach audio input device to the VM
</div>
</div>

=== Webcam ===
Does your computer or notebook have a webcam? You could have a built-in one, but just never noticed - check your computer's datasheet and operating system hardware manager.

Unless you plan to use a webcam inside Whonix-Workstation, it's recommended to disable or possibly remove your webcam. If you do plan to use a webcam you should disable and possibly unplug your webcam after use.

External webcams should be unplugged for optimal security. If your webcam is built-in and you decide to disable it, you can check the BIOS to find out if the webcam can be disabled. Removing built-in webcams may be a bit more difficult, but if you have the skills to remove it, go for it. Alternatively, cover the webcam externally.

=== Wireless Input Devices ===

Avoid using wireless keyboards and mice because most send data unencrypted. Even if this wasn't the case, there is no way to verify the robustness of the crypto involved in proprietary products. A local adversary (up to 100 meters away) can sniff keystrokes and inject their own, allowing them to take over the machine.<ref>https://www.schneier.com/blog/archives/2016/03/security_vulner_6.html</ref><ref>https://www.schneier.com/blog/archives/2016/08/security_vulner_7.html</ref>

=== Backups ===
Backups of sensitive data is important. Data where you do not posses at least two copies of the original should be considered lost. This is because one data medium might become inaccessible beyond repair any minute. So your computer would not even detect the risk anymore, so data recovery tools would not be of help either. (In such cases you might be lucky with professional data recovery companies, but they usually charge thousands or dollars.)

So this is what is recommended:

* original file on medium such as your internal harddrive.
* backup one. Example: on an external hardrive my manufactor A.
* backup two. Example: on an external harddrive by manufactor B.

For better security for other events such as fire or physical access such as robbery, backups in separate physical locations are recommended. Additionally backups at remote servers are also an option, but then you really must make sure to get the encryption right.

== Whonix information ==

=== MAC Address ===

==== Introduction ====

All network cards, both wired and wireless, have a unique identifier stored within them called their {{Code2|MAC address}}<ref>https://en.wikipedia.org/wiki/MAC_address</ref>. This is used to assign an address to your computer on the local network. This address is not traceable (as in it isn't passively sent to computers beyond your local router).<ref>Unless your computer is infected with [https://en.wikipedia.org/wiki/Malware Malware] looking for this number.</ref>

However, other computers on the local network could log it, which then would provide proof that your computer has been connected to that network. If you are using an untrusted, public network you should consider {{Code2|spoofing}}<ref>https://en.wikipedia.org/wiki/MAC_spoofing</ref> it.

''IMPORTANT NOTE:'' According to recent research<ref>[http://papers.mathyvanhoef.com/asiaccs2016.pdf '''Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms''']</ref> , MAC address spoofing is not effective against advanced tracking techniques that can still enumerate it by looking at physical characteristics of the Wi-Fi card. Manufacturers need to modify their hardware's drivers or firmware to add privacy preserving mitigations.

A workaround is to buy new "burner" WiFi USB sticks of different brands. Take care to disable your machine's native WiFi functionality in the BIOS because odds are its characteristics are already logged if you used it from any untrusted hotspot. Enable connectivity with these burner devices only from the intended public destination. At no point should you use them to connect from a network tied to you or a place you regularly visit. Use a different stick for every new location to avoid location profiling/tracking.

Dealing with MAC Addresses is one piece of the puzzle of the location tracking problem. [[Tor#Advanced_Topics|Attention]] must be given to changing the usual entry guards you connect to - for every Tor instance on your machine host (apt-transport-tor) and guest to thwart this type of attack.

==== Using your home connection ====

Changing your MAC address is not required.
However, when not using a VM your physical MAC address could be revealed in the case of a browser exploit. If you are already under suspicion, this would eventually provide proof of your identity. When the MAC address has been changed, root access is required to discover the real physical address. (Note: This is yet to be tested)

Consider:
If your home network uses a cable modem internet connection, the ISP either provides the cable modem device as part of the service or requires pre-registration of the MAC address of your self-provided cable modem in order to setup your service. If you manage to hack/change the MAC address of the modem, your service would immediately cease functioning (because the IP assignment is apportioned for, and bound to, that specific MAC address). As a result, when connecting from behind a cable modem/NAT router, spoofing the MAC address of your PC's ethernet adapter may be pointless. If you are traced, the trackable endpoint will be the MAC address of your cable modem device.

==== Using a public computer (e.g. in a library, Internet-cafe) ====

The MAC address should not be changed, as it may bring undesired admin attention to your service and/or simply forbid your access to the Internet.

==== Using a personal computer (e.g. a laptop, wherever it happens) in a public network ====

The MAC address should be changed, and /var/lib/tor/state should be removed so that a new set of guards is selected.

It is advisable that the admin not discover the use of Tor on your computer. This depends on your configuration, i.e. perhaps you are using obfsproxy or you tunnel your traffic through SSH/VPN. 

Changing the MAC address and being a Tor user, depending on your personal threat model, might be risks for re/visiting that public network. 

If you are going to reuse the same public network, you have to decide, if you are going to use the very same MAC address (and set of guards) or if you are going to create a new MAC address. If you suspect that the admin has seen you and logged the MAC, it could be unwise to change the MAC address, since this could be appear suspect. If you believe that public network is adequately public and that you have not bee observed, you might decide to use a new MAC address (popular vendor ID, random/unique second part) each time you use this network.

For more discussion on this rather difficult topic, see [[Dev/MAC]].

==== Random MAC address ====

Using a random MAC address is not recommended. While this might sufficiently confuse some adversaries, it will not defeat skilled adversaries. If you are using a random MAC address, it might happen that the vendor ID of the MAC address is non-existent. Even if it was existent, you might end up with a vendor ID, which has either never been used or not been used in decades. If you are going to spoof your MAC, you have to use a popular vendor ID.

The initial second part of the MAC address may be random/unique.

As yet, we cannot provide detailed instructions on how to create such appropriate MAC addresses. Research is still ongoing.

The reason why MAC changing is not always enabled is that it might cause problems on some networks.

==== Auto-connect issue ====

Apart from the difficulty creating an appropriate MAC address, there are also technical hurdles. All the work of creating this MAC will be futile if you boot your computer and it instantly connects to the public network and spills your MAC address. For Virtual Machine users: your host operating system most likely automatically connects (updates, perhaps time sync). For Physical Isolation users: Whonix-Gateway automatically connects to Tor after start.

Also if you use a USB WiFi device, this might also occur.

==== Changing MAC address ====
===== For Qubes Hosts =====
Qubes users do this in their NetVM. Refer to the Qubes documentation / support. See:

* https://www.qubes-os.org/doc/randomizing-your-mac-address/
* https://groups.google.com/forum/#!searchin/qubes-users/macchanger/qubes-users/gUPK-YqkC3E/WsarnjrddrsJ
* https://github.com/QubesOS/qubes-issues/issues/938

===== For Linux Hosts =====
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you are interested in this with [[Non-Qubes-Whonix]], please press on expand on the right.
<div class="mw-collapsible-content">
{{Non-Qubes-Whonix}}

'''''TODO''''': test and expand, please help!

<u>(1)</u>

'''Standard-[[Download]]-Version (Virtual Machine) users'''

Edit ''/etc/network/interfaces'' on the host.

'''[[Physical Isolation]] users'''

Edit ''/etc/network/interfaces'' on Whonix-Gateway

<u>(2)</u>

'''Get Macchanger'''
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
apt-get update && apt-get install macchanger
}}

<u>(3)</u>

'''Changing MAC'''

If instructions 1+ below don't work, you can use the following to manually change the MAC address for your device (eth0, wlan0, etc.): 
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
macchanger -a wlan0
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}
This might also work without macchanger:
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
ifconfig wlan0 hw ether 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}
Or, using iproute2 commands:
{{CodeSelect|code=
ip link set down wlan0
}}
{{CodeSelect|code=
ip link set wlan0 address 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ip link set up wlan0
}}

<u>(4)</u>

Below "''iface eth0 inet dhcp''" Add

{{CodeSelect|code=
hwaddress ether 00:00....
}}
<u>(5)</u>

To automatically randomize the MAC address on boot, if desired, add

{{CodeSelect|code=
pre-up macchanger -e eth0
}}

<u>(6)</u>

To prevent automatically bringing up new network interfaces, all that is needed is to uncomment.

{{CodeSelect|code=
auto eth0
}}

Then manually bring up with

{{CodeSelect|code=
sudo ifup eth0
}}
</div>
</div>

==== Sources ====
See footnote. <ref>
* https://tails.boum.org/contribute/design/MAC_address/
* https://tails.boum.org/todo/macchanger/
* https://tails.boum.org/blueprint/macchanger/
* Worth reading! Thanks to Tails!
* [[Dev/MAC]]
</ref>

== Known bugs ==

Check [[Download]] page for a list of known bugs.

== Most Security ==

If you want to learn all of the security concerns that Whonix considers you should, before installing Whonix, read all Whonix [[Documentation]] pages. Depending on your security needs, you might also like to consult the [[Design]] pages.

== What's next? ==
After reading and applying Computer Security Education, [[Download|download]], [[Verify_the_Whonix_images|verify]] and [[Install|install]] Whonix. Then read and apply [[Post Install Advice]].

== References ==
<references/>

= License =

<pre>Whonix Computer Security Education wiki page Copyright (C) Amnesia <amnesia at boum dot org>
Whonix Computer Security Education wiki page Copyright (C) 2012 -2014 Patrick Schleizer <adrelanos@riseup.net>

This program comes with ABSOLUTELY NO WARRANTY; for details see the wiki source code.
This is free software, and you are welcome to redistribute it
under certain conditions; see the wiki source code for details.</pre>

{{Footer}}

[[Category:Documentation]]
