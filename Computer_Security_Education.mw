<translate>

<!--
Copyright:

   Whonix Computer Security Education wiki page Copyright (C) Amnesia <amnesia at boum dot org>
   Whonix Computer Security Education wiki page Copyright (C) 2012 - 2017 Patrick Schleizer <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.

The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in Whonix virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
The Whonix Computer Security Education wiki page is forked from the Tails Enable MAC Changer page, from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/doc/advanced_topics/mac_changer.mdwn;hb=770c6f26f8dcd06452fef1c57dafb2878e0dee11> and on the Tails macchanger page from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/todo/macchanger.mdwn;hb=f27853e23d7985594d54f00f30153b6acd97312e>.
-->
{{Header}}
{{#seo:
|description=Basic Computer Security Advice. Useful Before Installing Whonix for Better Security.
|image=https://www.whonix.org/w/images/3/36/Abstract-989922-640.jpg
}}

== Introduction ==

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px|alt=Whonix first time users warning]]
| text       = 
<!--T:208-->
Before reviewing this section, be sure to also read the [[Warning]] page.
}}


'''Note:''' This wiki entry purposefully focuses on:

* General computing security information and advice.
* Host operating system security advice for [[Non-Qubes-Whonix]] users.
* Preparatory steps before installing Whonix using a Type II hypervisor like VirtualBox or KVM.


Advanced and/or [[Qubes-Whonix]] users may wish to skip this entry.

== General ==
With its default settings, Whonix may provide [[Comparison with Others#Security|better protection]] than Tor alone. Achieving greater security depends on how much time the user is willing to invest in Whonix configuration. Security also rests upon the daily practices and procedures that have been adopted by the user, see [[Documentation]].

== Safer Upgrades ==
If Whonix is already installed, <i>before</i> a Whonix upgrade is performed on the current platform it is best to shutdown any running virtual machine (VM) instances, particularly if they are attached to the internal virtual network ("Whonix" or "sys-whonix"):

* [[Qubes-Whonix]]: Before upgrading Whonix TemplateVMs, close as many open VMs as possible. Do not run VMs from different domains at the same time as upgrading. 
* [[Non-Qubes-Whonix]]: If running VM instances are not shutdown, there is a cross-contamination risk for new machines being imported into the virtualizer. For example, this is possible if a powerful adversary has taken control over those VMs currently in use. This action is not required if the user intends to create a new virtual network for the machines being imported.

== Tor Browser ==
[[Non-Qubes-Whonix]] users are recommended to always have the latest [https://www.torproject.org/projects/torbrowser.html.en Tor Browser Bundle] (TBB) release installed on the host operating system (OS). [[Qubes-Whonix]] users may also want to have TBB installed in a non-Whonix TemplateVM, like Fedora or Debian.

The TBB is useful to test whether or not:

* The user lives in a censored area.
* Tor is blocked by the Internet service Provider (ISP). 
* (Private) (obfuscated) bridges will be needed for operation of Tor Browser in Whonix, see [[Bridges]].


If TBB fails to properly connect to Tor on the host OS or from a non-Whonix AppVM in Qubes, then Whonix will similarly fail to work. Another benefit of this approach is that if Tor Browser unexpectedly stops running in Whonix, then Tor Browser can still be independently used to visit the Whonix website to seek a solution for this issue.

Note: Users should read and follow the advice in the [[Tor_Browser|Tor Browser]] entry for greater security and privacy.

== Host Security ==

=== Malware ===
{{Anchor|AntiVirus}}
{{Anchor|Malware}}
{{Malware}}

=== Firmware Trojans ===
{{Firmware Trojans}}

=== Avoid Out-of-band Management Features ===

A commonly decried hardware feature on modern platforms is the [https://software.intel.com/en-us/blogs/2011/12/14/intelr-amt-and-the-intelr-me/ Intel Management Engine (ME) and Active Management Technology (AMT)]. 

'''Out-of-band Management Design'''

Out-of-band management has been around since 1998, when it was dubbed the Intelligent Platform Management Interface (IPMI) framework. <ref>https://en.wikipedia.org/wiki/Ipmi</ref> It consists of a proprietary firmware running on the Baseboard Management Controller (BMC), <ref>https://en.wikipedia.org/wiki/Baseboard_management_controller#Baseboard_management_controller</ref> which is a dedicated micro-controller in enterprise NICs to allow complete remote control over a machine despite its power state. <ref>Facebook has put out OpenBMC, an interesting implementation that theoretically can be placed on BMCs. Problematically, most vendors (HP, Dell, IBM and so on) will not let users install firmware that is not signed by them. In addition to permission issues, without available low-level drivers and publicly available hardware that will run the firmware, the user is simply out of luck.</ref>

Modern Intel ME is a firmware running on a dedicated micro-controller in all machines, while Intel AMT is the remote access feature introduced as part of the vPro platform. Most Intel hardware produced in the last ten years supports ME and AMT "features". <ref>https://archive.org/download/IntelCentrino2WithVproTechnologyAndIntelCore2Processor/IntelCentrino2WithVproTechnologyAndIntelCore2ProcessorWithVproTechnology.pdf</ref> This includes: desktops, servers, ultrabooks, tablets, and laptops with the Intel Core vPro processor family (Intel Core i3, i5, i7, and Intel Xeon processor E3-1200 product family). <ref>https://en.wikipedia.org/wiki/Intel_Active_Management_Technology</ref> Other popular hardware manufacturers also have an analogous feature to ME. For instance, AMD's "Secure Processor" (formerly "Platform Security Processor") is based in turn on ARM TrustZone technology. <ref>www.amd.com/en-us/innovations/software-technologies/security</ref>

'''Out-of-band Management Functionality'''

The effect of this Intel technology is administrators (or hackers) can remotely monitor, maintain, update, upgrade and repair (or sabotage) computers, even while they are sleeping. This activity is distinct from software-based (in-band) management, since hardware-based management uses TCP/IP stack communication channels (bypassing any firewalls present), and the presence of an OS or locally installed management agent is not required. <ref>https://en.wikipedia.org/wiki/Intel_Active_Management_Technology#Security</ref> Unfortunately, this creates security risks (see below) because faults in the design potentially allow remote attackers to access the user's computer secretly and have full control and awareness: <ref>https://semiaccurate.com/2017/05/01/remote-security-exploit-2008-intel-platforms/</ref>

<blockquote>The problem is quite simple, the ME controls the network ports and has DMA access to the system. It can arbitrarily read and write to any memory or storage on the system, can bypass disk encryption once it is unlocked (and possibly if it has not, SemiAccurate hasnâ€™t been able to 100% verify this capability yet), read and write to the screen, and do all of this completely unlogged. Due to the network access abilities, it can also send whatever it finds out to wherever it wants, encrypted or not.</blockquote>

'''Exploitation Risk'''

On 1 May 2017, Intel confirmed and patched a Remote [https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00075&languageid=en-fr Elevation of Privilege bug (CVE-2017-5689)] in the ME technology. This means that every Intel platform with either Intel Standard Manageability, Active Management Technology, or Small Business Technology, from Nehalem in 2008 to Kaby Lake in 2017 has a remotely exploitable security hole. The risks to unpatched systems include: <ref>https://semiaccurate.com/2017/05/01/remote-security-exploit-2008-intel-platforms/</ref> <ref>This flaw is only remotely exploitable if AMT is turned on for the 1st to 7th generation processors.</ref>

* An unprivileged network attacker gaining system privileges to provisioned Intel management engines.
* An unprivileged local attacker could provision manageability features to gain unprivileged network or local system privileges.


'''General Privacy and Security Concerns'''

The concerns posed by Intel (and partially AMD) firmware is comparable to any other proprietary firmware blob running on a user's system or all its peripherals. Almost every component in a modern computer has firmware running on auxiliary processors of varying architectures, all of which have privileged machine access. The inner workings of firmware binaries can still be investigated and examined for malware via reverse engineering. <ref>http://xvilka.me/h2hc2014-reversing-firmware-radare-slides.pdf</ref> <ref>https://recon.cx/2014/slides/Recon%202014%20Skochinsky.pdf</ref>

Manufacturers are unlikely to insert a malicious backdoor intentionally into every product. The reason is if/when the backdoor was discovered, its intent would be undeniable and it would destroy the reputation of the business and severely impact revenue. Recent disclosures indicate the intelligence community instead favors targeted attacks (product interdiction and implants) to avoid detection for as long as possible. <ref>https://theintercept.com/2014/10/10/core-secrets/</ref> <ref>http://www.spiegel.de/international/world/the-nsa-uses-powerful-toolbox-in-effort-to-spy-on-global-networks-a-940969.html</ref> "Zero day" exploits are another preferred method of access by intelligence bodies. <ref>Significant and previously unknown vulnerabilities are used as a way into all systems without leaving any ''a priori'' discoverable traces of the infection until they are used. Zero days are typically used selectively to extend their shelf-life. Another similar but more common method is compromising targets via serious bugs that users often fail to patch. See [https://theintercept.com/2017/04/14/leaked-nsa-malware-threatens-windows-users-around-the-world/ here] and [https://www.eff.org/deeplinks/2016/09/nsas-failure-report-shadow-broker-vulnerabilities-underscores-need-oversight here] for examples.</ref>

The problem with out-of-band management is exemplified by the recent Intel security advisory. Exposing proprietary, hard-to-patch blobs which contain bugs to the network can lead to remote exploitation by advanced adversaries, including common criminals. The "Nobody But Us" (NOBUS) concept promoted by the intelligence agencies is simply a fallacy as evidenced by recent worldwide security incidents, including the leaking of the NSA toolkit used for hacking targets. <ref>https://www.infowars.com/shadow-brokers-release-most-damaging-nsa-hacking-tools-yet/</ref> According to prominent Intel ME researchers and reverse-engineers, only corporate AMT firmware includes the networking stack, but the safest action is for users to avoid computers with this feature entirely. <ref>https://www.coreboot.org/pipermail/coreboot/2016-December/082748.html</ref> <ref>There were some mobile variants which had access to the wireless 3G chip (for anti-theft), but this functionality has been dropped.</ref>

In principle, the concept of out-of-band management has its place in data centers, not on personal home computers. Even in the former case, without Libre software the owner of the machine(s) cannot be sure they are the only person with remote access control, in order to patch security vulnerabilities on demand. <ref>Libre software can also contain bugs, but it at least gives users the freedom to fix them.</ref> While the functionality is not secret, running a network-facing, bug-ridden proprietary OS and giving hardware privileged access to a machine has proven a [http://fish2.com/ipmi/itrain-gz.html horrible] [https://en.wikipedia.org/wiki/Intel_AMT#Known_vulnerabilities_and_exploits idea]. 

'''Hardware Recommendations'''

When buying new hardware, the user should avoid Intel hardware that has AMT. Unfortunately that rules out most modern Intel hardware produced in the last ten years. AMD chipsets do not contain fully featured out-of-band management like AMT. However, there are other comparable problems (from a freedom perspective) with hardware produced by both Intel and AMD. <ref>https://www.fsf.org/blogs/community/active-management-technology</ref>

It has been recently discovered that ME can be disabled and mostly erased with a simple python script. The functionality of systems running both Libre and proprietary BIOS firmwares were unaffected, including recent CPU generations. Only experts should attempt this procedure, since the computer may become "bricked" (unusable) if the procedure is completed incorrectly. <ref>https://phoronix.com/scan.php?page=news_item&px=Intel-ME-Cleaning</ref> <ref>https://github.com/corna/me_cleaner/wiki/me_cleaner-status</ref> <ref>https://github.com/corna/me_cleaner</ref>

'''Avoid Other Out-of-band Features'''

Users should also avoid or disable the commonly deployed PXE boot <ref>https://en.wikipedia.org/wiki/Preboot_Execution_Environment#Acceptance</ref> and Wake-on-Lan (WoL) "features". PXE is implemented either as a Network Interface Card (NIC) BIOS extension or as UEFI code in modern devices (where it can be easily disabled). <ref>https://www.techwalla.com/articles/how-to-disable-pxe</ref> <ref>https://en.wikipedia.org/wiki/Preboot_Execution_Environment#Overview</ref> On most systems, WoL hardware functionality is usually blocked by default and explicitly needs to be enabled using the system BIOS or UEFI. <ref>https://en.wikipedia.org/wiki/Wake-on-LAN#Respond_to_the_Magic_Packet_and_restore_full_power</ref> <ref>https://en.wikipedia.org/wiki/Wake-on-LAN#Hardware_implementations</ref> Though rare nowadays, also avoid machines with the LoJack anti-theft feature since it is a persistent BIOS/UEFI firmware module that shares features with trojans or rootkits. For instance, laptops can be remotely locked, have files deleted, or disclose their exact location. Further, the module "phones home" daily to a monitoring center, providing location, user, software and hardware information. <ref>https://en.wikipedia.org/wiki/LoJack_for_Laptops</ref>

=== Using a dedicated host operating system ===

[[Non-Qubes-Whonix]] users are recommended to use one dedicated host operating system just for hosting Whonix VMs. Otherwise, if the host OS which is used on a daily basis is compromised, Whonix cannot provide any additional protection since the host is part of the system's [[#Malware|trusted computing base]].

=== Using Whonix on External Media ===

At this time, Whonix does not provide a [https://github.com/Whonix/Whonix/issues/262 user-friendly USB creator] (community contributions are welcome!). However, for greater security users can install the host operating system(s) required for Whonix on a dedicated ([[Advanced_Security_Guide#Full_Disk_Encryption|encrypted]]) external disk(s) such as a USB flash drive, FireWire and eSATA devices and so on. 

Using external media reduces the risk of other operating system(s) infecting Whonix's host operating system. When Whonix disk(s) are not in use, they can either be removed or hidden. 

There are a number of online guides explaining how to [https://www.debian.org/CD/live/ install Linux on a USB]. These instructions can be followed to create a live Whonix USB, with the exception that both a supported virtualizer and Whonix must also be installed on the external media.

=== Using your own host ===

It is recommended that you only use Whonix on computers you own with no shared access. While other users may be trusted, they might not be equally knowledgeable in computer security. Only one mistake is required for your system to be compromised. 

Needless to say, hosting Whonix in the cloud, on a foreign server you do not physically control, on a VPS etc is not recommended. Information on these systems is readily accessible to their owners/regulators.

=== Using a dedicated host computer ===

For the ultimate host security option you should use a dedicated computer just for hosting Whonix. Ideally one, that you never used for anything else before.<ref>To reduce risks of eventual previous hardware compromised.</ref>

=== Firmware Updates ===
'''This chapter contains general security advice and is unspecific to Whonix.'''

Due to the hardware and host operating system specificity and difficulty of this topic, it is outside the scope of Whonix documentation. The links provided may not be the most relevant and you may have to research this topic further on your own.

This includes [https://en.wikipedia.org/wiki/BIOS BIOS] [https://wiki.gentoo.org/wiki/BIOS_Update updates], [https://en.wikipedia.org/wiki/Binary_blob non-free] drivers or [https://packages.debian.org/jessie/firmware-linux-nonfree firmware] and [https://en.wikipedia.org/wiki/Microcode processor microcode] [https://wiki.archlinux.org/index.php/Microcode updates] (on Debian systems, depending on your processor, either the [https://packages.debian.org/jessie/intel-microcode intel-microcode] or the [https://packages.debian.org/jessie/admin/amd64-microcode amd-microcode] package).

Updating firmware may or may not improve security. On one hand you may fix vulnerabilities. On the other hand, an update may introduce a new backdoor. If you know of examples of one of these situations, feel free to edit this chapter. As an end user, you unfortunately have to blindly trust the hardware producer anyway, so it might be better to get the non-Free updates.

(See also the thread on the debian-security mailing list [https://lists.debian.org/debian-security/2013/09/msg00027.html How secure is an installation with no non-free packages?])

=== Using Libre Software Hardware ===
'''This chapter contains general security advice and is unspecific to Whonix.'''

[https://en.wikipedia.org/wiki/Open-source_hardware Open-source hardware] is not affected by the non-Free firmware updates issue described above. Such hardware might be more trustworthy. (The Lemote Yeeloong Notebook maybe?)

TODO: research and expand

=== Host Operating System ===
==== Windows Hosts ====
GNU/Linux is the only serious option for having a private host operating system. You can stop reading this windows chapter here or go on reading to find out why.

If you want to just use your system without harassment (advertisements, forced updates, remotely removing applications without your consent) and surveillance then it is worth investing comparably less effort in learning Linux instead of playing whack-a-mole with malware on your system by people who wrote it.

By using any version of Windows, you completely forfeit your privacy by using this OS. An anonymous browser or OS is of little help when the host is compromised and sends info about what you type or download to a third party. The trustworthiness of the host is a [[Computer_Security_Education#Malware|crucial]] part of any threat model.
Windows is also bundled with a large number of programs that 'phone home' by default.<ref>https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxyLeaks#Windows</ref> 

Additional privacy risks have been introduced with Windows 8. One example is the smartscreen filter, which reports to Microsoft what software you are running on your computer. <ref>http://log.nadim.cc/?p=78</ref> This feature includes a kill switch that can allow Microsoft (or any one with an exploit for this mechanism) to delete programs on your machine without your consent. <ref>http://www.pcmag.com/article2/0,2817,2400985,00.asp</ref>

Windows 10 takes surveillance of users to a whole new level. It runs a telemetry spyware program out-of-the-box that snoops on the users' files, what programs you are running and for how long, text input including your unique typing pattern<ref>http://www.pcworld.com/article/2974057/windows/how-to-turn-off-windows-10s-keylogger-yes-it-still-has-one.html</ref>, voice input, location info, contacts, calendar records and web browsing history, as well as automatically connecting the machines to open hotspots and showing targeted ads. There is no way to remove telemetry. Know that with non-enterprise editions you have no way to completely opt-out of the surveillance "features" of Windows 10.<ref>https://www.eff.org/deeplinks/2016/08/windows-10-microsoft-blatantly-disregards-user-choice-and-privacy-deep-dive</ref> Even if you can tweak some settings you cannot trust that they will be respected because they forced code on user's machines despite turning off windows updates many times before <ref>https://web.archive.org/web/20071011010707/http://informationweek.com/news/showArticle.jhtml?articleID=201806263</ref><ref>https://archive.fo/LffTy</ref><ref>http://arstechnica.com/information-technology/2015/07/windows-10-updates-to-be-automatic-and-mandatory-for-home-users/</ref><ref>http://voices.washingtonpost.com/securityfix/2007/09/microsofts_stealth_update_come.html </ref> <ref>http://www.zdnet.com/blog/hardware/confirmation-of-stealth-windows-update/779</ref>

Microsoft has been aggressively and deceptively forcing Windows 10 on users to get people to run the spyware. They backported it to Windows 7 and 8 for those that held back so odds are you are already running it.<ref>http://www.theregister.co.uk/2015/09/01/microsoft_backports_data_slurp_to_windows_78_via_patches/</ref> Even if you "disable" windows update on windows 7 and 8 Microsoft is still able to modify the system. For more details about Windows malicious behavior check the [https://www.gnu.org/proprietary/malware-microsoft.en.html factual write-up]. 

Ignoring for a second its own built-in malware, Windows is a pile of legacy code full of security holes that is easily compromised. Before patching Windows, Microsoft is known to consult with intelligence agencies and provide information on security holes before they inform the public and fixes are produced.<ref>https://www.techdirt.com/articles/20130614/02110223467/microsoft-said-to-give-zero-day-exploits-to-us-government-before-it-patches-them.shtml</ref> Since the NSA also buys security exploits from software companies <ref>https://threatpost.com/nsa-bought-exploit-service-from-vupen-contract-shows/102314</ref> and uses them to gain unauthorized access into computer systems, <ref>http://www.theguardian.com/world/2013/oct/04/tor-attacks-nsa-users-online-anonymity</ref> it is reasonable to assume that the NSA also uses information supplied by Microsoft and that Windows users are at a higher risk.

Microsoft updates use weak cryptographic verification such as MD5 and SHA-1. The CMU Software Engineering Institute said about MD5 in 2009, it "should be considered cryptographically broken and unsuitable for further use". <ref>https://en.wikipedia.org/wiki/MD5#cite_note-11</ref> In 2012, the Flame malware exploited the weaknesses in MD5 to fake a Microsoft digital signature. <ref>http://arstechnica.com/security/2012/06/flame-crypto-breakthrough/</ref>

{{Libre Software Security}}


Before Windows 8, there was no central software repository comparable to for example Debian apt-get where users can download software. Most Windows users are still using Windows 7 <ref>
https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Desktop_and_laptop_computers
www.webcitation.org/6mgUAxhv9
</ref> and have their reasons for refusing to upgrade to higher Windows versions.

A common way on the Windows platform to install additional software is to search the internet for it and to install it. It is not simple to never end up on a website that bundles software downloads with adware or worse malware. Even if someone always downloads software from reputable websites, users very commonly act in very insecure ways. For example if someone downloads Mozilla Firefox from a reputable website chip.de <ref>
http://www.chip.de/downloads/Firefox-64-Bit_85086969.html
http://www.webcitation.org/6mgUDIObc
</ref> then the download would happen over an insecure plain http connection. (At time of writing, chip.de still did not enforce https for its whole website.) In that case it is trivial for internet service provider (ISP) level adversaries, WiFi providers etc. to mount [[Warning#Man-in-the-middle_attacks|man-in-the-middle attacks]] and to inject malware into the download. But even if https is used for downloads, it would only provide a very basic form of authentication.

To keep a system secure and free of malware it is strongly advised to [[Warning#Always_Verify_Signatures|always verify software signatures]]. This however is very difficult if not impossible for Windows users. Most of the time in the Windows world, no software signature files (OpenPGP / gpg signatures) are provided by the producers of the software. Therefore it is probably safe to conclude that almost nobody on the Windows platform is always verifying software signatures for strong authentication.

In contrast in the Linux world, for most Linux distributions, software repositories are provided. For example Debian and Debian based distributions are using apt-get which provides strong authentication because it verifies all software downloads against Debian's repository signing key. That process is default, automatic and does not require any user action. On the contrary, apt-get shows warning should the user attempt to install unsigned software. For software that is not available in the distribution's software repository, most times OpenPGP / gpg signatures are available. In the Linux world it is much more practically doable to always verify software signatures.

Windows is not a [https://en.wikipedia.org/wiki/Security-focused_operating_system security-focused operating system]. Due to Microsoft's proprietary restrictive Windows licensing policy, there are no legal software projects that are providing a security-focused remix of Windows. On the other hand, in the Linux world there are Libre Software security-focused remixes of Linux such as [https://www.qubes-os.org Qubes OS].

==== Mac OS-X Hosts ====
There are many problems with Apple's OSes including surveillance, censorship of what programs you can run and DRM crippleware to limit what you can do with your devices. See [https://www.gnu.org/proprietary/malware-apple.en.html this write-up] by the FSF for more information.<ref>https://fix-macosx.com/</ref>

==== GNU/Linux Hosts ====
A [https://www.fsf.org/about/what-is-free-software Free Software] OS that respects user freedom, is the only realistic choice when it comes to privacy and security.

Use GNU/Linux on the host and only use in-repository software that is automatically gpg signed and installed from the distributor's repositories by the package manager. This is much safer than downloading stuff from the web like you have to do as a Windows user.

===== Which GNU/Linux Distribution do you recommend? =====
[http://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/ Debian GNU/Linux] is recommended. For extra security tips for download, verification and installation see [[Debian|Debian Tips]].

It used to be that any GNU/Linux distribution was a safe bet with privacy however Ubuntu's data-mining functionality makes it an unsuitable choice.<ref>https://fixubuntu.com/</ref>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
For other reasons not to use Ubuntu or Ubuntu-derived distros expand this section.
<div class="mw-collapsible-content">
Ubuntu's paltry contributions to the upstream libre projects they rely on so much is a policy not a coincidence with "It is absolutely true we have no interest in the core fundamentals of the Linux kernel, none whatsoever." - Mark Shuttleworth (Canonical founder).<ref>http://www.theinquirer.net/inquirer/news/2168086/canonical-linux-kernel</ref>

The only time they bother contributing in any major way is when forking major projects (Wayland into Mir and GNOME into Unity - both which cannot be built without major effort on any other distro but their's)<ref>https://ask.fedoraproject.org/en/question/25127/how-to-build-unity-in-fedora/</ref> in attempt to fragment the open source software stack to lock in users and put pressure on competing distros and vendors.<ref>http://mjg59.dreamwidth.org/25376.html</ref><ref>http://www.linux-magazine.com/Online/Blogs/Off-the-Beat-Bruce-Byfield-s-Blog/Mir-vs.-Wayland-show-why-upstream-projects-matter</ref>

Their Contributor License Agreement gives them complete power over patents that cover contributed code and grants them the right to re-license this code under any license of their choice including a proprietary one.

Hostile treatment of Kubuntu spin project lead and unilaterally removing him without warning and contrary to wishes of his team members.<ref>https://kver.wordpress.com/2015/05/27/making-sense-of-the-kubuntucanonical-leadership-spat/</ref> Canonical also pilfered donation funds originally meant for desktop spin projects (Kubuntu, Lubuntu...) despite abruptly dropping funding in Kubuntu's case and Blue Systems stepped in to save the popular project.<ref>http://www.pcworld.com/article/2998647/operating-systems/kubuntus-founder-resigns-accuses-canonical-of-defrauding-donors-and-violating-copyright.html</ref><ref>https://lists.ubuntu.com/archives/kubuntu-devel/2012-February/005782.html</ref> For years Canonical has been applying an absurd intellectual property policy over packages in its repositories - claiming it owns the copyright over any binaries compiled by their servers. After the FSF stepped in and arranged a resolution over 2 years, the amended policy now states that Canonicalâ€™s IP policy canâ€™t override packages with GPL licenses, but that now means that any package with a permissive license is now copyrighted by them.<ref>https://www.fsf.org/news/canonical-updated-licensing-terms</ref><ref>http://mjg59.dreamwidth.org/37113.html</ref> 

You cannot rely on downstream forks based on Ubuntu either - The popular Linux Mint distro was threatened to be cut off from accessing Ubuntu infrastructure unless they caved in to Canonical's binary licensing terms.<ref>https://forums.linuxmint.com/viewtopic.php?t=152450</ref> Since then they put out a version based on Debian instead. Their vague trademark and IP policy has become radioactive for downstream distros and many have made the smart choice to re-base on Debian instead of Ubuntu over the years including Kali, Whonix and others.<ref>https://mjg59.dreamwidth.org/45939.html</ref>

Canonical is getting snugly with Microsoft which should make you uncomfortable given the latter's strategy of Embrace, Extend, Extinguish of Free Software.<ref>http://www.zdnet.com/article/microsoft-and-canonical-partner-to-bring-ubuntu-to-windows-10/</ref>
</div>
</div>

There are of course other options. See [[Dev/Operating_System#Why_don.27t_you_use_.3Cyour_favorite_most_secure_operating_system.3E_for_Whonix.3F | "Why don't you use <your favorite most secure operating system> for Whonix?"]] for analysis of alternatives.

=== LAN/Router Security ===

If your Whonix-Gateway is ever compromised, it can theoretically access any computer in your local network. Therefore, if you are the administrator of your home network, it is recommended that you lock down the web interface of your home router, i.e. installing the latest firmware with latest security patches and using a secure password.

=== Host Firewall ===

Having a simple host firewall (gufw - Uncomplicated Firewall<ref>https://en.wikipedia.org/wiki/Uncomplicated_Firewall</ref> on Debian), denying all incoming ports, is recommended as well.

On the host, on Debian.

1. Install gufw.

{{CodeSelect|code=
sudo apt-get update && sudo apt-get install gufw
}}

2. Start gufw

{{CodeSelect|code=
gufw
}}

3. Press unlock. Enter password.

4. Press enable.

5. Settings: Incoming: Deny Outgoing: Allow

=== Disable TCP Timestamps ===

Adversaries can remotely access the current uptime of your machine and the host's clock-down to millisecond precision. To avoid this information being passed, it is recommended that you disable TCP timestamps on your systems. The less information attackers can get, the higher the security.

{{Anchor|Linux or Qubes}}
==== Qubes ====
This is the default in Qubes R3.1 and above. <ref>https://github.com/QubesOS/qubes-issues/issues/1344</ref>

==== Linux ====
<ref>
temporary

You can skip this Temporary chapter and move on to [[#Permanently]] if you are looking for a permanent solution.

To dynamically disable TCP timestamping on Linux...

(When using Qubes: in the NetVM.)

Become root.

{{CodeSelect|code=
sudo su
}}

Disable TCP timestamping.

{{CodeSelect|code=
echo 0 > /proc/sys/net/ipv4/tcp_timestamps
}}
</ref>

Open a terminal (Konsole).

Become root.

{{CodeSelect|code=
sudo su
}}

You need to add the following line to {{Code2|/etc/sysctl.d/tcp_timestamps.conf}}:

{{CodeSelect|code=
net.ipv4.tcp_timestamps = 0
}}

To do that, you could use the following command.

{{CodeSelect|code=
echo "net.ipv4.tcp_timestamps = 0" > /etc/sysctl.d/tcp_timestamps.conf
}}

To apply the sysctl settings without reboot, run the following command.

{{CodeSelect|code=
sysctl -p
}}

Check if it is really set.

{{CodeSelect|code=
sysctl -a | grep net.ipv4.tcp_timestamps
}}

If it worked correctly, the system should respond the following:  net.ipv4.tcp_timestamps = 0

==== Windows ====

To disable TCP timestamping on Windows, run the following root command:

{{CodeSelect|code=
netsh int tcp set global timestamps=disabled
}}

Note: You must have administrator privileges.

==== Other Operating Systems ====
TODO

=== Disable ICMP Timestamps ===
==== Qubes ====
This is the default in Qubes R3.1 and above. <ref>https://github.com/QubesOS/qubes-issues/issues/1346</ref>

==== Linux ====
ICMP Timestamps need to be blocked using your firewall. This is distro dependent and varies widely as does having a firewall enabled on your specific OS - some distros don't turn it on. There are many differing ways to accomplish this via command-line, its recommended to consult your distro's documentation.

Instead for a more straightforward way, you are advised to download a GUI front-end to configure your firewall and have it set to silently drop all incoming connections by default, allowing only outgoing traffic from your machine.

==== Other Operating Systems ====
TODO: document.

=== Microphone ===
Does your computer or notebook have a microphone? You could have a built-in one, but never noticed it. In most cases it is recommended to disable your microphone for security reasons. If your Whonix-Workstation ever gets compromised by malware, an adversary could eavesdrop through your microphone. It is safe to assume that everyone has had an unencrypted phone call during their life time and that one of them has been recorded. 

Voice and writing is very personal, unique so your non-anonymous and "anonymous" voice can be easily linked. This is called voice recognition and documented on the [[VoIP|VoIP]] wiki page in the introduction chapter. (For writing this technique is called stylometry and documented on the [[Surfing_Posting_Blogging|Surfing Posting Blogging]] wiki page.)

External microphones should be unplugged for ultimate security. If your microphone is built-in and you decide to disable your microphone, you can check the BIOS to find out if the microphone can be disabled. Removing built-in microphones may be a bit more difficult, but if you have the skills to remove it, go for it.

By default, unfortunately microphones connected to your host are available to virtual machines such as the Whonix-Workstation.

If you want to make internet calls, [[Voip|Voice over IP (VoIP]]) or use the microphone for other reasons inside Whonix-Workstation, use [[Multiple_Whonix-Workstations|Multiple Whonix-Workstations]] and use the microphone only in selected, not all Whonix-Workstations. Unplug your microphone after use.

For [[VoIP|VoIP]] purposes you may need to enable audio passthrough capability for your respective hypervisor. This page documents the steps on getting audio working on [[Download|supported platforms]].

Expand for more information:

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== KVM ====
<div class="mw-collapsible-content">
[[KVM]] by default emulates a line-in/line-out in the virtual sound device, meaning microphone passthrough to guests is enabled if it is turned on for the host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== VirtualBox ====
<div class="mw-collapsible-content">
[[VirtualBox]] does not yet have a feature to disable microphones inside virtual machines.<ref>https://www.virtualbox.org/ticket/12026</ref> Mute it on your host.
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
==== Qubes ====
<div class="mw-collapsible-content">
As per the usual Qubes feature.

Qubes VM Manger -> Right click on VM -> Attach/deattach audio input device to the VM
</div>
</div>

=== Webcam ===
Does your computer or notebook have a webcam? You could have a built-in one, but just never noticed - check your computer's datasheet and operating system hardware manager.

Unless you plan to use a webcam inside Whonix-Workstation, it is recommended to disable or possibly remove your webcam. If you do plan to use a webcam you should disable and possibly unplug your webcam after use.

External webcams should be unplugged for optimal security. If your webcam is built-in and you decide to disable it, you can check the BIOS to find out if the webcam can be disabled. Removing built-in webcams may be a bit more difficult, but if you have the skills to remove it, go for it. Alternatively, cover the webcam externally.

=== Wireless Input Devices ===

Avoid using wireless keyboards and mice because most send data unencrypted. Even if this wasn't the case, there is no way to verify the robustness of the crypto involved in proprietary products. A local adversary (up to 100 meters away) can sniff keystrokes and inject their own, allowing them to take over the machine.<ref>https://www.schneier.com/blog/archives/2016/03/security_vulner_6.html</ref><ref>https://www.schneier.com/blog/archives/2016/08/security_vulner_7.html</ref>

=== Backups ===
Backups of sensitive data is important. Data where you do not possess at least two copies of the original should be considered lost. This is because one data medium might become inaccessible beyond repair any minute. So your computer would not even detect the risk anymore, so data recovery tools would not be of help either. (In such cases you might be lucky with professional data recovery companies, but they usually charge thousands of dollars.)

So this is what is recommended:

* original file on medium such as your internal hard drive.
* backup one. Example: on an external hard drive from manufacturer A.
* backup two. Example: on an external hard drive from manufacturer B.

For better security for other events such as fire or physical access such as robbery, backups in separate physical locations are recommended. Additionally backups at remote servers are also an option, but then you really must make sure to get the encryption right.

== Whonix information ==

=== MAC Address ===

==== Introduction ====

All network cards, both wired and wireless, have a unique identifier stored within them called their {{Code2|MAC address}}<ref>https://en.wikipedia.org/wiki/MAC_address</ref>. This is used to assign an address to your computer on the local network. This address is not traceable (as in it is not passively sent to computers beyond your local router).<ref>Unless your computer is infected with [https://en.wikipedia.org/wiki/Malware Malware] looking for this number.</ref>

However, other computers on the local network could log it, which then would provide proof that your computer has been connected to that network. If you are using an untrusted, public network you should consider {{Code2|spoofing}}<ref>https://en.wikipedia.org/wiki/MAC_spoofing</ref> it.

''IMPORTANT NOTE:'' According to recent research<ref>[http://papers.mathyvanhoef.com/asiaccs2016.pdf '''Why MAC Address Randomization is not Enough: An Analysis of Wi-Fi Network Discovery Mechanisms''']</ref>, MAC address spoofing is not effective against advanced tracking techniques that can still enumerate it by looking at physical characteristics of the Wi-Fi card. Manufacturers need to modify their hardware's drivers or firmware to add privacy preserving mitigations.

A workaround is to buy new "burner" WiFi USB sticks of different brands. Take care to disable your machine's native WiFi functionality in the BIOS because odds are its characteristics are already logged if you used it from any untrusted hotspot. Enable connectivity with these burner devices only from the intended public destination. At no point should you use them to connect from a network tied to you or a place you regularly visit. Use a different stick for every new location to avoid location profiling/tracking.

Dealing with MAC Addresses is one piece of the puzzle of the location tracking problem. [[Tor#Advanced_Topics|Attention]] must be given to changing the usual entry guards you connect to - for every Tor instance on your machine host (apt-transport-tor) and guest to thwart this type of attack.

An authentication technique (which can also track user devices as a side-effect) can fingerprint devices by observing inter-packet timings on a LAN's wire-segment which are the result of how various components in a machine create packets.<ref>[http://www2.ece.gatech.edu/cap/papers/1569740227-3.pdf '''A Passive Technique for Fingerprinting Wireless Devices with Wired-side Observations''']</ref> Fortunately this cannot be used to identify devices across the internet.<ref>The primary weakness of this technique, as with most works that rely on fine-grained packet timing, is that the timing is lost as a result of buffering in switches and routers. Therefore, this technique is not suited for identification across the Internet. Rather, it is perfectly suitable for the significant challenge of local network access control (and other local network activities, e.g., counterfeit detection).</ref> This can be defeated by inducing random delays in a machine's packet stream. Since we don't care about impersonating other devices on the LAN, it doesn't matter that such an authentication system would view machines as "unknown". <ref>Figure 7(a) shows attackers that can vary their packet sizes, change their data rate, tunnel their packets through another protocol. Figure 7(b) presents attackers that can introduce constant/random delays to packet stream and load the CPU with intensive applications to over shadow normal behavior. Figure 7(c) shows an attacker that can modify/change its operating system. GTID detects these attacks and classifies all of these devices that generated attack traffic from previously seen devices as unknown.</ref> Note that spectrum analyzers are mentioned as a way to fingerprint the unique EM characteristics of a WiFi card. The disposable USB WiFi workaround would mitigate this. <ref>There have also been physical layer approaches to fingerprint wireless devices. Radio frequency (RF) emitter fingerprinting uses the distinct electromagnetic (EM) characteristics that arise from differences in circuit topology and manufacturing tolerances. This approach has a history of use in cellular systems and has more recently been applied to Wi-Fi [5] and Bluetooth [6] emitters. The EM properties fingerprint the unique transmitter of a signal and differ from emitter to emitter. This technique requires expensive signal analyzer hardware to be within RF range of the target.</ref>

==== Using your home connection ====

Changing your MAC address is not required.
However, when not using a VM your physical MAC address could be revealed in the case of a browser exploit. If you are already under suspicion, this would eventually provide proof of your identity. When the MAC address has been changed, root access is required to discover the real physical address. (Note: This is yet to be tested)

Consider:
If your home network uses a cable modem internet connection, the ISP either provides the cable modem device as part of the service or requires pre-registration of the MAC address of your self-provided cable modem in order to setup your service. If you manage to hack/change the MAC address of the modem, your service would immediately cease functioning (because the IP assignment is apportioned for, and bound to, that specific MAC address). As a result, when connecting from behind a cable modem/NAT router, spoofing the MAC address of your PC's ethernet adapter may be pointless. If you are traced, the trackable endpoint will be the MAC address of your cable modem device.

==== Using a public computer (e.g. in a library, Internet-cafe) ====

The MAC address should not be changed, as it may bring undesired admin attention to your service and/or simply forbid your access to the Internet.

==== Using a personal computer (e.g. a laptop, wherever it happens) in a public network ====

The MAC address should be changed, and /var/lib/tor/state should be removed so that a new set of guards is selected.

It is advisable that the admin not discover the use of Tor on your computer. This depends on your configuration, i.e. perhaps you are using obfsproxy or you tunnel your traffic through SSH/VPN. 

Changing the MAC address and being a Tor user, depending on your personal threat model, might be risks for re/visiting that public network. 

If you are going to reuse the same public network, you have to decide if you are going to use the very same MAC address (and set of guards) or if you are going to create a new MAC address. If you suspect that the admin has seen you and logged the MAC, it could be unwise to change the MAC address, since this could appear suspicious. If you believe that public network is adequately public and that you have not been observed, you might decide to use a new MAC address (popular vendor ID, random/unique second part) each time you use this network.

For more discussion on this rather difficult topic, see [[Dev/MAC]].

==== Random MAC address ====

Using a random MAC address is not recommended. While this might sufficiently confuse some adversaries, it will not defeat skilled adversaries. If you are using a random MAC address, it might happen that the vendor ID of the MAC address is non-existent. Even if it was existent, you might end up with a vendor ID, which has either never been used or not been used in decades. If you are going to spoof your MAC, you have to use a popular vendor ID.

The initial second part of the MAC address may be random/unique.

As yet, we cannot provide detailed instructions on how to create such appropriate MAC addresses. Research is still ongoing.

The reason why MAC changing is not always enabled is that it might cause problems on some networks.

==== Auto-connect issue ====

Apart from the difficulty creating an appropriate MAC address, there are also technical hurdles. All the work of creating this MAC will be futile if you boot your computer and it instantly connects to the public network and spills your MAC address. For Virtual Machine users: your host operating system most likely automatically connects (updates, perhaps time sync). For Physical Isolation users: Whonix-Gateway automatically connects to Tor after start.

Also if you use a USB WiFi device, this might also occur.

==== Changing MAC address ====
===== For Qubes Hosts =====
Qubes users do this in their NetVM. Refer to the Qubes documentation / support. See:

* https://www.qubes-os.org/doc/randomizing-your-mac-address/
* https://groups.google.com/forum/#!searchin/qubes-users/macchanger/qubes-users/gUPK-YqkC3E/WsarnjrddrsJ
* https://github.com/QubesOS/qubes-issues/issues/938

===== For Linux Hosts =====
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you are interested in this with [[Non-Qubes-Whonix]], please press on expand on the right.
<div class="mw-collapsible-content">
{{Non-Qubes-Whonix}}

'''''TODO''''': test and expand, please help!

<u>(1)</u>

'''Standard-[[Download]]-Version (Virtual Machine) users'''

Edit ''/etc/network/interfaces'' on the host.

'''[[Physical Isolation]] users'''

Edit ''/etc/network/interfaces'' on Whonix-Gateway

<u>(2)</u>

'''Get Macchanger'''
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
apt-get update && apt-get install macchanger
}}

<u>(3)</u>

'''Changing MAC'''

If instructions 1+ below don't work, you can use the following to manually change the MAC address for your device (eth0, wlan0, etc.): 
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
macchanger -a wlan0
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}
This might also work without macchanger:
{{CodeSelect|code=
su
}}
{{CodeSelect|code=
ifconfig wlan0 down
}}
{{CodeSelect|code=
ifconfig wlan0 hw ether 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ifconfig wlan0 up
}}
Or, using iproute2 commands:
{{CodeSelect|code=
ip link set down wlan0
}}
{{CodeSelect|code=
ip link set wlan0 address 00:AA:BB:CC:DD:EE
}}
{{CodeSelect|code=
ip link set up wlan0
}}

<u>(4)</u>

Below "''iface eth0 inet dhcp''" Add

{{CodeSelect|code=
hwaddress ether 00:00....
}}
<u>(5)</u>

To automatically randomize the MAC address on boot, if desired, add

{{CodeSelect|code=
pre-up macchanger -e eth0
}}

<u>(6)</u>

To prevent automatically bringing up new network interfaces, all that is needed is to uncomment.

{{CodeSelect|code=
auto eth0
}}

Then manually bring up with

{{CodeSelect|code=
sudo ifup eth0
}}
</div>
</div>

==== Sources ====
See footnote. <ref>
* https://tails.boum.org/contribute/design/MAC_address/
* https://tails.boum.org/todo/macchanger/
* https://tails.boum.org/blueprint/macchanger/
* Worth reading! Thanks to Tails!
* [[Dev/MAC]]
</ref>

== Known bugs ==

Check [[Download]] page for a list of known bugs.

== Most Security ==

If you want to learn all of the security concerns that Whonix considers you should, before installing Whonix, read all Whonix [[Documentation]] pages. Depending on your security needs, you might also like to consult the [[Design]] pages.

== What's next? ==
After reading and applying Computer Security Education, [[Download|download]], [[Verify_the_Whonix_images|verify]] and [[Install|install]] Whonix. Then read and apply [[Post Install Advice]].

== References ==
<references/>

= License =
{{License_Amnesia|{{FULLPAGENAME}}}}

{{Footer}}

[[Category:Documentation]]
</translate>
