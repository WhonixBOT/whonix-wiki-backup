<!--
Copyright:

   Whonix Trust wiki page Copyright (C) Amnesia <amnesia at boum dot org>
   Whonix Trust wiki page Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.

The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in Whonix virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
The Introduction chapter of this website is forked from the Tails trust page, from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/doc/about/trust.mdwn;hb=d249db72228b498407d85fb762b49ec155871ded>.
-->
{{Header}}
{{#seo:
|description=Is Whonix trustworthy? Is there a backdoor in Whonix? How does Whonix protect itself from backdoors?
|image=https://www.whonix.org/w/images/4/4d/Candle-335965-640.jpg
}}
= Introduction =

Trust is a very problematic issue. This is the essence of why security is difficult in every field, including general computing and Internet communication. A skeptical user might ask themselves the following questions before relying upon Whonix for sensitive activities on a daily basis:

* Can Whonix and its developers be trusted?
* Are backdoors present in Whonix that can take control over a computer or exfiltrate data?
* Does Whonix generate compromised encryption keys to enable government spying?
* How trustworthy and sincere are the stated anonymity goals of the Whonix project?


Opinions will vary widely, but the reasoning process used to reach the conclusion should be closely examined. It is important that both trust and distrust are based on facts, and not gut feelings, instincts, paranoid conceptions, unfounded hearsay or the words of others. 

It is unsurprising that the Whonix project and other anonymity platforms / tools claim to be honest, but written assurances are worthless. For an informed decision, it is worth looking at the bigger Whonix picture: core components, affiliations, project track record,  and how reasonable trust might be established.

== Free Software and Public Scrutiny ==

Whonix and other free software makes it possible to check the source code to determine how a software distribution functions and what it consists of. Suitably skilled individuals can thoroughly audit the code to search for the presence of any malicious code, like a backdoor. In addition, software can be manually built from source code and the result compared against any versions that are pre-built and already being distributed, like the Whonix ova images that can be [[Download|downloaded]] from {{code|whonix.org}}. This comparison can determine whether any malicious changes were made, or if the distributed version was actually built with the source code.

Naturally most people do not have the requisite knowledge, skills or time to properly audit software. However, the public scrutiny of popular, open source software implies a certain degree of trustworthiness. The axiom attributed to Linus Torvalds <ref>Creator of the Linux kernel.</ref> -- "Given enough eyeballs, all bugs are shallow" -- is a reasonable assumption in user communities that are large, vibrant, and focused on fixing security vulnerabilities quickly. <ref>https://www.govtechworks.com/open-source-is-safe-but-not-risk-free/</ref> The free software community has a strong tradition of publicly reporting and resolving serious issues, and a large pool of developers and beta testers can help to identify and remedy problems. <ref>On the flip-side, there is no guarantee that just because software is open to review, that sane reviews will actually be performed. Further, people developing and reviewing software must know the principles of secure coding.</ref>

== Trusting Debian GNU/Linux ==

Nearly all the software shipped in Whonix comes from the [http://www.debian.org/ Debian GNU/Linux distribution]. Debian's packages are heavily scrutinized as it is one of the [https://distrowatch.com/table.php?distribution=debian largest Linux distributions] at present. Debian is also one of the most popular distributions for derivative platforms; [https://distrowatch.com/table.php?distribution=ubuntu Ubuntu Linux] is a Debian derivative, and the same applies to all Ubuntu derivatives such as [https://distrowatch.com/table.php?distribution=mint Linux Mint]. 

The sheer number using Debian's software packages and the large developer pool inspecting software integrity are significant factors in Debian's favor. Debian regularly identifies and patches [https://www.debian.org/security/ serious security issues] like the infamous SSH PRNG vulnerability <ref>https://lists.debian.org/debian-security-announce/2008/msg00152.html ([http://www.webcitation.org/6EnxsukxM w])</ref>, but backdoors or other purposeful security holes have never been discovered to date. Debian's focus on security is further evidenced by their Security Audit team which constantly searches for new or unfixed security issues. <ref>Debian also participates in security standardization efforts and related overarching projects.</ref>

== Trusting Tor ==

Whonix anonymity is based on Tor, which is developed by [https://www.torproject.org/ The Tor Project]. Tor is a [[Why_does_Whonix_use_Tor|mature anonymity network with a substantial user base]], and it has developed a solid reputation after more than 15 years of development. Tor's distributed trust model makes it difficult for any single entity to capture a user's traffic and identify them on a consistent basis.

Tor and its general development are subject to heavy public scrutiny by academics, security professionals and a host of developers. <ref>And undoubtedly advanced adversaries.</ref> For example, there is a body of Tor research related to potential attack vectors on onion routing and the adequacy of current defenses, and the source code has undergone several external audits. Like any software project, numerous security issues have been identified and resolved over the years, but a purposeful backdoor has never been discovered. <ref>That said, a skilled, malicious coder is far more likely to introduce subtle errors that open non-obvious attack vectors.</ref> Theories about deliberate backdoors in Tor are considered highly speculative and lacking any credible basis.

== Trusting Whonix ==

In one sense, Whonix is the simple union of Debian and Tor and a mechanism to glue them together. If a user already  trusts Debian and The Tor Project, then a method for assessing Whonix trustworthiness is also necessary. 

The Whonix project was founded on 11 January, 2012. It previously existed under [[History|different project names]], including TorBOX and aos. As mentioned earlier, Whonix is free software which makes the source code available for inspection. In the main, Whonix is comprised of specifications for which Debian software packages should be installed and their appropriate configuration. Unfortunately, Whonix does not receive the kind of attention that is dedicated to Debian or Tor, and a formal, [[Security Reviews and Feedback|external audit]] has not yet taken place. 

With a relatively small development team and estimated user base, the "many eyeballs" theory may work against Whonix at present. However, the source code is comparably small and devoid of complexities, meaning the project is in relatively good shape compared to many other similar projects. Interested readers can learn more about the Whonix specification and design [[Design|here]]. <ref>This is a good starting point to understand how Whonix works.</ref>

With these factors in mind, the reader can now make an informed decision about the trustworthiness of Whonix.

= Trusting Downloaded Images =

Users should not blindly trust the Whonix project or its developers. Logically it is unwise to trust unknown persons, especially on the Internet. On that basis, trust in Whonix founder Patrick Schleizer should not rely on his public persona or the appearance of the Whonix project alone. Whonix may be or could become a high profile target, and it is risky to assume that Schleizer's build machine would remain clean under those circumstances.

Binary images can be trusted to some extent if a user verifies that they received exactly the same code as thousands of other users, and no one has found or publicly reported any serious security issues. This requires verification of the Whonix-Workstation and Whonix-Gateway images using the available OpenPGP signatures. <ref>This feature has been available since Whonix 0.4.5</ref> All binary releases and source code tags for releases are OpenPGP-signed by lead Whonix developer Patrick Schleizer. 

In order of increasing security, the Whonix images can be:

# Downloaded via {{Code|https://whonix.org}}. TLS provides some trust and integrity of the hash file, but it is still advisable to check the site's certificate and perform manual OpenPGP verification. 
# Downloaded over the [http://dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion Whonix v3 onion address] with Tor Browser before OpenPGP verification. Onion addresses provide a higher standard of authentication than clearnet addresses.
# [[BuildDocumentation|Built from source]] since it is a relatively easy procedure. <ref>[[Trust#Verifiable_Builds|Verifiable Builds]] allow auditors to check if there is hidden code inside Whonix.</ref>

= OpenPGP =

'''Fingerprint Trust'''

Most users retrieve OpenPGP fingerprints directly from a website and then download an associated key from a key server. The problem with this method is that TLS is fallible and the connection could be insecure or broken. Greater security necessitates a key signing party, whereby a direct and trusted path of communication can be confirmed by all attendees. If this step is not followed, OpenPGP is only secure as TLS. 

It is often impossible to meet this condition of meeting in person. To mitigate the risk, any OpenPGP fingerprint should be cross-referenced on multiple "secure" (<code>https://</code>) sites. An additional fail-safe is to use an alternative authentication system, for example comparing the Tor signing keys on both the clearnet and onion domains: https://www.torproject.org/docs/signing-keys.html.en and http://idnxcnkne4qt76tg.onion/docs/signing-keys.html.en. <ref>Onion reference is a broken link - needs updating.</ref> 

Onion services offer strong authentication via [https://www.torproject.org/docs/onion-services multiple layers of encryption]. This does not prohibit an advanced adversary from trying to impersonate an onion service, but together with multiple fingerprint sources, it becomes increasingly difficult and improbable that a single entity could impersonate them all.

'''Whonix Binaries and Git Tags'''

All Whonix binaries are OpenPGP-signed by Whonix developer Patrick Schleizer. <ref>Whonix developer ([http://www.webcitation.org/6Eny0UfAI w]), [https://trac.torproject.org/projects/tor/wiki/doc/proper?version=1 named proper in past] ([http://www.webcitation.org/6Fg1zUNeQ w]), [https://trac.torproject.org/projects/tor/wiki/doc/proper?version=6 renamed itself to adrelanos] ([http://www.webcitation.org/6Fg2p2YK3 w]), [https://trac.torproject.org/projects/tor/wiki/doc/proper?version=3 published its OpenPGP key on 05/29/12] ([http://www.webcitation.org/6Fg336X1H w]) ([https://trac.torproject.org/projects/tor/wiki/doc/proper?action=history wiki history] ([http://www.webcitation.org/6Fg24cX1W w])). [https://www.whonix.org/blog/giving-up-pseudonymity-after-collecting-experiences-with-pseudonymous-project-development/ Revealed its identity on 01/18/14.] [http://www.webcitation.org/6Nl4kSDM8 (w)] [https://lists.torproject.org/pipermail/tor-talk/2014-January/031741.html Patrick Schleizer posted its OpenPGP key transition message on 01/18/14 signed by his old and his new key.] [http://www.webcitation.org/6Nl4neAFt (w)]</ref> The source code is directly available on github over TLS, and it can be cloned using git over <code>https://</code>. Git tags for each release are also OpenPGP-signed by Whonix developer Patrick Schleizer. Users can also request signed git development tags from the same developer.

Even if Whonix developers are distrusted, verifying binary downloads or git tags with OpenPGP is still useful. For example in order to audit Whonix, it is important to verify the download came from Whonix developers and that it was not tampered with by third parties. This is a realistic threat, as these recent examples show:

* [http://www.extremetech.com/computing/120981-github-hacked-millions-of-projects-at-risk-of-being-modified-or-deleted An attacker could modify source codes on github] ([http://www.webcitation.org/6Eny2zbS1 w])
* [http://sourceforge.net/blog/sourceforge-attack-full-report/ sourceforge hacked] ([http://www.webcitation.org/6Eny40bV9 w])
* [http://www.theregister.co.uk/2012/09/26/sourceforge_backdoor_code_compromise/ sourceforge mirror hacked] ([http://www.webcitation.org/6Enz6vyNP w])


The OpenPGP key also ensures that if the Whonix infrastructure is ever compromised by a powerful adversary (such as a domain takeover ), the original Whonix developers can at least prove they owned the infrastructure.

= Verifiable Builds =

== Verifiable .ova Releases ==

{{Verifiable Ovas Introduction}}

'''This is just an introduction. See [[Verifiable Builds]] for the full page.'''

== Verifiable Whonix Debian Packages ==

{{Verifiable Pkgs Introduction}}

'''This is just an introduction. See [[Verifiable Builds#Verifiable Whonix Debian Packages]] for the full page.'''

= Whonix Updates =

== Introduction ==

Whonix provides an optional updater since Whonix 6.

[[Non-Qubes-Whonix]]:

* When <u>[[Dev/Build Documentation|building]] from source code</u>, since Whonix 7.3.3, Whonix's APT Repository is <u>disabled by default.</u>
* For the <u>Default-[[Main_Page#Download_Whonix|Download]]-Version</u>, Whonix's APT Repository is <u>enabled by default.</u> While building Whonix using the build script, Whonix's APT repository has been added to {{Code2|/etc/apt/sources.list.d/whonix.list}} and Whonix's (adrelanos's) APT repository OpenPGP signing key has been added to apt-key by the {{Code2|whonix_repository}} tool.
<br />
[[Qubes|Qubes-Whonix]]:

* [[Qubes/Install]]: enabled by default
* When building from source code: enabled by default. To disable:
** [https://github.com/Whonix/qubes-template-whonix qubes-template-whonix]: [https://github.com/Whonix/qubes-template-whonix/blob/master/builder.conf <code>builder.conf</code>], set <code>WHONIX_APT_REPOSITORY_OPTS = off</code>
<br />
When Whonix's APT Repository is enabled and updated Whonix debian packages are uploaded to Whonix's APT repository, next time you are upgrading your system using "sudo apt-get update && sudo apt-get dist-upgrade", those packages will automatically get installed. If this is not what you want, this can be [[Whonix-APT-Repository#Disable_Whonix_APT_Repository|disabled]]. Below is a security discussion about the implications.

Alternatively, you can [[Dev/Build Documentation|update Whonix from source code]].

At the moment, Whonix developer Patrick Schleizer is the only one holding the Whonix APT repository OpenPGP signing key.

When it comes to trust, there is a big difference if you are building Whonix from source code or if you are using the Default-Download-Version. When you build Whonix using the build script and verified the source code to be non-malicious and reasonable bug free, Whonix developers have no way to access your system. With Whonix's APT repository enabled however, Whonix developers holding a Whonix repository signing key could always release a malicious update and gain full access on your machines.

When using the Default-Download version, on one hand, when not using Whonix's APT repository, Whonix developers could sneak in a backdoor into the binary builds (download version) (the rest of this page above goes into this subject), which is worse enough. And on the other hand, while using Whonix's APT repository, Whonix developers could sneak in a backdoor at any time. Also notable, while the binary builds contain binary packages (which are downloaded from Debian repository while building), which makes it easier to sneak a backdoor in, the Whonix deb packages do not contain any compiled code yet (only configuration files, scripts, comments) (which might change with a malicious update). As long as there is no compiled code inside Whonix deb packages, it might be easier for auditors, to catch a backdoor in updated deb packages (unless its a targeted attack) compared to the binary builds (download version).

When Whonix's APT repository is disabled, there is no updater and the situation is the same as in Whonix 0.5.6 and below.

== Security Conclusion ==

Legend:

* *: one star.
* one star: bad
* more stars: better
* 4 stars: best

{| class="wikitable" style="background-color: #fff;text-align: center"
! 
! Whonix-Default-Download with Whonix APT Repository
! Whonix-Default-Download without Whonix APT Repository
! Building from Source Code and using Whonix APT Repository
! Building from Source Code without using Whonix APT Repository
|-
! security
| style="background-color: {{Red}}"| *
| style="background-color: {{Yellow}}"| **
| style="background-color: {{Red}}"| ''*''
| style="background-color: {{Green}}"| ****
|-
! convenience
| style="background-color: {{Green}}"| ****
| style="background-color: {{Red}}"| ''*''
| style="background-color: {{Yellow}}"| **
| style="background-color: {{Red}}"| *
|}

The least secure and most convenient way is to use Whonix is using Whonix-Default-Download and to leave Whonix's repository enabled.

It is a bit safer to use Whonix-Default-Download version and to disable Whonix's APT repository. When updated Whonix deb packages are released, download them manually, verify them manually and install them manually. Big security bonus points for verifying the deb package contents before installing them. You'll get most security, if you [[Dev/Build_Documentation|build Whonix from source code]] and also build update packages from source code. Big security bonus points for verifying the source code before building Whonix.

= Appendix =

== What Digital Signatures Prove ==

Most people, even programmers, often confuse the basic ideas behind digital signatures. Most people should read this section, even if it looks trivial at first sight.

Digital Signatures show that someone who had access to the private key has made a signature. It is an indication, that its contents have not been tampered (so, integrity is preserved) and can indicate, that a given file is authentic.

Digital Signatures do '''not''' prove any other property, e.g. that the file is not malicious. In fact there is nothing that could stop people from signing a malicious program (and it happens from time to time in reality).

The point is, of course, that people need to choose to trust some people, e.g. Linus Torvalds, Microsoft, etc. and assume that if a file(s) was indeed signed by those individuals, then indeed it should not be malicious and buggy in some horrible way. But the decision of whether to trust certain people (e.g. those behind the Whonix Project) is beyond the scope of digital signatures. It is more of a sociological and political decision.

However, once we make a decision to trust somebody (e.g. The Whonix Project and the files released by them), then the digital signatures are useful, because they make it possible to limit our trust only to those few people we chose, and not to worry about all the Bad Things That Can Happen In The Middle between us and them (i.e. the vendor), like e.g.: server compromises, dishonest IT staff at the hosting company, dishonest staff at the ISPs, WiFi attacks, etc.

If we verify all the files we download from the vendor, we don't need to worry about all the above bad things, because we would easily be able to detect when the file(s) has been tampered (and not execute/install/open them).

However, for the digital signatures to make any sense, one should ensure that the public keys we use for signature verification are indeed the original ones. Anybody can generate a OpenPGP key pair that would pretend to be for "Whonix Project", but only the key pair that Patrick Schleizer generated is the legitimate one. Securely obtaining Whonix signing key is documented on a later page, [[Whonix Signing Key]].

== TLS ==

<code>TLS/SSL/HTTPS with the CA model is flawed.</code><ref>See [[SSL]].</ref> We don't trust it and you shouldn't either. Even if all the implementation details (revocation not working, every CA can issue certs for anything, including "*") were sorted out, having to trust a 3rd party is a no go. But, we still have to rely on it to some extent for that lack of a widely used web of trust or other alternative.

== Evil Developer Attack ==

This is only a theoretical attack, as far as we know. We are not aware that it ever happened to any software project. This is not a Whonix specific problem. It applies to all open source software projects, but more to those where the developers stay anonymous. Examples for such anonymously developed software projects are TrueCrypt, Tails, I2P...

The attack works like this: 1. Start a new software project. Alternatively join an existing software project. 2. Behave well, publish your sources. Gain trust. 3. Build binaries directly from your sources and offer them for download. 4. Make a great product, get a lot of users. 5. Continue to develop it. 6. Make a second branch of your sources and add malware. 7. Continue to publish your clean sources, but offer your malicious binaries for download. 8. Done! You infected a lot of users.

It is very difficult for end users to notice this attack. Of course, if all users would be added to a botnet, there would be news about this incident very soon and everyone would know. On the other hand, if the backdoor is barely used, it may remain secret for a long time.

The myth, that open source software is automatically more secure than closed source, is still strong and widespread. Yes, open source has advantages but certainly not for this threat model. Who checks if the binaries are made from the proclaimed source and publishes the results? That is called deterministic builds.<ref>https://mailman.stanford.edu/pipermail/liberationtech/2013-June/009257.html</ref> <ref>https://trac.torproject.org/projects/tor/ticket/3688</ref> It is quite difficult to achieve that. If you are interested on how complex it is, also google 'trusting trust'.

All that is very difficult and it all comes back to trust. How can you trust developers? Even if they are not anonymous, you still do not know them and can not trust them? And even if you know them, can you trust them not to have made any mistakes?

These are serious questions to think about. Whonix is also affected by this issue, just like TrueCrypt, Tails, I2P, etc. Most projects (such as TrueCrypt) do not even inform about this fact. Whonix is just an ordinary software project, unfortunately we are unable to fix all problems in the world.

Whonix doesn't distribute any binaries, only redistributes unmodified upstream binaries, shell scripts, we do not create our own binaries. That's what we claim, but it is a lot easier to verify than if we were distributing our own binaries from source code we wrote. Users should worry about the motives and internal security of everyone contributing to torproject.org, all of the distro devs and maintainers and the hundreds of upstream devs and contributors. Trusted computing base size of a modern operating system today is so ridiculously big and so many people are involved we'd be really surprised if none of the "bugs" were intentional. And then there's the hardware. You think that even AMD could understand an Intel chip or vice versa? Of course one can't compare an anonymous contributor with no investment but time with a multi-national company. On the other hand, in comparison, detection here is just ridiculously simple (diff the hash sums), while finding and then proving that something is not a bug but a backdoor in a compiler, well designed source code let alone a CPU is impossible. Anonymous or not no longer matters these days. We are in a more or less open "cyber war" or that's what media and lawmakers want us to believe. Fact is, today players are backed by governments, they can use their real identities without fear of repercussion, fake IDs can be created, trustworthy people can be coerced into giving up their OpenPGP and ssh keys if projects even make use of any strong authentication. Judging by the lack of signatures on many open source upstream and even downstream downloads I'm sure many lack any internal security enforcement and still trust DNS to provide authenticity and clear text to provide integrity. About open source, yeah, you can bet Apple, Google and Microsoft have better internal security than the global open source community. However that doesn't make their code trustworthy or says anything about whether closed or open is more secure...

== Whonix Developer OpenPGP Guidelines ==

All long term Whonix developers, are encouraged to:

* Create a 4096/4096 RSA/RSA OpenPGP key.
* Get the latest gpg.conf (which comes with Whonix-Workstation) for stronger hashes, no-emit-version, etc.
* Store the private key inside an encrypted file.
* Make a backup of that encrypted file.
* Remember the password, check yourself regularly.
* Also upload the encrypted file to some (free) online cloud hosting, in case of thief, fire, tornado, etc.
* Since the project started in 2012, we believe the earlier developer published its OpenPGP public key, the less likely is it, that the developer is attempting an evil developer attack.

== Other Projects Discussing Trust ==
* Tails is a live CD or live USB that aims at preserving your privacy and anonymity. [https://tails.boum.org/doc/about/trust/index.en.html Tails about trust.] ([http://www.webcitation.org/6EnyJvTnn w])
* I2P (anonymizing network) does also talk about [http://www.I2P2.de/how_threatmodel.html#dev development attacks]. ([http://www.webcitation.org/6EnyKSGdn w])
* [https://wiki.qubes-os.org/wiki/VerifyingSignatures Qubes OS: What do the Digital Signatures Prove and What They DO NOT Prove] ([http://www.webcitation.org/6EnyL8AQn w])
* [http://hyper.to/blog/link/attack-scenarios-software-distribution/ Miron’s Weblog: Attack Scenarios on Software Distributions] ([http://www.webcitation.org/6EnzaBTdP w])
* list of incidents of compromised servers: [http://www.koch.ro/blog/index.php?/archives/153-On-distributing-binaries.html On distributing binaries] ([http://www.webcitation.org/6L1roljIe w])

= Footnotes / References =
<references/>

= License =
{{License_Amnesia|{{FULLPAGENAME}}}}

Thanks to Qubes OS ([https://groups.google.com/forum/?fromgroups=#!topic/qubes-devel/zALZnu9pTuU Permission]) ([http://www.webcitation.org/6EnxWzgfq w]). The "What do the Digital Signatures Prove and What They DO NOT Prove" chapter contains content from the [https://wiki.qubes-os.org/wiki/VerifyingSignatures Qubes OS: What do the Digital Signatures Prove and What They DO NOT Prove] page.

{{Footer}}

[[Category:Documentation]]
