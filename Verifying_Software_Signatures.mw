{{Header}}
{{#seo:
|description=Verifying Software Signatures
|image=https://www.whonix.org/w/images/b/bb/Verifyingsignature1231233.png
}}

= Introduction =
For greater system security, it is strongly recommended to avoid installing unsigned software. Users should also make sure that [[Warning#Always_Verify_Signatures|signing keys and signatures are correct]] and/or use mechanisms that heavily simplify and automate this process, like [[Operating_System_Software_and_Updates#Updates|apt-get]] upgrades.

= What Digital Signatures Prove =
Users should bear in mind that using digital signatures to verify the trustworthiness of software is not an infallible process. Digital signatures increase the certainty that no backdoor was introduced by a third party during transit, but this does not mean the software is absolutely "backdoor-free". The following is a summary of what digital signatures prove and do not prove.

== Digital Signatures Prove ==

* Someone with access to the private key has made a signature.
* The file contents have not been tampered with (preserving integrity).
* <i>May</i> indicate the given file is authentic.

== Digital Signatures do not Prove ==

* Any other property, for example, that the file is not malicious. Nothing stops a person from signing a malicious program.
* That persons signing the file are inherently trustworthy, for example, Microsoft, Whonix developers and so on -- but trust must be eventually placed in someone. <ref>Digital signatures are still useful in this case, because the user can choose to limit trust to a few select people/organizations such as Whonix developers.</ref>

If all files downloaded from trusted vendors are verified, then this removes the threat of server compromises, dishonest staff at hosting companies or ISPs, Wi-Fi attacks and so on. The reason is files that have been tampered with will produce bad digital signatures, <i>so long as the public keys used for signature verification are the authentic, original ones (see below).</i>

= Checking Digital Fingerprints of Signing Keys =
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = '''Warning:''' Software should only be installed <i>after</i> a key's fingerprint has been verified and good signatures are produced for files/repositories.
}}


Based on the preceding information, a critical first step in verifying software is legitimate is to confirm the authenticity of the signing key via its fingerprint. <ref>For example, <i>anybody could generate an OpenPGP key pair and pretend to be the "Whonix Project"</i>, but only [[Whonix_Signing_Key|Patrick Schleizer's generated key pair]] is legitimate.</ref> This is a necessary step before keys are imported or trust is placed in OpenPGP output when verifying files or repositories.  

The standard advice in Whonix documentation is to carefully obtain copies of the [[Trust#OpenPGP|OpenPGP fingerprint]] from multiple secure websites and to use [[OpenPGP#The_OpenPGP_Web_of_Trust|other authentication systems]] to check they match. <ref>Website checks are only as secure as the imperfect TLS system, which is itself based on certificate authorities that have been frequently compromised in recent years.</ref> In this instance, "other authentication systems" refers to: <ref>https://www.qubes-os.org/security/verifying-signatures/</ref>
<blockquote>
* Use the PGP Web of Trust.
* Check the key against different keyservers.
* Use different search engines to search for the fingerprint.
* Use Tor to view and search for the fingerprint on various websites.
* Use various VPNs and proxy servers.
* Use different Wi-Fi networks (work, school, internet cafe, etc.).
* Ask people to post the fingerprint in various forums and chat rooms.
* Check against PDFs and photographs in which the fingerprint appears (e.g., slides from a talk or on a T-shirt).
* Repeat all of the above from different computers and devices.
</blockquote>

= Checking Digital Fingerprints of Signed Software =
Once a user has carefully:

* Downloaded a signing key pair.
* Checked the signing key's fingerprints against multiple sources.
* Imported the key pair.
* Downloaded the software package intended for installation.
* Downloaded the accompanying signature file for the software package (.asc files are GPG signatures).

Then the file(s) signatures must be verified against the signing key. 

Below is an example of how to check the file signature, using the Tor Browser bundle v7.5.6 downloaded directly from The Tor Project website.

In a terminal run.

{{CodeSelect|code=
gpg --verify tor-browser-linux64-7.5.6_en-US.tar.xz.asc tor-browser-linux64-7.5.6_en-US.tar.xz
}}

The OpenPGP output should show a "good signature", with the primary key fingerprint matching the one verified by the user earlier on. In this example.

<pre>
    gpg: Signature made Sat 23 Jun 2018 07:35:22 PM UTC using RSA key ID C3C07136
    gpg: Good signature from "Tor Browser Developers (signing key) "
    gpg: WARNING: This key is not certified with a trusted signature!
    gpg:          There is no indication that the signature belongs to the owner.
    Primary key fingerprint: EF6E 286D DA85 EA2A 4BA7  DE68 4E2C 6E87 9329 8290
</pre>

The software can now be safely installed. If the output states "bad signature", then the files and digital signatures should be removed and downloaded again.

= Attribution =
Gratitude is expressed to [https://www.qubes-os.org Qubes OS] ([https://groups.google.com/forum/?fromgroups=#!topic/qubes-devel/zALZnu9pTuU Permission]) ([http://www.webcitation.org/6EnxWzgfq w]). The [[#What Digital Signatures Prove|What Digital Signatures Prove]] chapter contains content from the [https://www.qubes-os.org/security/verifying-signatures/#what-digital-signatures-can-and-cannot-prove Qubes OS: What do the Digital Signatures Prove and What They DO NOT Prove] page.

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
