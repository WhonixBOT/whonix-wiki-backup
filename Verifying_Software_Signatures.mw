{{Header}}
{{#seo:
|description=Digital signatures can increase security but this requires knowledge. Learn more about Verifying Software Signatures, What Digital Signatures (Not) Prove, Verification Security Levels, Conceptual Challenges, Attacks in the Wild.
|image=https://www.whonix.org/w/images/b/bb/Verifyingsignature1231233.png
}}

= Introduction =

For greater system security the installation of unsigned software should be avoided at all costs. Instead it is recommended to:

* Only install verifiable software that allows for [[Warning#Always_Verify_Signatures|confirmation of signing keys and signatures]]; and/or
* Use mechanisms that heavily simplify and automate this process, like [[Operating_System_Software_and_Updates#Updates|apt-get]] upgrades.

= What Digital Signatures Prove =

Bear in mind that using digital signatures to verify the trustworthiness of software is not an infallible process. Digital signatures increase the certainty that no backdoor was introduced by a third party during transit, but this does not mean the software is absolutely "backdoor-free". The following is a summary of what digital signatures prove and do not prove.

'''Table:''' ''Digital Signatures Properties''

{| class="wikitable"
|-
! scope="col"| '''Property'''
! scope="col"| '''Description'''
|-
! scope="row"| Digital Signatures Prove
| 
* Someone with access to the private key has made a signature. <br />
* The file contents have not been tampered with (preserving integrity). <br />
* <i>May</i> indicate the given file is authentic.
|-
! scope="row"| Digital Signatures do not Prove
| 
* Any other property, for example, that the file is not malicious. Nothing stops a person from signing a malicious program. <br />
* That persons signing the file are inherently trustworthy, for example, Microsoft, {{project_name}} developers and so on -- but trust must be eventually placed in someone. <ref>Digital signatures are still useful in this case, because it is possible to limit trust to a few select people/organizations such as {{project_name}} developers.</ref>
|}

If all files downloaded from trusted vendors are verified, then this removes the threat of server compromises, dishonest staff at hosting companies or ISPs, Wi-Fi attacks and so on. The reason is files that have been tampered with will produce bad digital signatures, <u>so long as the public keys used for signature verification are the authentic, original ones (see below).</u>

= Common Misconceptions =
{{gpg_signature_timestamp}}

{{GnuPG_file_names}}

= Checking Digital Fingerprints of Signing Keys =

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = '''Warning:''' Software should only be installed <u>after</u> a key's fingerprint has been verified and good signatures are produced for files/repositories.
}}

A critical first step in verifying software is legitimate is confirmation that the signing key is authentic -- this requires inspection of the key fingerprint. <ref>For example, <u>anybody could generate an OpenPGP key pair and pretend to be the "{{project_name}} Project"</u>, but only [[{{project name short}}_Signing_Key|Patrick Schleizer's key pair]] is legitimate.</ref> Always perform this operation before keys are imported or trust is placed in OpenPGP output when verifying files or repositories.  

The standard {{project_name}} wiki advice is to carefully obtain copies of the [[Trust#OpenPGP|OpenPGP fingerprint]] from multiple secure websites and to use [[OpenPGP#The_OpenPGP_Web_of_Trust|other authentication systems]] to check they match. <ref>Website checks are only as secure as the imperfect TLS system, which is itself based on certificate authorities that have been frequently compromised in recent years.</ref> In this instance, "other authentication systems" refers to: <ref>https://www.qubes-os.org/security/verifying-signatures/</ref>

* Use the [[OpenPGP#The_OpenPGP_Web_of_Trust|The OpenPGP Web of Trust]].
* Check the key against different keyservers.
* Use different search engines to search for the fingerprint.
* Use Tor to view and search for the fingerprint on various websites.
* Use various VPNs and proxy servers.
* Use different Wi-Fi networks (work, school, internet cafe, etc.).
* Ask people to post the fingerprint in various forums and chat rooms.
* Check against PDFs and photographs in which the fingerprint appears (e.g., slides from a talk or on a T-shirt).
* Repeat all of the above from different computers and devices.
* See also [[OpenPGP#Bootstrapping_OpenPGP_keys_from_the_web|Bootstrapping OpenPGP keys from the web]]

= Checking Digital Fingerprints of Signed Software =

Before file signatures can be safely verified with the signing key, several prerequisites must be met:
# The correct signing key pair was downloaded.
# The signing key's fingerprints were checked against multiple sources.
# The key pair was imported.
# The software package intended for installation was downloaded.
# The accompanying signature file for the software package (.asc files are GPG signatures) was downloaded.

The following example shows how the file signature is checked for Tor Browser bundle v8.5, directly downloaded from The Tor Project website.

In a terminal run.

{{CodeSelect|code=
gpg --verify tor-browser-linux64-8.5_en-US.tar.xz.asc tor-browser-linux64-8.5_en-US.tar.xz
}}

The OpenPGP output should show a "good signature", with the primary key fingerprint matching the one verified by the user earlier on. In this example.

<pre>
    gpg: Signature made Mon May 20 11:00:34 2019 UTC using RSA key 0xEB774491D9FF06E2
    gpg: Good signature from "Tor Browser Developers (signing key) <torbrowser@torproject.org>" [unknown]
    gpg: WARNING: This key is not certified with a trusted signature!
    gpg:          There is no indication that the signature belongs to the owner.
    Primary key fingerprint: EF6E 286D DA85 EA2A 4BA7  DE68 4E2C 6E87 9329 8290
         Subkey fingerprint: 1107 75B5 D101 FB36 BC6C  911B EB77 4491 D9FF 06E2
</pre>

The software can now be safely installed. If the output states "bad signature", then the files and digital signatures should be removed and downloaded again.

= System Security Level =

System security level can be placed into one of three categories. From strongest to weakest these are:

* <code>Always use software signatures verification</code>: software signatures are always verified with [[OpenPGP]], [[PQCrypto#Codecrypt|codecrypt]], [[Install_Software|APT]] or similar mechanisms.
* <code>Always use TLS</code>: files are always [[Secure_Downloads|securely downloaded]] over [[SSL|TLS]].
* <code>Plaintext</code>.

If software was ever installed or started that did not previously successfully verify software signatures, then the system security level is reduced from the OpenPGP standard to either TLS or even the plaintext standard.

Unless a [[Disaster Recovery|Disaster Recovery Procedure]] is utilized, it is impossible to increase the security level of a machine or VM (for example, from TLS to the OpenPGP standard).

If the reader shares the {{project_name}} opinion that [[SSL|Transport Layer Security (TLS)]] provides a weak safeguard, then software signatures must be consistently verified and without exception.

= Conceptual Challenges in Software Digital Signatures Verification =
There are many educational shortcomings related to verification of software digital signatures. There are many implicit assumptions which are seldom spelled out. Realistically, expecting users to successfully verify software signatures and to notice attacks by advanced adversaries is very much likely to fail unless properly educated before the attack started.

Writing on an internet website "please download our signing key and verify our software signatures" has only limited usefulness. Whonix.org providing software signatures is just an example. This is the same for any software that provides software signatures.

Diligence in software signatures cannot be offered by vendors (those who offer software for download). Vendors can only offer software signatures. Diligence in verification of software signatures is something that only users can demand from themselves.

This is because of the threat model of software signature verification. The implicit assumption behind it are the different [[#System Security Level|system security level]]. Implicit meaning, that the threat model is seldom explicitly spelled out and explained to users. This chapter attempts to make this explicit.

In this threat model, signing keys and software signatures are considered a higher security level. Everything the user can see on a website is on a lower security level. This is because there are not [[Dev/OpenPGP Signed Website|(OpenPGP) signed websites]] anywhere yet. And [[SSL|TLS]] is considered a lower security level too than verification of digital software signatures.

Let's assume there was a software. It's main website would be reachable over TLS. (In this very example TLS vs non-TLS does not even matter.) Due to file size and economic shortcommings it however is not possible to host software downloads on the same server. Software downloads are being offered on a mirror network, i.e. by third parties. In such an example it could be argued that mirrors are less trusted than the main project website. In that case if the main website offered a signing key then a malicious file shipped by a third party mirror could be detected if software signature verification was utilized by the user.

In case of other projects among which {{Project name}} is again just an example, everything, i.e. the software downloads, signing key and software signatures are provided by the same server over [[SSL|TLS]] (and in case of Whonix also over [[Forcing_.onion_on_Whonix.org|.onion]], see also [[Download Security]]). No project however can promise that its server will never be compromised, see [[Trust#Distrusting_Infrastructure|Distrusting Infrastructure]] for details.

Therefore blindly trusting whatever the project website says about software signature verification is a very bad idea. The threat model is to keep in mind, the question to ask is: What if the website I am currently seeing is already compromised? What if whatever the server is saying about instructions on how to verify software signatures, which signing key should be used has not sorely written by the vendor but maliciously modified by a third party? Advanced adversaries might after they compromised a project web server show fake website contents only to users they want to specifically target.

There are various attacks, various malicious modifications of the project website possible for an attacker:

* Remove any mention of software signature verification and replace software downloads with malicious counterparts.
** Users who never heard about software verification would have no chance to notice this and get compromised.
** Users who already previously understood the threat model of digital software verification and wanted to enforce "always software signatures verification security level" would ask for software signatures and stay safe.
* Mention a potential lie such as "from now on, software signatures are no longer required. This is now automatic, because ...".
** Users who are gullible would believe this and get compromised.
** Diligent users would search for a digitally signed message by the vendor confirming this. And if not found, report the issue and stay safe.
* Replace the genuine signing key and software signatures with a signing key and software signatures created by the attacker.
** Users who did not previously receive the singing key and who did not do further research the plausibility of having received the correct signing key would not notice this and get compromised.
** Diligent users would follow the recommendations in earlier chapters on this page and therefore stay safe.

To counter these threats, user diligence is required as a sanity check.

Due to the complexity of this issue and the very low awareness, it is unlikely that a significant amount of users is enforcing "always software signatures verification security level". The concept of these security levels explicitly spelled out has never been seen before by the author of this chapter. Required knowledge is far too much. Usability of tools used for manual verification of software signatures is far too bad. [[Dev/SecureDownloader|Better technical solutions are required but these do not exist.]]

= Attacks in the Wild =
== Virus Stealing Money ==
* https://www.reddit.com/r/Monero/comments/dyfozs/security_warning_cli_binaries_available_on/
* https://lists.getmonero.org/hyperkitty/list/monero-announce@lists.getmonero.org/thread/DXJ223SBTCWKP7EDHVS7X73VP6WWX4S4/
* https://github.com/monero-project/monero/issues/6151#issuecomment-555694443
* https://bartblaze.blogspot.com/2019/11/monero-project-compromised.html

== Fake Tor Browser ==
To illustrate the risk of installing unsigned software, consider the following attack which recently used a [https://en.wikipedia.org/wiki/Trojan_horse_(computing) "trojanized" Tor Browser] to spy on users and to steal Bitcoin. This attack had several elements: <ref>https://www.eff.org/deeplinks/2019/10/phony-https-everywhere-extension-used-fake-tor-browser</ref> <ref>https://www.eset.com/us/about/newsroom/press-releases/eset-discovers-a-campaign-stealing-bitcoins-from-darknet-users/</ref>

* Advertisements for the fake Tor Browser were used in Russian forums focused on privacy, censorship circumvention, darknet markets and cryptocurrencies.
** Messaging included promises to circumvent Russian censorship bodies and to bypass CAPTCHAs.
** Links were provided to fake domains for downloading Tor Browser (<code>tor-browser.org</code> and <code>torproect.org</code>), instead of the genuine website: <code>torproject.org</code>
* After visiting the fake websites, users received warnings their Tor Browser was outdated (regardless of the reality). Users who believed this message were redirected to another website with an installer.
* The malicious Tor Browser version downloaded was older (version 7.5) than the current release (9.0 at the time of writing), and had disabled the digital signature check for installed Tor Browser add-ons (<code>xpinstall.signatures.required</code> was set to false). It had also renamed the updater tool to prevent victims updating to a legitimate version of Tor Browser.
* The Tor proxy was used in the browser, anonymizing the user's IP address. However, users could be spied upon because a custom user-agent (text-based identifer) was set that allowed the software and operating system to be visible -- a unique [[Fingerprint]] made tracking by network observers possible.
* Attackers had bundled HTTPS Everywhere with a modified <code>manifest.json</code> file. This permitted the web extension to have broader permissions and to add content scripts that were loaded into various web pages. As a consequence, a [https://www.trendmicro.com/vinfo/us/security/definition/command-and-control-server Command and Control server] could load further scripts when users browsed on certain Darknet markets and a commonly used Russian money transfer service (QIWI) -- changing cryptocurrency wallet addresses to match an addressed controlled by criminals in order to steal money.
* It is also assumed the NoScript extension settings were modified so JavaScript was active when browsing.

This highlights the possible dangers of installing unsigned software -- loss of anonymity and financial loss in this case. If the victims had instead only installed signed Tor Browser software from trusted and known sources <u>after</u>: verifying they had the correct key pair, confirming the key's fingerprints, and checking the signature file for the software package matched, then they could have bypassed this scam entirely.

= See Also =
* [[Trust|Placing Trust in {{project_name}}]]
* [[Whonix Signing Key]]
* [[OpenPGP]]

= Attribution =
Gratitude is expressed to [https://www.qubes-os.org Qubes OS] ([https://groups.google.com/forum/?fromgroups=#!topic/qubes-devel/zALZnu9pTuU Permission]) ([http://www.webcitation.org/6EnxWzgfq w]). The [[#What Digital Signatures Prove|What Digital Signatures Prove]] chapter contains content from the [https://www.qubes-os.org/security/verifying-signatures/#what-digital-signatures-can-and-cannot-prove Qubes OS: What do the Digital Signatures Prove and What They DO NOT Prove] page.

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
