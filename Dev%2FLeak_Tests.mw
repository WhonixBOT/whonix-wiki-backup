{{Header}}
{{#seo:
|description=Testing for IP/DNS Leaks
}}

= Introduction =

In past Whonix documentation stated "in your own interest you should do the leak tests". That was from a time, where Whonix was only useful for very advanced end users, because only textual instructions existed; there were no scripts, no source code and the Whonix concept was brand new. It is unrealistic, that all download users do and understand the leak tests. That's why it was removed from the Readme.

You are still invited and encouraged to do the leak tests, in fact, at the moment, there are probably not many people auditing Whonix security.

Unfortunately, leak testing is as complicated as programming. You can not learn it overnight and you won't find someone online, willing to teach you for free. That's really something you have to do on your own. We continue to list and document all leak tests we are aware of, but we can not educate everyone in the depths of networking.

= Knowledge assumed =

* [https://trac.torproject.org/projects/tor/wiki/doc/build/BuildSignoff#Expectedissueswithpopulartestpages Expected issues with popular test pages]
* Search for previous discussions before reporting.

= Leak Testing Websites =

There are too many websites for leak testing. (Some are offline.)

* [https://trac.torproject.org/projects/tor/wiki/doc/build/BuildSignoff#TestPagestoUse List 1]
* [https://trac.torproject.org/projects/tor/wiki/doc/Testing/Tools#Sites List 2]

None of the Leak Testing Websites was able to find out the IP of Whonix-Workstation, no matter if plugins, flash and/or java was activated.

= DNS Leak Tests =

== Online ==

* http://www.dnsleaktest.com/
* Also check out http://check2ip.com/

== Defunct host DNS ==

Rendering the DNS on your host defunct should result in your not being be able to nslookup anymore, but Whonix-Workstation's DNS should still be functional.

== Defunct /etc/resolv.conf ==

On the Whonix-Gateway execute 'sudo nano /etc/resolv.conf' and comment out everything (# before every line so everything is ignored).

<pre>#nameserver 127.0.0.1</pre>

As a test's result the DNS requests in the Whonix-Workstation should still work while the DNS requests in the Whonix-Gateway no longer work.

== Using dig ==

Another very poor manish leak test: Because Tor's DNS resolver does not handle AAAA records this will not return any google hostnames if run on Whonix-Workstation and DNS requests aren't leaking. Running.

<pre>dig AAAA check.torproject.org</pre>

Should reply.

<pre>
; <<>> DiG 9.8.1-P1 <<>> AAAA check.torproject.org
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOTIMP, id: 42383
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;check.torproject.org.          IN      AAAA

;; Query time: 0 msec
;; SERVER: 10.152.152.10#53(10.152.152.10)
;; WHEN: [date]
;; MSG SIZE  rcvd: 38
</pre>

Tor also does not support DNSSEC yet. Running.

<pre>dig +dnssec check.torproject.org @localhost</pre>

Should reply.

<pre>
; <<>> DiG 9.8.1-P1 <<>> +dnssec check.torproject.org @localhost
;; global options: +cmd
;; connection timed out; no servers could be reached
</pre>

== Using nslookup ==

Running.

<pre>nslookup -type=mx check.torproject.org</pre>

Should reply.

<pre>
Server:         10.152.152.10
Address:        10.152.152.10#53

** server can't find check.torproject.org: NOTIMP
</pre>

Running

<pre>nslookup -type=AAAA check.torproject.org</pre>

Should reply.

<pre>
Server:         10.152.152.10
Address:        10.152.152.10#53

** server can't find check.torproject.org: NOTIMP
</pre>

= Leaks through the host or VM =

Shut down the Whonix-Gateway and start the Whonix-Workstation. The Whonix-Workstation shouldn't be able to exchange data with any outside target.

= Ping Test =

First, make sure both VMs are online. Since ICMP is not supported by Tor and filtered by Whonix firewall, you should not be able to ping any servers.

= FIN ACK / RST ACK - Leak Test=
<font size="-3">Credit for FIN ACK / RST ACK - Leak Test (coined by Whonix): Originally written by Mike Perry on the tor-talk mailing list, he found a transparent proxy leak without references to Whonix. ([https://lists.torproject.org/pipermail/tor-talk/2014-March/032503.html source]) The test has been adapted for Whonix.</font>

Note, the following IP 74.125.28.104 points to www.google.com and should be seen as an example.

On the host.

Close your browser and cease all other non-Whonix online activity to avoid contaminating the following test.

Install tcpdump.

<pre>
sudo apt-get update
sudo apt-get install tcpdump
</pre>

Run tcpdump. Replace {{Code|-i wlan0}} with your network interface. If you use {{Code|-i any}}, you will also see transproxied packets (which are not normally leaked).

<pre>
sudo tcpdump -n -i wlan0 host 74.125.28.104 and tcp port 80
</pre>

For testing/learning, connect to 74.125.28.104 (ping, open in a browser, use wget or similar) and see how it looks like when a connection to that IP is being made.

Close the connection. Stop tcpdump. Start tcpdump again.

In Whonix-Workstation.

Create a socket connection.

<pre>
python

import socket

s = socket.create_connection(("74.125.28.104", 80))
</pre>

On Whonix-Gateway.

Stop Tor.

<pre>
sudo service tor stop
</pre>

In Whonix-Workstation.

Close the socket connection.

<pre>
s.close()
</pre>

On the host.

Check, that you can not see any connections to 74.125.28.104 in tcpdump.

Variations of this test:

* You could also run tcpdump in Whonix-Workstation or on Whonix-Gateway.
* You could also [[Whonix-Gateways_Own_Traffic_Transparent_Proxy|enable transparent proxying for Whonix-Gateway's own traffic]] and create the socket connection on Whonix-Gateway.

<font size=-3>
Forum discussion:

* [https://www.whonix.org/old-forum/index.php/topic,243.0.html Part 1]
* [https://www.whonix.org/old-forum/index.php/topic,331.msg2269.html#msg2269 Part 2]
</font>

= Integrated tshark leaktest =

The necessary scripts for leak testing are now integrated into the Whonix machines.

On Whonix-Gateway start looking for leaks.

<pre>
## Login as user, open a shell as user or su user.
## /usr/bin/leaktest
sudo leaktest
</pre>

On Whonix-Workstation try to produce a leak.

<pre>
## Login as user, open a shell as user or su user.
## /usr/bin/leaktest
sudo leaktest
</pre>

If you are wondering, how this works and what that does, the old article, [[Dev/Leak Tests Old]] is still being kept.

* Original article.
* As copy and paste tutorial.
* For better understanding with more comments.
* Perhaps useful for similar projects.
* Optional additional tests.

= Integreated whonixcheck leaktest =
Please also run {{Code|[[whonixcheck]]}} on Whonix-Gateway and Whonix-Workstation. It's Tor SocksPort and Tor TransPort test (the latter only on Whonix-Workstation <ref>Because Whonix-Gateway does not have a TransPort by default.</ref>) are also doing leak testing. If {{Code|whonixcheck}} would report a big warning, if check.torproject.org couldn't detect Tor.

= Other Leak Tests =

A similar project published another leak test. Read [https://github.com/ra--/Tor-gateway/wiki/Faq How can I test if there is a leak in the setup respectively all traffic goes through Tor?]. Has not been tested with Whonix yet. If you do it, please share your results.

= Qubes specific =
== TemplateVM Update Proxy Leak Test ==
Start a your Whonix-Gateway TemplateVM (commonly called {{Code2|whonix-gw}}). <ref>
Those are assumed to be torified, i.e. having their NetVM set to sys-whonix.
</ref>

In your TempalteVM.

Start downloading some big<ref>With a small package you would not have a chance to easily and quickly disable Tor while it's downloading.</ref> package. <ref>
Alternatively, you could also run {{Code2|sudo apt-get update}} instead of downloading a big package and interrupt that. However, it would be less conclusive, because then apt-get updating may only break due to broken DNS. A long running transfer that no longer depends on functional DNS resolution would be far easier to spot. (If the download was non-torified, it should not matter if we stop Tor during the transfer.)
</ref> Example.

{{CodeSelect|code=
apt-get download iceweasel
}}

Now switch to your Whonix-Gateway ProxyVM (commonly called {{Code2|sys-whonix}}) and stop Tor. <ref>
Alternately, although with less conclusive, instead of stopping Tor, you could also stop qubes-updates-proxy during the transfer.

{{CodeSelect|code=
sudo service qubes-updates-proxy stop
}}

This should lead to the same ''expected result''.
</ref>

{{CodeSelect|code=
sudo service tor stop
}}

The ''expected result'' in the TemplateVM a functional download, that stops as soon as Tor is stopped.

<pre>
Get:1 http://security.debian.org/ jessie/updates/main iceweasel amd64 38.4.0esr-1~deb8u1 [39.3 MB]
Err http://security.debian.org/ jessie/updates/main iceweasel amd64 38.4.0esr-1~deb8u1
  500  Unable to connect
E: Failed to fetch http://security.debian.org/pool/updates/main/i/iceweasel/iceweasel_38.4.0esr-1~deb8u1_amd64.deb  500  Unable to connect
</pre>

You can now start Tor in your Whonix-Gateway ProxyVM again. 

{{CodeSelect|code=
sudo service tor start
}}

Repeat this test with your Whonix-Workstation TemplateVM (commonly called {{Code2|whonix-ws}}.

= See Also =

* [[Test]]

= Footnotes =
<references />

{{Footer}}

[[Category:Development]] [[Category:Design]]
