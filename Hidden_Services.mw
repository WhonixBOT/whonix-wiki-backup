<languages />
<translate>
{{#seo:
|description=Anonymously host any server with Whonix and Tor hidden services
}}
{{Header}}
= Tor Hidden Services - EASY =

== Introduction ==

Be sure to read and understand [https://www.torproject.org/docs/hidden-services.html.en Tor: Hidden Service Protocol] (general information) and [https://www.torproject.org/docs/tor-hidden-service.html.en Configuring Hidden Services for Tor] (standard setup, no isolated proxy) first. Note that hidden services are always only reachable using Tor or tunnel services, such as tor2web, ([https://trac.torproject.org/projects/tor/wiki/doc/tor2web be careful]).

You do not need SSL <ref>https://en.wikipedia.org/wiki/Secure_Sockets_Layer</ref>, because connections to Tor hidden services are end-to-end encrypted by default <ref>http://www.quora.com/Is-there-an-SSL-equivalent-for-Tor-Hidden-Services</ref>. <ref>To be exact, only tor-to-tor, see [[Hidden_Services#Notes_about_End-to-end_security_of_Hidden_Services|Notes about End-to-end security of Hidden Services]].</ref> This is handy, as you do not have to bother with self signed certificates or certificate authorities.

An adversary can see whether the service (and presumably Tor) is up and running or not.

== Hosting ANY Hidden Services == 
You can provide '''any''' server service, which relies on TCP, such as web servers, IRC servers, chat servers and so forth. UDP and IPv6 are not supported by the Tor network, but if required you could use [[OnionCat]] as a workaround.

Below on this page is an ''example'' for a Hidden Webserver. On the [[Voip]] page is an example for a Hidden Voip Mumble Server.

Even if someone hacks your hidden server software (lighttpd, thttpd, apache, etc.), the attacker can not steal your hidden service key or bypass Tor, see [[Comparison with Others#Attacks|Attack on Whonix]]. The key is stored on the Whonix-Gateway. Once you cleaned your Whonix-Workstation, no one can impersonate your hidden service anymore.

While using Whonix we're quite confident that there are no IP/DNS leaks, but hardening the server software is still left to the user. In the [[Security Guide]] and in the [[Advanced Security Guide]] you'll find pointers for hardening.

Beware of application level leaks. See [[Protocol-Leak-Protection and Fingerprinting-Protection]] for definition. For example,

* If you are using the Apache web server, it is advised to install [http://packages.debian.org/source/wheezy/libapache-mod-removeip libapache-mod-removeip]<ref><code>sudo apt-get install libapache-mod-removeip</code></ref> as well. A combination of Apache and mediawiki without libapache-mod-removeip being installed, wouldn't be the optimal case, since mediawiki by default puts IPs of anonymous editors in the public accessible editor logs. The IP would be 10.152.152.10. That could not be used to identify you, because that is not your real external IP address, but it would identify the server as a hidden service behind a Whonix-Gateway.<ref>Since it's easy to know that the internal LAN IP 10.152.152.10 is usually used by Whonix-Gateway.</ref>

Therefore any instructions on how to hide the IP address for your specific server software should be applied. Also other hardening instructions are recommended to apply. For example,

* If you are using the Apache web server, see the following footnotes. <ref>
(Source: [http://sourceforge.net/p/whonix/discussion/general/thread/407fce8f/?limit=25#478a old forum])

Stop Apache.

In {{Code|ports.conf}}:

<pre>
NameVirtualHost 127.0.0.1:80
Listen 127.0.0.1:80
ServerName localhost
</pre>

In {{Code|sites-available/default}}:
<pre>
</pre>

Start Apache.

Now Apache is not listening on {{Code|10.152.152.10}}, but only on {{Code|127.0.0.1}}. So now we somehow need to redirect {{Code|10.152.152.10:80}} to {{Code|127.0.0.1:80}}.

It can be done with a firewall rule or netcat:

<pre>
sudo ncat -l 10.152.152.10 80 -c 'ncat 127.0.0.1 80'
</pre>
</ref>

== Hidden Webserver ==

=== Setup ===
On your Whonix-Gateway:

Open {{Code2|''/etc/tor/torrc''}}.

<pre>sudo nano /etc/tor/torrc</pre>

Read the comments. These explain where to find your .onion URL and to backup your hidden service keys. Comment in the following two lines.

<pre>
HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 10.152.152.11:80
</pre>

Restart Tor.

<pre>sudo service tor reload</pre>
Reminder: To get your hidden service url.

<pre>
sudo cat /var/lib/tor/hidden_service/hostname
</pre>

Reminder: Backup your hidden service key, in case you want to be able to restore it, on another machine, on a newer Whonix-Gateway, after hdd failure, etc. You can find it here and you require root to access it.

<pre>
/var/lib/tor/hidden_service/private_key
</pre>

On your Whonix-Workstation:

Run the following commands to install lighttpd.

<pre>
sudo apt-get update
sudo apt-get install lighttpd
</pre>

Done.

'''Note''', that it may take up to 30 minutes (or so?) until a fresh .onion domain gets reachable.

'''Note''', accessing 127.0.0.1 {{Tor_Browser_Local_Connections}}.

=== Debugging ===
Check permissions.

<pre>ls -la /var/lib/tor/hidden_service/</pre>

In case you manually restored your hidden_service keys as root, Tor will fail to start. The folder must be owned by debian-tor. In that case, fix the permissions.

<pre>sudo chown debian-tor:debian-tor /var/lib/tor/hidden_service/</pre>
Note: Tor Browser will allow connections to ''127.0.0.1:80'' but not to ''10.152.152.11:80''.

In Whonix-Workstation, check if the service is available on 127.0.0.1:80.

<pre>## Circumventing Whonix uwt wget stream isolation wrapper.
/usr/bin/curl.anondist-orig 127.0.0.1:80</pre>

In Whonix-Workstation, check if the service is available on 10.152.152.11:80.

<pre>## Circumventing Whonix curl wget stream isolation wrapper.
/usr/bin/curl.anondist-orig 10.152.152.11:80</pre>

== Tips settings up any hidden service ==

Please test the example Hidden Webserver above first. It helps understanding this in general and will ease debugging.

Quoted from the Tor manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServiceDir DIRECTORY

Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate
directory. You may use this option multiple times to specify multiple services. DIRECTORY
must be an existing directory.</pre>
Quoted from the Tor manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServicePort VIRTPORT [TARGET]

Configure a virtual port VIRTPORT for a hidden service. You may use this option multiple
times; each time applies to the service using the most recent hiddenservicedir. By default,
this option maps the virtual port to the same port on 127.0.0.1 over TCP. You may override
the target port, address, or both by specifying a target of addr, port, or addr:port. You
may also have multiple lines with the same VIRTPORT: when a user connects to that VIRTPORT,
one of the TARGETs from those lines will be chosen at random.</pre>
Read the [[Security Guide]].

== Important Upstream Bugs ==
Connectivity bugs:

* [https://trac.torproject.org/projects/tor/ticket/3825 HS intro points overloaded with CREATE cells cause connectivity failures]
* [https://trac.torproject.org/projects/tor/ticket/8940#comment:15 Possible bug, if too many people try to access the same hidden service]

== Scalability ==
* [https://www.whonix.org/forum/index.php/topic,714.0.html whonix.org hidden service taken offline due to issues]

= Tor Hidden Services - ADVANCED =
== Hidden Services Security ==
'''Not Whonix specific! Talking about Tor in general.'''

How safe are Tor Hidden Services?

This is a difficult question. Therefore state relevant facts, quotes and links here.

* At time of writing there are no known attacks used in the wild constantly deanonymizing Tor hidden services.
* 80 bit name hash and RSA-1024 sized keys
* Quote Mike Perry {{Code|Tor core people}}<ref>https://www.torproject.org/about/corepeople.html.en</ref>): http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05418.html
* Quote Mike Perry: http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05462.html
* Also see, [https://blog.torproject.org/blog/hidden-services-need-some-love The Tor Project Blog: Hidden Services need some love].

== Hidden Service Authentication ==
By default Hidden Service names are known to the public as they are broadcast to Hidden Service directories. This information becomes sequestered in search crawlers allowing anyone to try and connect and probe you Hidden Server even if this wasn't your intention.

To set up a Hidden service in a private mode, only accessible by just you or additionally your trusted associates, there is a little known feature in Tor that allows this. 

This interesting feature is known as Hidden Services Authentication. <ref>http://tor.stackexchange.com/questions/219/how-to-use-hidden-service-authentication How to use Hidden Service Authentication?</ref><ref>https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/121-hidden-service-authentication.txt</ref>

According to the [https://www.torproject.org/docs/tor-manual.html.en Tor manual], there are two configuration options (i.e. things you put in your torrc):

'''HiddenServiceAuthorizeClient''' is the server side setting put in the Hidden Service's torrc file. This will generate a unique secret that is needed by clients in addition to the Hidden service .onion address in order to be allowed to connect to your service. Without it no one (not even the Hidden Service Directories) can derive your .onion address from the descriptors nor can they know the introduction points to your server and consequently will not be able to connect to you.

Edit torrc <pre>sudo nano edit /etc/tor/torrc</pre>

and add:

<pre>HiddenServiceAuthorizeClient auth-type client-name,client-name,â€¦</pre>



If configured, the hidden service is accessible for authorized clients only. The auth-type can either be 'basic' for a general-purpose authorization protocol or 'stealth' for a less scalable protocol that also hides service activity from unauthorized clients. Only clients that are listed here are authorized to access the hidden service. Valid client names are 1 to 16 characters long and only use characters in A-Za-z0-9+-_ (no spaces). If this option is set, the hidden service is not accessible for clients without authorization any more. Generated authorization data can be found in the hostname file. Clients need to put this authorization data in their configuration file using HidServAuth.


'''HidServAuth''' is the torrc setting used for the Tor running in client mode.  To connect you must provide the authentication cookie that was  generated in the previous step and shared with you out of band (preferably face-to-face or via OTR encrypted chat over Tor involving both parties):

<pre>
HidServAuth <onion-address> <auth-cookie>
</pre>


Note that you can generate a unique cookie for every individual or group you grant access to. This gives you the ability to revoke access if the need arises. Its an all or none rule for granting access to a hidden service. if you want to limit that on a subdomain level you are advised to implement it by compartmentalizing your services under different Hidden service addresses running on a Multiple Workstation setup.

== Notes about End-to-end security of Hidden Services ==

Hidden services are not really "end-to-end" encrypted, they encrypted only Tor to End. (or "Tor to Tor") The communication between the browser or server and Tor is sent in clear text. This doesn't really constitute a security issue, as localhost (or Workstation to Gateway on an isolated network), is supposed to be secure. But it has some security implications:

With hidden services alone, without TLS enabled, the adversary only needs to compromise Whonix-Gateway to get knowledge of the content of the connection and the clients identity/location. To compromise the content of the connection, the adversary only needs to compromise either the gateway or the workstation.

With hidden services, and TLS enabled, an adversary needs to compromise Whonix-Workstation to gain knowledge of the content of the connection. The adversary would have to compromise Whonix-Gateway as well, to gain knowledge of the client's identity/location.

It is possible to use hidden services and TLS at the same time, i.e. https://****************.onion. There are only a very few hidden services reachable over TLS. For example https://pad.riseup.net/ can be reached over https://5jp7xtmox6jyoqd5.onion/. But since this only offers benefits to users of Whonix (and other Tor gateway implementations), there is no demand. It would provide some nice defense in depth as it eliminates a single point of failure.

It would open the question, how would the certificate be verified?

That's simple for private sites, where server and clients know each other. They simply verify it over preshared secure channel, for example, a meeting.

And public hidden services? It is unlikely, that certificate authorities will give out certificates for .onion sites. Startssl.com declined, because .onion is no .gTLD, see [https://trac.torproject.org/projects/tor/ticket/6116 Bug #6116: apply for .onion gTLD at IANA]. Although you could try asking other certificate authorities, if they offer SSL certificates for people who can prove that they own a .onion domain. You can prove, that you have control over the domain by editing its contents on their request.

But CAs should not be relied on anyway. See chapter [[SSL]].

Hidden Services with Whonix are still safer than running Tor and the server software on the same host, because even when misconfigured, there can be, by design, no IP or DNS leaks.

== See Also ==
* [[Hosting_Location_Hidden_Services|Hosting Location Hidden Services]]
* [[Hidden_Services_Guides|Hidden Services Guides]]
* [[Hosting|Third Party Hosting Services]]

= References =
<references/>

{{Footer}}

[[Category:Documentation]]
</translate>
