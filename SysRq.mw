{{Header}}
{{#seo:
|description=HowTo: Use SysRq for System Recovery and to prevent Malware from Sniffing the Root Password.
|image=https://www.whonix.org/w/images/d/d2/Rsysr32.cleaned.jpg
}}
{{Title|
title=System Recovery using SysRq Key
}}

= Use Cases =

The SysRq or "Security Keys" ([https://en.wikipedia.org/wiki/Secure_attention_key SAK] key) function in Linux is equivalent to the well known Control-Alt-Delete (<code>Ctrl+Alt+Del</code>) function in Windows, otherwise referred to as the "three-finger salute". Debian documentation notes that SysRq combinations are useful for bypassing bad situations and gaining usable keyboard access, without stopping the system. <ref>https://www.debian.org/doc/manuals/debian-reference/ch09.en.html#_alt_sysrq_key</ref> In effect this provides insurance against system malfunctions due to support compiled in the Linux kernel -- pressing SysRq followed by the required key for a specific command "rescues" the system.

SysRq is handled directly by the kernel. Not by (a)getty, systemd or the X Window System.

<blockquote>Call oom_kill, which kills a process to alleviate an OOM condition</blockquote>

This is more effective than <code>Ctrl + C</code> or <code>kill -s sigkill</code>. When the whole machine appears frozen <code>Ctrl + C</code> often will not have any effect. SysRq has a higher chance of being processed by the kernel except if the kernel itself is locked up.

== System Recovery ==

[https://en.wikipedia.org/wiki/Magic_SysRq_key Wikipedia] notes:
<blockquote>The magic SysRq key is a key combination understood by the [https://en.wikipedia.org/wiki/Linux_kernel Linux kernel], which allows the user to perform various low-level commands regardless of the system's state. It is often used to recover from [https://en.wikipedia.org/wiki/Freeze_(computing) freezes], or to [https://en.wikipedia.org/wiki/Booting reboot] a computer without corrupting the [https://en.wikipedia.org/wiki/Filesystem filesystem]. Its effect is similar to the computer's hardware [https://en.wikipedia.org/wiki/Reset_button reset button] (or power switch) but with many more options and much more control.

This key combination provides access to powerful features for software development and disaster recovery. In this sense, it can be considered a form of [https://en.wikipedia.org/wiki/Escape_sequence escape sequence]. Principal among the offered commands are means to forcibly unmount file systems, kill processes, recover keyboard state, and write unwritten data to disk. With respect to these tasks, this feature serves as a tool of last resort.

The magic SysRq key cannot work under certain conditions, such as a [https://en.wikipedia.org/wiki/Kernel_panic kernel panic] or a hardware failure preventing the kernel from running properly.</blockquote>

In the {{project name}} case, magic SysRq keys are useful when the guest is unresponsive, especially in cases where VMs are running headless and a GUI console is not available for forcing them to shut off on the host.

== Malware ==
SysRq can be used to [[Login spoofing|defeat login spooking]] (malware masquerading as login prompt and stealing login passwords).

[https://www.kernel.org/doc/html/v4.14/admin-guide/sysrq.html#okay-so-what-can-i-use-them-for Quote Linux Kernel Documentation]:

<blockquote>Sak (Secure Access Key) is useful when you want to be sure there is no trojan program running at console which could grab your password when you would try to login. It will kill all programs on given console, thus letting you make sure that the login prompt you see is actually the one from init, not some trojan program.</blockquote>

= Enable SysRq = 

SysRq can be enabled temporarily or permanently.

For temporary functionality, run.

{{CodeSelect|code=
echo "1" {{!}} sudo tee /proc/sys/kernel/sysrq
}}

To permanently enable SysRq, run.

{{CodeSelect|code=
echo "kernel.sysrq = 1" {{!}} sudo tee -a /etc/sysctl.d/50_sysrq.conf
}}

After completing the temporary or permanent change, check that SysRq has been properly set.

{{CodeSelect|code=
cat /proc/sys/kernel/sysrq
}}

The output should show.

<pre>
1
</pre>

= Overview of Commands =

<blockquote>
SysRq : HELP : loglevel(0-9) reboot(b) crash(c) terminate-all-tasks(e) memory-full-oom-kill(f) kill-all-tasks(i) thaw-filesystems(j) sak(k) show-backtrace-all-active-cpus(l) show-memory-usage(m) nice-all-RT-tasks(n) poweroff(o) show-registers(p) show-all-timers(q) unraw(r) sync(s) show-task-states(t) unmount(u) force-fb(V) show-blocked-tasks(w) dump-ftrace-buffer(z)
</blockquote>

* <code>loglevel(0-9)</code>s
* <code>reboot(b)</code>
* <code>crash(c)</code>
* <code>terminate-all-tasks(e)</code>
* <code>memory-full-oom-kill(f)</code>
* <code>kill-all-tasks(i)</code>
* <code>thaw-filesystems(j)</code>
* <code>sak(k)</code>
* <code>show-backtrace-all-active-cpus(l)</code>
* <code>show-memory-usage(m)</code>
* <code>nice-all-RT-tasks(n)</code>
* <code>poweroff(o)</code>
* <code>show-registers(p)</code>
* <code>show-all-timers(q)</code>
* <code>unraw(r)</code>
* <code>sync(s)</code>
* <code>show-task-states(t)</code>
* <code>unmount(u)</code>
* <code>force-fb(V)</code>
* <code>show-blocked-tasks(w)</code>
* <code>dump-ftrace-buffer(z)</code>

= Usage =

SysRq can also be used by writing to <code>/proc/sysrq-trigger</code>.

{{CodeSelect|code=
sudo -u root bash
}}

{{CodeSelect|code=
echo h > /proc/sysrq-trigger
}}

= Development =
* [https://superuser.com/questions/375816/how-to-check-which-sysrq-functions-are-enabled How to check which SysRq functions are enabled?]
* sysctl set to <code>kernel.sysrq=132</code> at time of writing.
** https://github.com/Whonix/security-misc/blob/master/etc/sysctl.d/30_security-misc.conf#L127
* https://fedoraproject.org/wiki/QA/Sysrq

== Security Discussion ==
[https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/20 SysRq Security concern raised by madaidan]:

<blockquote>Being able to run a bunch of commands that would normally require root (such as killing every process, remounting all filesystems read-only etc.) as an unprivileged user doesn’t look very good. Sounds like a possible privilege escalation hole and/or a feature that can easily be abused.</blockquote>

On the other hand, <code>SysRq</code> + <code>k</code> also dubbed Secure Access Key. Therefore SysRq is not completely disabled without further consideration.

Can a user only kill its own processes with it or any process?

What if an unprivileged user kills a very important process that is usually only accessible by root?

[https://www.jwz.org/xscreensaver/faq.html Quote screensaver FAQ]:

<blockquote>Backdoor #3: Alt-SysRq-F.

    This is the Linux kernel "OOM-killer" keystroke. It shoots down random long-running programs of its choosing, and so might might target and kill xscreensaver, and there's no way for xscreensaver to protect itself from that. You can disable it globally with: sudo 'echo 176 > /proc/sys/kernel/sysrq'

    (As of version 5.41, if xscreensaver is setuid, and you are running Linux 2.6.37 or newer, xscreensaver attempts to request that the kernel's out-of-memory assassin not randomly unlock the screen on you, but it's only a request.)</blockquote>

Related: [https://forums.whonix.org/t/screen-locker-in-security-can-we-disable-these-at-least-4-backdoors/8128 Screen Locker (In)Security - Can we disable these at least 4 backdoors?]

Quote https://www.kernel.org/doc/html/v4.14/admin-guide/sysrq.html

<blockquote>Note that the value of <code>/proc/sys/kernel/sysrq</code> influences only the invocation via a keyboard.</blockquote>

Quote https://www.kernel.org/doc/html/v4.14/admin-guide/sysrq.html

<blockquote>Invocation of any operation via <code>/proc/sysrq-trigger</code> is always allowed (by a user with admin privileges).</blockquote>

Could any compromised non-root user generate the keyboard event for SysRq and thereby use SysRq? [https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/22 Quote]:

<blockquote>Things such as xdotool won’t work as the SysRq key isn’t handled by Xorg and things like /dev/uinput or /proc/sysrq-trigger requires root access already.

It seems like SysRq [key] requires a local keyboard to be connected.</blockquote>

== Virtual Console Handling ==
Would be who handles “alt + ctrl + F1”?

* [https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/25 Not (a)getty.]
* https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079/26

== Development Discussion ==
[https://forums.whonix.org/t/sysrq-magic-sysrq-key/8079 Development Discussion]

= See Also =
* [[KVM#Magic_SysRq_Keys|Whonix KVM SysRq]]
* [https://en.wikipedia.org/wiki/Magic_SysRq_key Wikipedia Magic SysRq key]

= Footnotes =
{{reflist|close=1}}
[[Category:Documentation]]
{{Footer}}
