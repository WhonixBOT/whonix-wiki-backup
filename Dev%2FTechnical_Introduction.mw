{{Header}}
{{#seo:
|description=Introduction into Whonix's Technical Design.
}}
== Introduction ==

Whonix aims to be safer than Tor alone. The main goal is, that no one can find out the user's IP and location.

The basic idea is, that all applications are untrustworthy. No application must be able to obtain the user's real external IP. Whonix ensures that applications can only connect through Tor. Direct connections (leaks) must be impossible. This is the only way we know of, that can reliably protect your anonymity from client application vulnerabilities and IP/DNS and [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO#Protocolleaks protocol leaks].<sup>10</sup>

Whonix consists of two machines, which are connected through an isolated network. One machine acts as the client or ''Whonix-Workstation'', the other as a proxy or ''Whonix-Gateway'', which will route all of the Whonix-Workstation's traffic through Tor. This setup can be implemented either through virtualization and/or Physical Isolation (explained below).

{{TorifiedGateway}}

The '''Whonix Concept''' (see below) is agnostic about everything, the anonymizer, platform, etc. See '''Whonix Framework''' below.

'''Whonix Example Implementation''': Anonymity setup built around '''Tor''', two virtual machines using [[Qubes]], [[KVM]], [[VirtualBox]] or [[Physical Isolation|physical isolation]] and '''Debian GNU/Linux'''. Whonix can be installed on every [[Supported Platforms|supported platform]]. (Supports Windows, OS X, Linux, BSD and Solaris.)

Physical Isolation describes installing Whonix-Gateway and Whonix-Workstation on two different pieces of hardware. It is more secure than VirtualBox / KVM virtual machines alone, requires more physical space, and hardware and electricity costs are higher. Keep in mind that you don't need very powerful dedicated servers or desktops. Unfortunately, using [[Qubes-Whonix]] with physical isolation is [[unsupported]]. For more information, see [[Physical Isolation]].

See [[Design]] for Technical Design and security of Whonix. For security introduction, see below.

The listed [[Features]], advantages and disadvantages shall give you an overview, what Whonix is useful for, what Whonix can do for you, and what not.

==Information Leaks==

It is commonly understood that leaks should be blocked in order to maintain anonymity when on-line, but most do not know much more than that. This chapter will consider where information leaks originate from, and more importantly, how Whonix can block these in both theory and practice. Before proceeding further, it is necessary to clearly define what constitutes an information leak. 

The layperson might define information leaks in terms of irretrievably losing data, or perhaps even describe malfunctioning RAM modules which leak data. Although both of these occurrences can cause serious problems, in generalized terms they fall outside the accepted definition. The term "information leak" actually refers to an event that causes the release of secure or private information to an untrusted party or environment <ref name=leaks>[https://en.wikipedia.org/wiki/Information_leakage https://en.wikipedia.org/wiki/Information_leakage]</ref> <ref name=data-breach>[https://en.wikipedia.org/wiki/Data_breach https://en.wikipedia.org/wiki/Data_breach]</ref>. For instance, this could be company trade secrets which might cause immeasurable harm if they fell into a competitor's hands, or personal information that could deanonymize an individual such as a whistleblower or journalist.

Common wisdom dictates that a main tenet of system security involves the prevention of malicious code like worms, Trojans or viruses from acquiring a persistent foothold. However, system security, privacy and anonymity are equally dependent upon sensitive information or data not escaping the trusted environment, which is protected and under the user's control. This is a challenging task with a multitude of elements to be considered. The numerous applications and background processes running on a system at any given time exacerbate the difficulties encountered. Further complicating matters is the need for the system, with all of its applications and programs, to be simple to learn and easy to use. A secure machine is useless if it is impossible to use except for the most knowledgeable and tech-savvy enthusiasts. Additionally, the information that is considered "sensitive" must be clearly defined.

== Sensitive Data ==

In the context of privacy and anonymity, sensitive information is any information that can be used to identify an individual. An inexhaustive list of sensitive information includes:

*[https://en.wikipedia.org/wiki/Serial_number Hardware serials] - can be used to uniquely identify a computer and in turn be linked to the person who purchased or was using it.
*[https://www.dnsleaktest.com/what-is-a-dns-leak.html DNS leak] - if DNS queries are leaking, an ISP or any on-path eavesdropper can log the sites that are visited.<ref name=DNS>[https://en.wikipedia.org/wiki/DNS_leak|https://en.wikipedia.org/wiki/DNS_leak]</ref>
*[https://browserleaks.com/ip IP leaks] - a user's external (ISP-facing) IP address can be used to identify an individual as well as their location.
*[https://digitalguardian.com/blog/what-personally-identifiable-information Personally identifiable information] (PII) - information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context.<ref name=IPP>[https://en.wikipedia.org/wiki/Personally_identifiable_information https://en.wikipedia.org/wiki/Personally_identifiable_information]</ref>.

== Origin of Leaks ==

Even if sensitive data is only a very small proportion of the total, it is extremely difficult to block all available leak avenues. Information leaks have several primary causes:
       
* '''Misbehaving applications''' ([https://en.wikipedia.org/wiki/Software_bug buggy software]) - programs that do not function as intended, leading directly to data leakage or causing other applications they interact with to leak.
        
* '''Deliberate''' ([https://en.wikipedia.org/wiki/Backdoor_(computing) Backdoors]) - a backdoor is a method, often secret, of bypassing normal authentication or encryption in a computer system, product, or embedded device (like a home router), or its embodiment which forms part of a cryptosystem, an algorithm, a chipset, or a "homunculus computer".<ref name=backdoor>[https://en.wikipedia.org/wiki/Backdoor_(computing) https://en.wikipedia.org/wiki/Backdoor_(computing)</ref>  An example of a backdoor is the U.S government's [https://en.wikipedia.org/wiki/Clipper_chip Clipper chip] which was promoted as a device to secure voice and data messages, but also contained a secret built-in back-door. Also noteworthy is the Tailored Access Operations ([https://en.wikipedia.org/wiki/Tailored_Access_Operations TAO]) group, which intercept routers, servers and other network hardware during transit to install covert firmware implants before they are delivered.<ref name=TAO>[https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting]</ref>
      
* '''Mis-configured applications''' - some applications can leak sensitive information if configured improperly. For instance, VPN clients can [https://en.wikipedia.org/wiki/DNS_leak leak DNS queries]. Other applications that can be used to block information leaks, such as [https://en.wikipedia.org/wiki/Iptables iptables], may be ineffective if configured improperly.

* '''Software vulnerability''' - a weakness which allows an adversary to reduce a system's integrity, availability, authenticity, non-repudiation and confidentiality of user data.<ref name=vulnerability>[https://en.wikipedia.org/wiki/Vulnerability_(computing) https://en.wikipedia.org/wiki/Vulnerability_(computing)]</ref><ref name=assurance>[https://en.wikipedia.org/wiki/Information_assurance|https://en.wikipedia.org/wiki/Information_assurance]</ref>
== Whonix Framework ==

The '''Whonix Concept''' is agnostic about everything. With some development effort you can replace any component. The Whonix developers would like to support each and any use case, but due to limited amount of developers this is impossible and we focus on the '''Whonix Example Implementation'''.

The Tor network is Whonix's official and best supported anonymizing network. Whonix can also potentially and optionally use [[OtherAnonymizingNetworks|other anonymizing networks]] (Such as JonDo, I2P, Freenet, RetroShare), either in addition ([[Tunnels|tunneled]] through Tor) or as a replacement for Tor. See the article for more information.

You can also avoid using virtualization by using [[Physical Isolation]] without any virtualization, although that is not recommended, see [[Comparison of different Whonix variantsâ€Ž]] for more information.

It is possible to use other virtualization platforms than VirtualBox, e.g. [[Qubes]] (which is based on XEN), [[VMware]], [[KVM]], XEN, [[QEMU]], Bochs, etc. (See [[Dev/Other Virtualization Platforms]].).

Other operating systems (e.g. Windows; *nix; BSD; etc.) can potentially be used as host and/or guest operating system. See the [[Other Operating Systems]] for more information.

== Whonix Concept ==

Whonix is an [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO/IsolatingProxy Isolating Proxy] with an additional [https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy Transparent Proxy], which can be optionally disabled. (See [[Stream Isolation]]).

== Security Overview ==

=== In layman's terms ===
Shut up or put up! Is Whonix safe?

Whonix uses a security by isolation model to counter the ever-present threat of information leaks. This model effectively blocks sensitive information from escaping the trusted user environment and is composed of four unique, but essential components. 
  
*  '''Hypervisor''' - also referred to as a virtual machine monitor. This is software, firmware, or hardware that creates and runs [https://en.wikipedia.org/wiki/Virtual_machine virtual machines]. Several elements are involved:
** The computer on which the hypervisor runs is called the host. 
** The hypervisor in turn runs virtual machines which are called guest machines. The hypervisor provides hardware virtualization which hides the characteristics of a computing platform from the user, instead presenting an abstract computing platform. 
** This platform virtualization -- creation of a virtual machine that acts like a real computer -- is performed on a given hardware platform by host software (a control program). 
** The host software creates a simulated computer environment; a virtual machine (VM), for its guest software. 
** The guest software executes as if it were running directly on the physical hardware. 
** Due to these factors, Whonix is able to isolate the the virtual machines from the actual computer hardware. This prevents the virtual machines from accessing sensitive information on the host OS or from each other.<ref name=hypervisor>[https://en.wikipedia.org/wiki/Hypervisor https://en.wikipedia.org/wiki/Hypervisor]</ref><ref name=virt_platform>[https://en.wikipedia.org/wiki/Platform_virtualization https://en.wikipedia.org/wiki/Platform_virtualization]</ref>


*  '''Whonix-Gateway''' - the first of two VMs that make up Whonix. The function of Whonix-Gateway is to run [[Tor]] processes and force all traffic through the Tor network. This is done through a modest application of [https://en.wikipedia.org/wiki/Iptables iptables], which blocks network traffic from passing through any other channel besides the dedicated Tor gateway. As mentioned earlier, the hypervisor enforces the isolation between the two VMs used in Whonix. Consequently, any [[malware]] that might infect Whonix-Workstation (the second VM) will not compromise Whonix-Gateway or the host.


*  '''Whonix-Workstation''' - the second of two VMs, the Workstation is responsible for running user applications. This includes any pre-installed or custom-installed user applications. Since Whonix-Workstation is isolated from both the Whonix-Gateway and host OS, if an application misbehaves or is exploited by an adversary, this will be contained in the isolated Whonix-Workstation. Unless an advanced adversary is able to break out of the VM, there is no way for hardware serials or the externally-facing IP address to leak; Whonix-Workstation is simply unaware of sensitive information. Moreover, DNS leaks are eliminated since all DNS requests are sent over the Tor network via the Whonix-Gateway.


* '''Tor''' - this is an abbreviation for "The Onion Router". [https://www.torproject.org Tor] is an anonymity network run by volunteers around the world which helps users defend against traffic analysis, network surveillance and privacy threats. Tor protects users by bouncing their communications around a distributed network of relays.<ref name=Tor>[https://en.wikipedia.org/wiki/Tor_(anonymity_network) https://en.wikipedia.org/wiki/Tor_(anonymity_network)]</ref>

=== Hypervisor-enforced Boundaries ===

Each of the above components play an essential role in security and the hypervisor is considered the backbone of this security model. A suitably analogy for hypervisor functioning is virtual reality video games. Players don a set of virtual reality goggles which provide a virtual representation of their environment. Players can interact with this virtual environment as if it was real. However, in contrast to reality, virtual environments have artificial boundaries set by the game that players cannot traverse; virtual walls prevent any form circumvention regardless of the effort expended.

These virtual boundaries provide a metaphor for the Whonix-Gateway and Whonix-Workstation VMs in Whonix, which remain isolated from one another and from the host OS. The hypervisor creates virtual hardware -- virtual HDDs / SSDs and virtual RAM -- for each of the VMs to interact with. Critically, the VMs do not realize that the hardware is virtualized. If a malicious application were to compromise a VM like the Whonix-Workstion, its awareness of the environment and range of movement is defined by the virtual boundaries set by the hypervisor. <ref>Unless the exploit is sufficiently advanced to create a breakout scenario, or is programmed to detect if it is running in a virtualized environment.</ref> 

Generally speaking, the malicious application can only see the virtual hardware (which it cannot differentiate from the actual hardware), along with other applications running in Whonix-Workstation, but nothing else. The only method of egress is through the Whonix-Gateway. Readers may ponder what prevents a malicious application from compromising the Whonix-Gateway VM, since this is completely feasible in a non-virtualized environment. The reason is the hypervisor-enforced boundaries that isolate both Whonix VMs from one another. None of the applications running in Whonix-Workstation directly interact with Whonix-Gateway. Although traffic from Whonix-Workstion passes through Whonix-Gateway, the latter is simply a gateway that forces all traffic through the Tor network and blocks everything else. Furthermore, it is doubtful that a malicious application in Whonix-Workstation is even aware of the existence of the Whonix-Gateway. 

It is in the nature of security related software, that there is no 100% safety. Believe it or not, we use it ourselves and we keep maintaining and developing it. We believe that Whonix is safer than other tools in some aspects, threat models, and use cases. There is detailed reasoning for such claims on the Whonix Homepage.

If you are more paranoid or have higher security needs, read everything, full documentation and full technical design, you'll learn about physical isolation and build Whonix from source code and so on.

And no, Whonix [https://sourceforge.net/p/whonix/featureblog/2013/01/another-statement-on-wakingtimescom-news-article-how-to-evade-government-surveillance-and-stay-anonymous-online---mailed-wakingtimescom/ does '''not''' claim] to protect from very powerful adversaries, to be a perfectly secure system, to provide strong anonymity, or to provide protection from technically advanced surveillance and similar.

See also [[Warning#Whonix_is_a_work_in_progress|Whonix is a work in progress]].

At first glance this site may create the impression that Whonix is completely insecure and everything is a lost cause. We are upfront with things we could do better and we are still working on and try to consider all possibilities and document all thinkable and future threats. You must judge for your own which risks are acceptable for your use cases.

=== With more technical terms ===

It is difficult to write a summary of Whonix security features. Both anonymity and security consist of so many different aspects. That's why there is lots of [[Documentation]] and the whole Technical [[Design]].

The Technical [[Design]] intends to document security philosophy, design, goals and current shortcomings of Whonix.

This chapter is only a short introduction. Please read the full [[Design]].

Whonix follows the principle of security by isolation. We know that making our currently used systems secure is a lost cause. They are too complex and too large to be trustworthy and verifiably free of any bugs. Whonix can't solve this but it tries to minimize attack surfaces and limit what danger exploitable bugs in more exposed parts can do, one primary danger specific to Tor is the danger of exposing the public IP address of a system. Whonix isolates client applications inside the Whonix-Workstation from discovering the external IP address. Specifically, Whonix is designed to prevent direct detection of the IP (not more!) even if an adversary has unrestricted access to the Whonix-Workstation.

Once there is a vulnerability found in Tor (ex: exploiting Tor's ports) or a successful attack against Tor, Whonix fails.

Same goes for iptables. Whonix is a setup based on Linux, iptables, Tor, etc. If any of the underlying projects has a vulnerability, which we can not rule out, of course, Whonix will fail as well.

Whonix protects users from information leaks that stem from leaky applications, exploitable software bugs and many other sources. Even so, Whonix has [[Advanced Deanonymization Attacks| limited countermeasures]] and protections against most classes of [[Advanced Security Guide#Side Channel Attacks|side-channel attacks]]. At the time of writing, there were two recent disclosures of side-channel attacks that would affect Whonix: Meltdown and Spectre. <ref>Although software patches were subsequently released for both attacks.</ref> In particular, Spectre is "...not easy to fix, it will haunt us for quite some time."<ref name=spec-fix>[https://spectreattack.com/ https://spectreattack.com/]</ref> 

In summary, Whonix does '''not''' claim to be a perfectly secure system or able to provide anonymity if one faces a very powerful adversary, and so on.

There are [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO#OverviewaboutdifferentmethodsforTorification three ways to torify]. Read the link for a comparison of the security.

Whonix-Workstation has no access to the internet without going through Tor. You can look into our setup. It is all Open Source and well documented.

Whonix uses multiple security layers.

# IP-forwarding is disabled.
# IPv6 is disabled.
# The firewall fails "closed": when Tor is disabled, loses connection, or the Whonix-Gateway crashes, no network connections are possible.
# Iptables redirects any traffic from Whonix-Workstation to Tor's ports. Local network connections are dropped. No leaks are possible, assuming the TCB is trustworthy.
# Applications are configured correctly using latest suggestions (correct application and proxy and other privacy settings, [[Stream Isolation]]).
# Firewall rules are enforced and prevent accessing the internet directly, thus leaks are prevented in case some application leaks.
# Optionally, [[Physical Isolation]] is documented.
# [[Protocol-Leak-Protection and Fingerprinting-Protection]].
# [[TimeSync|Whonix's Secure And Distributed Time Synchronization Mechanism]].
# Check.torproject.org is checked (see [[whonixcheck]]) anyway, even though we are sure, that there are no leaks.
# Built in update notification for operating system updates, Tor Browser version and Whonix version (see [[whonixcheck]]).
# Comprehensive, growing [[Documentation]].
# Comprehensive, growing [[Design|Technical Design]].
# Openness about weaknesses, shortcomings, etc.
# Cryptographically signed binary builds and git source code tags.
# ...

Whonix was tested for leaks, see [[Dev/Leak Tests]]. All went negative. Additionally, Skype, which is known for it is ability to punch through firewalls, was not able to establish non-torified connections. Also BitTorrent doesn't leak the IP (there is an online bittorrent leak tester), which of course should never be used through Tor (because it chokes Tor nodes), but for leak testing it was welcome. Right now we don't know of any leak tests which leaks the real IP.

Whonix is safe (not affected) from [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO#Protocolleaks Protocol leaks], like this the ones listed on [[Security in Real World]], Skype, Flash or BitTorrent. This already justifies to use a "no non-Tor connections possible" approach.

When you go ahead now, and ask in a hacker forum, they probably won't spread a simple method to get the real IP of Whonix-Workstation. On the other hand, if you run an intelligence service and have 100.000 $ left over, you can announce something like "find a new exploit in Tor's SocksPort and get 100.000 $". Qualified people start looking into it and might find something.

= See Also =
* [[Comparison with Others|Comparison of Whonix, Tails, Tor Browser, TorVM and corridor]]

= Footnotes =
<references />

{{Footer}}

[[Category:Design]]
