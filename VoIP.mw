{{Header}}
{{#seo:
|description=Anonymous Voice over IP (VOIP). Encrypted anonymous phone calls using the Tor Anonymity Network.
}}

= Voice over IP =
== Introduction ==
The Voice over IP Introduction chapter and instructions about mumble voice chat are finished. Instructions for other Voip clients aren't finished yet, but this shouldn't stop you from using mumble or experimenting with other clients. Please test and leave feedback!

Anonymizing Voice over IP metadata is somewhat difficult, but possible. It's not so much about hiding the IP, which is easy with Whonix, it's about voice recognition and slow Tor network speed (latency). Pseudonymous use or hidden voice communication with known contacts is possible. It depends on your threat model.

For people behind Tor, who know each other, talking to each other, it is possible to hide the fact that they are talking with each other, from their ISP, government, exit relays, man-in-the-middle, etc. That wouldn't be anonymous, because they know each other.

You can't anonymously use your own voice and whistleblow over Voip, be a snitch or whatever. Voice gets recorded and voice recognition works well. When you are having a phone call later over a non anonymous connection (which almost everyone had at least once in its life, so everyone supplied a sample of their voice and name), they can correlate the two identities. You would have to use a voice scrambler and how good that works is a whole new field for research, which is outside the scope of Whonix.

You could type and let a artificial voice speak (like in anonymous videos), that could work. But is that the point? You better write a mail then.

It's also recommended against to voice chat with other anonymous people. (Like you can talk in a forum.) You don't know who you are talking to. That voice also could be correlated later, putting aside voice scrambler, or artificial voice, which wouldn't make sense.

If you are not calling from .onion to .onion (which delegates encryption to Tor), you should use a Voip client supporting encryption, such as ZRTP<ref>https://en.wikipedia.org/wiki/ZRTP</ref>. You'll find recommendations later below in the clients section.

Communicating via a clearnet VoIP server is not possible at the moment as SIP based clients all use UDP with a few exceptions. However, a viable candidate is Jitsi. Their 2014 GSOC project this year is concentrating on creating XMPP Jingle based VOIP server nodes that uses TCP instead of UDP for the censorship-prone aspects of UDP that make it vulnerable.

Other than the things said above, adrelanos doesn't expect any additional anonymity/security problems. It's less tested, so as for performance and voice quality, just try it and see yourself and please leave feedback.

Please don't expect phone calls over Tor can't to be as convenient as phone calls over ordinary networks. This is because traffic is routed through the Tor network

Push to talk will always work however, which is more like using walkie-talkie<ref>https://en.wikipedia.org/wiki/Walkie-talkie</ref>,  push-to-talk<ref>https://en.wikipedia.org/wiki/Push-to-talk</ref>.

Useful advice has been given by guardianproject.info. They recommend to use prowords<ref>http://en.wikipedia.org/wiki/Procedure_word</ref>. Acknowledge the end of transmission (your speech, your sentence, what you just said) with the word "Roger". Once your calling partner hears "Roger", it knows, it's safe to answer and also terminate the answer with "Roger" or "Out" when leaving the conversation.

== Voip Server ==

You most likely still require a Voip server. If no one of your group is interested in configuring a hidden Voip server, you could use a free one on clearnet. Latency is possibly a bit better (due to using clearnet).

If the Voip ID gets anonymously registered, i.e. if no personal data is required for signing up, everyone only and always connects over Tor, never connected or will ever connect without Tor, and all calls are encrypted and you won't talk to strangers, I don't see what even a malicious server could do. <ref>Apart from trying to [https://en.wikipedia.org/wiki/Exploit_(computer_security) exploit] random Tor users.</ref>

Note that the mentioned relative safety is only present when the clients are exchanging _all_ of their traffic encrypted _and_ _all_ of their traffic via the server. Most VoIP programs go out of their way to try to talk to each other directly. As of today (April 2014) there is no known program capable of using public VoIP servers together with TCP/Tor.

== Voip Clients ==
==== linphone ====
===== Introduction =====
Linphone is one of the most feature-rich Free Software clients available, second only to Jitsi in that respect, but second to none is stability and performance from testing. It can also support conferencing (audio only as of 2014).<ref>http://www.linphone.org/docs/liblinphone/group__conferencing.html</ref> Additionally it has fully developed clients for all desktop and mobile operating systems.

Should an Android port of Onioncat ever become a reality by the Guardian Project, Linphone can be used for anonymous VOIP between all combinations of device form factors.

===== Setup with Whonix =====
Technically, only one member of the chat party needs to configure a Tor Hidden Service (be a callee). Others can run Onioncat in 'client' only mode (be ca caller). 

Bidirectional communication can only be established after the client party (caller) connects to the one running a hidden service 'server' mode (callee), because the latter can accept incoming connections while the former cannot.

{| class="wikitable" style="background-color:#fff;text-align:center"
|- style="background-color: #f9f9f9"
| || callee || caller
|-
| Can make outgoing calls
| {{Yes}}
| {{Yes}}
|-
| Can initially receive incoming calls
| {{Yes}}
| {{No}}
|-
| Needs to host a Tor hidden service
| {{Yes}}
| {{No}}
|-
| Difficulty setup
| style="background-color: {{Yellow}}"| medium
| style="background-color: {{Green}}"| easy
|}

===== Setup as Both, Callee or Caller =====
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
You only have to read this, if you want to use linphone as both, callee or caller. As a caller, you can only make outgoing calls. As a callee (that includes ability of being a caller), you can make outgoing calls and receive incoming calls. Only one of both calling parters has to follow these instructions. However, it doesn't matter if both calling partners follow the following instructions.
If you are interested, click on Expand on the right. 
<div class="mw-collapsible-content">
<u>On your Whonix-Gateway.</u>

If you want to read and introduction about hidden services and to learn about about hidden service security, see [[Hidden Services]].

If you also want to run a hidden web server on the same .onion domain (nice for testing and learning Hidden Services basics), see [[Hidden Services]].

Open your {{Code2|/etc/tor/torrc}}.

<pre>
sudo nano /etc/tor/torrc
</pre>

Add. <ref>Arbitrary choice of port to avoid conflicts with custom onioncat setups.</ref>

<pre>
HiddenServiceDir /var/lib/tor/linphone_service/
HiddenServicePort 64739 192.168.0.11:64739
</pre>

Reload Tor.

<pre>
sudo service tor reload
</pre>

Reminder: To get your hidden service url.

<pre>
sudo cat /var/lib/tor/linphone_service/hostname
</pre>

Reminder: Backup your hidden service key, in case you want to be able to restore it, on another machine, on a newer Whonix-Gateway, after hdd failure, etc. You can find it here and need sudo to access it.

<pre>
/var/lib/tor/linphone_service/private_key
</pre>

<u>On your Whonix-Workstation.</u>

Update your package lists

<pre>
sudo apt-get update
</pre>

Install onioncat and linphone.

<pre>
sudo apt-get install onioncat linphone
</pre>

Start onioncat. Replace {{Code|address.onion}} with your actual hidden service url from above.

<pre>
sudo ocat address.onion -U -l 192.168.0.11:64739
</pre>

As of onioncat r555 (only applies to Jessie onwards) onioncat starts in unidirection 'client' mode by default. To accept incoming connections '''-U''' must be used. Mutual authentication is also available in this newer version which is needed to ensure that the identities of all endpoints engaged in a transaction are verified. <ref>http://manpages.debian.org/cgi-bin/man.cgi?query=ocat&apropos=0&sektion=0&manpath=Debian+testing+jessie&format=html&locale=en</ref>

Find out your onioncat IPv6 address.

<pre>
ip addr show dev tun0 | sed -e's/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d'
</pre>

Open Linphone settings and select IPv6. Apply and restart Linphone.
</div>
</div>

===== Setup only as Caller =====
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
You only have to read this, if you want to use linphone caller only. As a caller, you can only make outgoing calls. Only one of both calling parters can follow these instructions. If both calling partners would follow these instructions, they won't be able to call each other.
If you are interested, click on Expand on the right. 
<div class="mw-collapsible-content">
<u>On your Whonix-Workstation.</u>

Update your package lists

<pre>
sudo apt-get update
</pre>

Install onioncat and linphone.

<pre>
sudo apt-get install onioncat linphone
</pre>

Start onioncat.

<pre>sudo ocat -R</pre>

Open Linphone settings and select IPv6. Apply and restart Linphone.
</div>
</div>

===== Calling =====
<u>On your Whonix-Workstation.</u>

At this point you should have exchanged IPv6 addresses of the callee. To call someone put in the call box. You can keep {{Code|user}}. Must use brackets. Replace {{Code|onioncat IPv6 address}} with the actual IPv6 of your calling partner.

<pre>
user@[onioncat ipv6 address]
</pre>

===== Debugging =====
<u>On your Whonix-Workstation.</u>

To terminate onionat you could use.

<pre>
sudo kill -sigint $(pgrep ocat)
</pre>

===== Miscellaneous =====
To make Onioncat to autostart with the system using the parameters listed above.
editing its configuration file:
<pre>sudo nano /etc/default/onioncat</pre>

Enable the autostart comment by removing '#':
<pre>ENABLED=yes</pre>

Add your settings:
<pre>DAEMON_OPTS="Paramters go here"</pre>

===== Credits =====
Credits go to [https://www.whonix.org/forum/index.php?action=profile;u=87 HulaHoop] for researching how to use Linphone with Tor for sharing instructions in [https://www.whonix.org/forum/index.php/topic,407.msg3360.html#msg3360 Whonix User Forum].

==== Jitsi ====

Jacob Appelbaum (Tor researcher) recommends<ref>https://jitsi.org/Main/News</ref> Jitsi<ref>https://jitsi.org/</ref> (this applies if _not_ using Tor). It supports OTR encryption and ZRTP and is available in Debian Testing. 

Jitsi supports push to talk.

Unfortunately it is not usable with Whonix, because it does not support TCP for audio/video at the moment of this writing (April 2014). As a consequence it _does_ expose the ip numbers and will not be able to connect either from or to Whonix.

'''TODO''': write a guide on how to connect to a free public server, having a secure ZRTP encrypted conversation with someone using the same client (note: impossible as of April 2014 without revealing the ip numbers of the corresponding parties to both eavesdroppers and the server).

==== sflphone ====

Nathan Freitas (Tor Orbot developer) likes<ref>https://lists.torproject.org/pipermail/tor-talk/2013-February/027204.html</ref> sflphone<ref>http://sflphone.org/</ref>. Can be installed from Debian package sources.

It does not support OTR. You would have to keep that in mind and use another way to exchange encrypted text. This isn't a reason, not to use it, if you are aware of that.

'''TODO''': research, does sflphone support push to talk?

'''TODO''': write a guide how to connect to a free public server, having a secure ZRTP encrypted conversation with someone using the same client.

==== mumble ====

===== Introduction =====

mumble<ref>http://mumble.sourceforge.net/</ref>

* Looks a bit like Team Speak without its disadvantages.
* It's Open Source.
* And supports client to server encryption.<ref>http://mumble.sourceforge.net/FAQ/English#Is_Mumble_encrypted.3F</ref>
* Supports push to talk.<ref>http://www.mumble.com/support/mumble-server-push-to-talk.php</ref>
* You can (and must) force TCP mode<ref>http://en.kioskea.net/faq/26187-mumble-force-tcp-mode</ref>, because the Tor network does not support UDP yet.
* One has to act as server.
* Everyone else can act as client.
* If the server admin runs the server on its local machine and also wants to connect to the server, the admin should connect locally to the server, i.e. to 127.0.0.1 and not the hidden service domain to have faster connection.
* For group chats you have to consider, that there is no end-to-end encryption and once the server acts malicious, all conversions are unsafe. However, if two people use mumble just to talk to each other this doesn't matter and you could safely do that with mumble.
* When one of the two communication partners hosts a mumble server as Tor hidden service and the other one connects over Tor, encryption is already provided by Tor. There are different ways to achieve security. In this case, setting a server password (explained below), should be sufficient. <font size=-3>Mumble's own encryption isn't required. Alternatively, feel free to learn about mumble certificates for defense in depth, channel passwords instead of server password and so on.</font>

===== Mumble Server Instructions =====
If you want to read and introduction about hidden services and to learn about about hidden service security, see [[Hidden Services]].

If you also want to run a hidden web server on the same .onion domain (nice for testing and learning Hidden Services basics), see [[Hidden Services]].

On Whonix-Gateway.

Open your {{Code2|/etc/tor/torrc}}.

<pre>sudo nano /etc/tor/torrc</pre>

Add.

<pre>
HiddenServiceDir /var/lib/tor/mumble_service/
HiddenServicePort 64738 192.168.0.11:64738
</pre>

Reload Tor.

<pre>
sudo service tor reload
</pre>

Reminder: To get your hidden service url.

<pre>
sudo cat /var/lib/tor/mumble_service/hostname
</pre>

Reminder: Backup your hidden service key, in case you want to be able to restore it, on another machine, on a newer Whonix-Gateway, after hdd failure, etc. You can find it here and need sudo to access it.

<pre>
/var/lib/tor/hidden_service/private_key
</pre>

On Whonix-Workstation.

To host a mumble server, mumble-server from wheezy-backports.

TODO: Explain how to enable wheezy-backports. We need a template for that.

Update package lists.

<pre>
sudo apt-get update
</pre>

Install.

<pre>
sudo apt-get install -t wheezy-backports mumble-server
</pre>

Configure the server.

<pre>
sudo dpkg-reconfigure mumble-server
</pre>

The following questions...

* Autostart, better yes. Otherwise you would have to "sudo service mumble-server start", which didn't work for me.
* Higher priority? Yes.
* Password: choose a secure password.

There is also an upstream [http://mumble.sourceforge.net/Running_Murmur Murmur], i.e. mumble server guide. The upstream guide does not consider hidden services, that's the part already described here. For any other questions regarding the server setup, you can also refer to the upstream documentation.

Set a server password. Open ''/etc/mumble-server.ini''.

<pre>
kdesudo kwrite /etc/mumble-server.ini
</pre>

Search for "''serverpassword=''" and file in.

<pre>
serverpassword=use_a_long_and_secure_server_password
</pre>

Restart mumble-server.

<pre>
sudo service mumble-server restart
</pre>

===== Mumble Client =====

====== Installation ======

Update package lists.

<pre>sudo apt-get update</pre>

Install mumble.

<pre>sudo apt-get install mumble</pre>

====== Start ======

Start mumble.

<pre>Start menu -> Applications -> Internet -> Voice Chat.</pre>


====== Configure ======

Configure mumble to your linking.

Enable Force TCP mode.

<pre>Go to Configure -> Check "Advanced" -> Network -> Check "Force TCP mode" -> Ok</pre>

====== Add Server ======

Add a new server:

<pre>
Server -> Connect -> Add new ->

    Label   : anything, can be same as .onion domain name
    Address : your .onion domain name or,
              if the mumble server is running in your own
              Whonix-Workstation choose
              127.0.0.1
    Port    : 64738
    Username: anything
</pre>

You can now connect to the server.

===== Technical Comments =====

<ref>Mumble (and mumble-server)'s connections go through Tor's TransPort. This shouldn't matter, because (connections to and ) hidden services (itself) are stream isolated so or so, see [[Stream Isolation]] for more information on TransPort, SocksPort, Stream Isolation and so on.</ref>

==== WebRTC ====
WebRTC is an emerging standard for p2p browser to browser communication. While the focus is mainly on VoIP, more collaboration features are being incorporated by the Jitsi developers.<ref>http://www.linuxtag.org/2014/de/programm/vortragsdetails/?eventid=1651</ref>

As a UDP based protocol, communicating with a party on the clearnet over Tor is not possible, not directly anyway. A setup will involve TBB + Onioncat whenn it becomes available.

Implementing privacy critical software in a browser is seen as a bad and dangerous idea by security conscious Free Software developers. Browser security holes and lack of adequate process isolation, could lead to theft of private encryption keys by a malicious code running in the browser. A secure way around that is to run a clean snapshot of Whonix, one in which TBB has never communicated with the internet, just for this purpose. For that reason, almost all implementations of encryption software is done as standalone packages. 



=== Warnings ===
==== ZRTP End-to-End Encryption cannot Protect VBR Streams ====
When using ZRTP + SRTP  for encryption in any stretch that goes on the clearnet, be sure to never select a VBR (variable bitrate) codec as the pauses in a conversations produce fingerprints in the encrypted stream that allow the adversary to infer what words are being said.<ref>http://zfoneproject.com/faq.html#vbr</ref> <ref>http://www.webcitation.org/6RrGGaAho</ref>

==== TOR Fone ====
The developer of TOR Fone recommends against<ref>https://lists.torproject.org/pipermail/tor-talk/2013-February/027215.html</ref> using TOR Fone. Quote: "''I did not think this project as a finished product for practical use.''" The project got overall a pretty bad review in the mailing list thread.

==== Skype ====
'''Does this mean that, for example, is my IP and location safe when using Skype?'''

Yes, IP and location is safe. Skype has been tested in Whonix, it "works" quite well, still recommended against. Some further comments you should be aware of:

Those are not Whonix or Tor issues, those are Skype issues. Consider Skype usage [[DoNot#Do_not_confuse_Anonymity_with_Pseudonymity.|pseudonymous rather than anonymous]]. Skype is closed source and given Skype's history (reading BIOS etc. just research) it's very much likely that they link all your account names inside Whonix-Workstation to the same pseudonym.

Also obviously, if you log into an account, which you have ever used without Tor, consider the account non-anonymous. You really should assume, that they have logs and link your Tor and non-Tor use together.

Security doesn't depend on your local security and key management, but on a third party, the Skype authority. Consider the Skype encryption broken by the Skype authority.

Another obvious thing, if you chat with people, who have not created their account over Tor and who have not always connected over Tor, it's also not so hard to guess who you are. Remember, you are not in control of Skype's encryption keys and Skype is not Open Source, thus do not rely on Skype's encryption.

Voice recognition software also got very sophisticated. Since you should be unsure if the Skype encryption is broken or not, voice recognition software could be used to find out who you are.

Also read [[DoNot#Do_not_mix_Modes_of_Anonymity.21|Do not mix Modes of Anonymity!]]

In conclusion Skype usage does not leak IP/location, but is discouraged anyway, unless you want to use it for circumvention only, without wanting to be anonymous or pseudonymous.

What's the point in using Skype if you and all your chat partners are also willing to create and use their accounts only over Tor? You are advised to use Skype alternatives.

==== List ====
There is a [https://en.wikipedia.org/wiki/Comparison_of_VoIP_software Comparison of VoIP software] in wikipedia. The client should be Open Source and if you are not calling from .onion to .onion (and let Tor handle encryption) it should also support voice encryption such as ZRTP.

== Development Ideas ==
=== OnionCat ===
[[OnionCat]] could be useful if tunneling UDP and/or ICMP tunneling over Tor should be required. It should be avoided if possible, because it add complexity to the setup and introduces more latency because connection always goes from hidden service to hidden service.

=== SpeakFreely ===
There is a modification to the Windows version of SpeakFreely, allowing it to use tcp and Tor<ref>http://torfone.org/spfr.html</ref>. A corresponding modification applied to the Linux version would make it fully usable under Whonix.

As it's author [https://lists.torproject.org/pipermail/tor-talk/2013-February/027215.html said], it's not ready for prime time yet. Quote: "I did not think this project as a finished product for practical use. This is only a platform to explore the possibility of transmission of voice over TOR."

== Sources ==

* [https://guardianproject.info/2013/01/31/anonymous-cb-radio-with-mumble-and-tor/ guardianproject.info: Mumble and the Bandwidth – Anonymous CB radio with Mumble and Tor]

== External Resources ==
* Not Whonix specific, still interesting: [http://huertanix.tumblr.com/post/55261352264/location-anonymous-voice-communication-a-step-by-step Location-Anonymous Voice Communication, A Step-by-Step Guide]

== Footnotes ==
<references />

{{Footer}}

[[Category:Documentation]]
