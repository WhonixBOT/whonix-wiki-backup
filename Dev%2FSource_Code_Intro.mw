{{Header}}
{{#seo:
|description=Introduction into Whonix's source code.
}}
{{forkme}}
= Introduction =
This chapter is dedicated to give an introduction into the Whonix source code. '''''If you prefer to read and understand the source code just by reading scripts you may skip this optional chapter.''''' It can be quite difficult to get started with hacking existing big complex projects.

'''build-steps'''

This is a high level overview. Whonix-Example-Implementation can currently be build in nine steps. (There is also a whonix_build script, which automates these eight steps for your convenience.)

* 1100_prepare-build-machine
* 1150_export-libvirt-xml
* 1200_create-debian-packages
* 1300_create-raw-image
* 1400_backup-raw-after-grml-debootstrap
* 1700_install-packages
* 1800_backup-raw-after-package-install
* 2300_run-chroot-scripts-post-d
* 2400_convert-raw-to-qcow2
* 2500_convert-raw-to-vdi
* 2600_create-vbox-vm
* 2700_export-vbox-vm
* 2800_create-report

'''help-steps'''

Boring methods, which are required by the build-steps above.

* delete-vbox-vm
* mount-raw
* mount-vdi
* chroot-raw
* unchroot-raw
* unmount-raw
* unmount-raw-force
* unmount-vdi
* unmount-vdi-force
* pre gets sourced by all other scripts.
* variables gets sourced by all other scripts.

'''whonix_build'''

Is a script, which simply runs all other build-steps. Actually it's "optional". It has very little functionality besides running all other steps. You are free to run all steps one by one. That is useful for learning and for debugging purposes. In case you want to fix a bug or in case you want to upgrade the distribution or in case you want to switch the operating system or whatever you are better off running the steps manually. Run it with -help to see available switches. It has also has a --fast1 and --fast2 switch which skips certain steps, which is useful for debugging purposes if these steps were already run.

'''''Overview''''':

# prepare-build-machine: installs build dependencies and applies a few other required settings for building from source.
# export-libvirt-xml: Copies files from {{Code2|libvirt}} folder to {{Code2|~/whonix_binary}} folder and adds version numbers to them.
# create-debian-packages: Recursively works through {{Code2|packages}} folder, builds them one by one and adds them to a local APT repository.
# create-raw-image: [http://grml.org/grml-debootstrap/ grml-debootstrap] creates virtual machine images in '''.raw''' image format. It keeps care of creating the image, the partition table, grub boot manager, minimal system debootstrap and apt-get installing all Whonix packages. This step requires most time in the build process.
# backup-raw-after-grml-debootstrap: A backup _copy of the '''.raw''' gets created.
# install-packages: Installs meta .deb packages whonix-shared-packages-dependencies/recommended, desktop, desktop-kde, kde-accessibility and whonix-*-packages-dependencies/recommended and whonix-workstation-default-applications. Those only include dependencies and recommended packages which are pulled from Debian's apt repository.
# backup-raw-after-meta-package-install
# run-chroot-scripts-post-d: Post Chroot Scripts are applied.
# convert-raw-to-qcow2: Only having effect when using {{Code2|--qocw2}} switch. The '''.raw''' image gets converted to a '''.qcow2''' image. Actually not converted, a new file will be created and the old '''.raw''' remains available until cleanup is run or manually deleted or grml-debootstrap runs again. The '''.raw''' format is more "generic". VirtualBox does not support raw ('''.raw''') images, but '''.vdi''' and '''.vmdk''' (and others).
# convert-raw-to-vdi: The '''.raw''' image gets converted to a '''.vdi''' image. (Actually not converted, as explained above.)
# create-vbox-vm: A virtual machine (VirtualBox) will be created and the '''.vdi''' image will be attached.
# export-vbox-vm: The virtual machines get exported to a '''.ova''' images. (Technically the '''.ova''' format seams to require '''.vmdk''' files. Therefore VirtualBox automatically creates it. So anyone using or extracting the '''.ova''' image will see that it includes a '''.vmdk''' image.)
# create-report: Analyses the .ova the the build script created and creates a report for [[Verifiable Builds]].

'''''Modularity:'''''

All steps could be easily replaced to add support for additional virtualizers, operating systems and so on. The numbers before the script names (20_..., 25_..., 30..., ...) are honored by whonix_build (using [http://manpages.ubuntu.com/manpages/raring/man8/run-parts.8.html run-parts]), which runs these steps in lexical order. Therefore you can easily add steps to the beginning or the end or even wretch steps in between.

'''''File sizes:'''''

Do not get shocked by file sized. Initially the .raw is created with a size of 100 GB, but it will actually only take a fraction of that space on the harddrive. This is because .raw .vdi and .vmdk are all [[sparse files]], which means they do not take their maximum size, but only as much data as really is inside these images.

'''Chroot Scripts'''

* packages/anon-*-build-*/usr/lib/anon-dist/chroot-scripts-post.d/

'''''Summary:'''''

Thus, given the nature of the build step orientated scripts, you can easily work on the different aspects of Whonix. For example, once you have created a clean virtual machine with the operating system only, you can make a copy, run either the gateway or the workstation copy routine or Chroot Scripts as often as you need to test your changes and if something goes wrong, go back to backup. You don't have to build everything from scratch again. <ref>If something would go wrong, you would have to reinstall the whole operating system every time again. That's why we use separate steps.</ref>

'''''Another Introduction:'''''

It's really not that difficult after all. If you like, you could read [[Manually Creating Whonix]], which is a similar topic, which covers part of this in other words.

= OpenPGP keys =
OpenPGP public keys required for building Whonix are stored inside various packages. These include.

* tb-updater: [https://github.com/Whonix/tb-updater/tree/master/usr/share/torbrowser-updater-keys.d /usr/share/torbrowser-updater-keys.d]
** erinn.asc - [https://www.torproject.org/docs/signing-keys.html.en obtained from torproject.org] - Used to verify downloads of Tor Browser by ''update-torbrowser''.
** sebastian.asc - same as erinn.asc.
* anon-shared-build-apt-sources-tpo: [https://github.com/Whonix/anon-shared-build-apt-sources-tpo/tree/master/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d /usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d]
** torprojectarchive.asc - Torproject's archive key https://www.torproject.org/docs/debian.html.en
* whonix-repository:
** [https://github.com/Whonix/whonix-repository/tree/master/usr/share/whonix/whonix-keys.d /master/usr/share/whonix/whonix-keys.d/whonix-keys.d]
*** patrick.asc
** [https://github.com/Whonix/whonix-repository/tree/master/usr/share/whonix/whonix-keys-revoked.d /usr/share/whonix/whonix-keys-revoked.d]
*** None yet.
* whonixcheck: [https://github.com/Whonix/whonixcheck/tree/master/usr/share/whonix/whonix-news-keys.d /usr/share/whonix/whonix-news-keys.d]
** patrick.asc - Whonix maintainer key - used for [[whonixcheck]]'s W[[Download#Whonix_Version_Check_and_Whonix_News|honix News]] v[https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/check_news#L84 erification]

To find out what the keys are good for, simply grep the source code.

<pre>
cd /home/user/Whonix
grep -r tbb-keys.d *
grep -r tpoarchive-keys.d *
grep -r whonix-keys-revoked *
grep -r whonix-keys.d *
</pre>

If you are in luck, you never have to update the keys yourself and the Whonix maintainer will keep them updated. Otherwise and also as a good precaution you can verify these keys manually. Follow the instructions from torproject.org to obtain the key. Then simply check if the keys match or update the old key with the new one.

Torproject's archive key expires on '''2018-08-30''.

<pre>
gpg --fingerprint A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89
pub   2048R/886DDD89 2009-09-04 [expires: 2020-08-29]
      Key fingerprint = A3C4 F0F9 79CA A22C DBA8  F512 EE8C BC9E 886D DD89
uid       [ unknown] deb.torproject.org archive signing key
sub   2048R/219EC810 2009-09-04 [expires: 2018-08-30]
</pre>

= Debugging =

Stuff you may find helpful for debugging.

== Build Configuration ==
=== Build Configuration Folder ===
You can drop configuration file either in:
# {{Code|buildconfig.d}} or in
# {{Code|/etc/whonix_buildconfig.d}}
# {{Code|../buildconfig.d}} folder.

Method 2. is recommended for users.

# Contains examples. It's more difficult to use, since you would have to git commit your build config files. Rather use.
# {{Code|sudo mkdir --parents /etc/whonix_buildconfig.d}}
# When {{Code|/home/user/Whonix}} is your Whonix source folder, you could use {{Code|/home/user/buildconfig.d}} as your Whonix build configuration folder. It's easier to use, since you don't have to git commit your build config files.

<ref>This is because {{Code|..}} means "one level below this folder".</ref>

=== Skipping Build Steps ===
Rebuild the .ova images, while skipping the slow ''prepare-build-machine'' and ''create-debian-raw'' steps. (Of course, this assumes that these steps where run at least once previously.)

The {{Code|sudo ./build-steps/1300_create-debian-raw -tX}} <ref>(replace X with g or w)</ref> step takes far most of the build creation time. As long as no packages have been added or removed, you can repeat all other steps from a backup, which has been automatically created for you, by using.

<pre>
sudo ./whonix_build --tor-gateway --build --fast1

## or --tor-workstation
</pre>

There is also {{Code|--fast2}}, which skips all steps up to and including 1700_install-meta-packages.

<pre>
sudo ./whonix_build --tor-gateway --build --fast2
## or --tor-workstation
</pre>

=== Skipping Chroot and Postinst Scripts ===
Some chroot scripts, especially the 70_update_command_not_found and 70_torbrowser take very long, while they are non-critical. You can either run update-command-not-found and the Tor Browser Updater after Whonix has been build and booted, or if you don't wish to use them at all, just don't use it at all. Therefore you can conveniently disable them, to safe some time, which is useful for debug builds.

Create your own build configuration, see {{Code|buildconfig.d}} folder. For see example {{Code|buildconfig.d/30_skip_torbrowser}}, which contains

<pre>
#export SKIP_SCRIPTS+=" 70_torbrowser "
</pre>

You could create a folder file {{Code|../buildconfig.d}} and a file {{Code|../buildconfig.d/50_skip_torbrowser}} and add.

<pre>
export SKIP_SCRIPTS+=" 70_torbrowser "
</pre>

This works for the following folders.

* whonix_*/usr/share/whonix/postinst.d
* whonix_*/usr/share/whonix/chroot-scripts-pre.d
* whonix_*/usr/share/whonix/chroot-scripts-post.d

Look at the file names and add them. ''export SKIP_SCRIPTS+=" another_file_name "''. Don't forget empty spaces ({{Code| }}) before and after {{Code|"}}. <ref name=bash-array>We are expanding a bash array.</ref>

= SSH =

* [[File_Transfer#SSH_into_Whonix-Gateway|SSH into Whonix-Gateway]]
* [[File_Transfer#SSH_into_Whonix-Workstation|SSH into Whonix-Workstation]]

= Mount and inspect images =

[[File Transfer#mount-and-inspect-images|Mount and inspect images]]

== Interactive Chroot ==
https://github.com/Whonix/whonix-developer-meta-files/

* Interactively chroot Whonix-Gateway.

Open a bash shell inside the Whonix-Gateway '''.raw''' image.

<pre>
sudo ./debug-steps/interactive-chroot-raw -tg
</pre>

* Interactively chroot Whonix-Workstation.

Open a bash shell inside the Whonix-Workstation '''.raw''' image.

<pre>
sudo ./debug-steps/interactive-chroot-raw -tw
</pre>

* Check Whonix version number.

Important before building builds for redistribution.

Build config variable.

<pre>
anon_dist_build_version
</pre>

<pre>
cat /usr/share/whonix/build_version
</pre>

= Less Important Goodies =

== Unpacking '''.ova''' images ==

If you want for some reason to unpack an '''.ova''', for example to get the '''.vdmk''' image, you can use tar.

<pre>
tar -xvf Whonix-Gateway.ova
Whonix-Gateway.ovf
Whonix-Gateway-disk1.vmdk
</pre>

== Converting '''.vmdk''' images to '''.raw''' images ==

<pre>
#qemu-img info Whonix-Gateway-disk1.vmdk

qemu-img convert Whonix-Gateway-disk1.vmdk -O raw Whonix-Gateway.raw

#qemu-img info Whonix-Gateway.raw
</pre>

= Porting =

These are some random notes about porting Whonix update debs to rpm.

What would have to be done:

* create rpm package
* Find a replacement for config-package-dev, a package which allows third party packages (Whonix) to own files which are owned by other packages. Such as {{Code2|/etc/tor/torrc}} is owned by tor, but whonix-shared-files includes its own config file.
* add init scripts (currently done by debhelper)
* add man pages (currently done by debhelper and ronn, see debian/rules)
* minor: replacement for dh_apparmor

= Footnotes =
<references />

{{Footer}}

[[Category:Development]] [[Category:Design]]
