= Verifiable Builds =
== Verifiable .ova's ==
=== Introduction - What this Archives ===
'''UNFINISHED!'''

This will hopefully be ready for Whonix 8.

* [https://github.com/Whonix/Whonix/issues/113 development ticket]
* [https://github.com/adrelanos/Whonix/blob/master/help-steps/analyze_image script work in progress]

{{mbox
| type       = critical
| image      = [[File:Ambox_warning_pn.svg.png|40px|alt=Question mark]]
| text       = 
Warning:

For this feature adding security, it needs your help! Do not assume, that others are doing it for you.
}}

Whonix has a feature which allows the community to check that Whonix {{Code2|.ova}}<ref>https://en.wikipedia.org/wiki/Open_Virtualization_Format</ref> releases are verifiably created from project's own source code. We call this verifiable builds. This only proves, that the person and machine<ref>Due to build machine compromise.</ref> building Whonix has added nothing malicious, such as a backdoor<ref>https://en.wikipedia.org/wiki/Backdoor_(computing)</ref>. It doesn't prove, that there are no backdoors in Debian. This isn't possible, because neither Debian<ref>Whonix is based on Debian.</ref> nor any other operating system provides deterministic builds yet.<ref>Some Debian developres are working on it, see [https://wiki.debian.org/ReproducibleBuilds Reproducible Builds].</ref> Rather this feature is no attempt to proof, that there aren't any vulnerabilities<ref>https://en.wikipedia.org/wiki/Vulnerability_(computing)</ref> in Whonix's or Debian. A remotely exploitable<ref>https://en.wikipedia.org/wiki/Exploit_(computer_security)</ref> bug in Whonix or Debian, a flaw in Whonix's firewall leaking traffic or code {{Code2|phoning home}}<ref>https://en.wikipedia.org/wiki/Phoning_home</ref> the contents of your harddrive would still be fatal. A precondition so this feature can improve overall security is, that the community is auditing Whonix's and Debian's source code for being free of backdoors and vulnerabilities in the first place. In summary, we believe this feature is useful and can improve security, but however isn't a magical answer to all computer security and trust questions. The [[Comparison with Others#Verifiable Builds]] table makes it clear what this feature archives.

You might be curious, why Whonix is verifiable while neither Debian nor any other operating system is? This is because [[About#Based_on_Debian|Whonix is very simple]], to oversimplify it: Whonix is just a collection of configuration files and scripts, i.e. Whonix's source code does not contain any compiled code etc. On the other hand, Debian is a full operating system. And of course, without the great work of the Debian project and all the upstream projects, Whonix wouldn't exist.

This feature will hopefully be ready for Whonix 8. Only users who download a new image can profit from this feature. Auditing old versions is not possible.<ref>Because in order to implement the verifiable builds feature, we need to get rid of lots of non-deterministic auto-generated files at the end of the build process and to re-create them during first boot.</ref>

=== Short Overview - How it Works ===
When building Whonix {{Code2|.ova}}'s from source code, for example {{Code2|/home/user/whonix_binary/Whonix-Gateway-7.ova}} also report {{Code2|/home/user/whonix_binary/Whonix-Gateway-7.report}} file will be created.

After building the {{Code2|.ova}}, the last build-step will extract the {{Code2|.ova}}, which will result getting three files, i.e. {{Code2|Whonix-Gateway-7.ovf}}, {{Code2|Whonix-Gateway-7.mf}} and {{Code2|Whonix-Gateway-7-disk1.vmdk}}. The {{Code2|.vmdk}}<ref>https://en.wikipedia.org/wiki/VMDK</ref> image then will be converted to {{Code2|.vdi}}<ref>https://en.wikipedia.org/wiki/VDI_(file_format)</ref>, then converted to {{Code2|raw}}<ref>https://en.wikipedia.org/wiki/Raw_image_format</ref> ({{Code2|.img}}. (Converting as in creating a copy, not actually converting.) The filesystem layout, the MBR<ref>https://en.wikipedia.org/wiki/Master_boot_record</ref> and the VBR<ref>https://en.wikipedia.org/wiki/Volume_boot_record</ref> are written in to separate files. The raw image will then be mounted. A sha512 checksum of every file will be created and stored in the report.

Anyone building {{Code2|Whonix.ova}} images will hopefully end up with the same report. We can then compare the reports using tools such as {{Code2|diff}} and/or {{Code2|meld}}. Those reports should be very similar. We can't end up with the very same reports, because again, there are no deterministically built operating systems yet. However, we can manually review the few remaining differences. That should make it reasonable to believe, that the original {{Code2|Whonix.ova}} images have been build from the source code that has been published for that Whonix version.

Below on this page is a longer How-To.

=== Current Limitations ===
Our {{Code2|[https://github.com/adrelanos/Whonix/blob/master/help-steps/analyze_image help-steps/analyze_image]}} script does not check the contents of the image outside the file system. We're not aware of any method getting a backdoor activated by writing malicious data into those places. We might get rid of this limitation in future, see chapter Possible Future Improvements.

We don't check GUID<ref>https://en.wikipedia.org/wiki/GUID_Partition_Table</ref>, because we're not using GUID. <ref>You can verify that by auditing Whonix's source code.</ref>

=== Attack Surface ===
The {{Code2|/help-steps/analyze_image}} script is supposed to execute no code from the image you are analyzing. The risk running that script on images you did not create yourself such as on the official images should be low, but not non-existent. Audits of the analyzing script itself are most welcome. In order to analyze the image, tools which are available in Debian's repository are used. Such as extracting the .ova requires {{Code2|tar}}<ref>http://packages.debian.org/jessie/tar</ref>. In theory, the {{Code2|.ova}} could be malformed in a way to exploit the auditor's machine while extracting it to coerce the auditor's machine create a legit report hiding the actual backdoor (and infecting the auditor's machine with a backdoor). To find out what other tools are used and for what, please have a look at the {{Code2|/help-steps/analyze_image}} script.

=== Theoretical Holes ===
Unfortunately, we can not directly mount the {{Code2|.ova}}. We have to extract it first. Rather, Virtual Box does not support creating {{Code2|.ova}} containing {{Code2|.img}} (raw images). Img's would be ideal, since low level tools such as {{Code2|dd}} understand them. Even worse, {{Code2|.ova}}'s created by Virtual Box always include {{Code2|.vmdk}}. [https://forums.virtualbox.org/viewtopic.php?f=1&t=58460 export VM using VDI instead of VMDK is not possible]. Rather [https://forums.virtualbox.org/viewtopic.php?f=7&t=58461 Mounting VMDK's on Debian testing/jessie] using Free Software is currently not possible since no software supports that. During the convert process {{Code2|ova -> vmdk -> vdi -> img}}, the MBR, bootloader, VBR and/or other obscure differences could occur. There is no reason to believe that is actually the case, but we're not aware of any research on that topic.

=== Your Own Alternatives ===
The {{Code2|/help-steps/analyze_image}} script is the tool which comes with Whonix's source code to audit {{Code2|Whonix.ova}}. Nothing prevents you from cooking up your own custom method to verify {{Code2|Whonix.ova}}. On the contrary, we'd be very happy to hear about your methods, source code and results. Since this hasn't ever happened in past, Whonix came up with its own {{Code2|/help-steps/analyze_image}} script.

=== Possible Future Improvements ===
[https://github.com/sleuthkit/sleuthkit/ sleuthkit] could be an interesting addition or even replacement for our custom script. Then we could create a report using something like {{Code|fls -f ext4 ./Whonix-Gateway-7.img}}. Does {{Code|fls}} very similar results when run on very similar images or does it mess up the ordering? The version in Debian even in [http://packages.debian.org/sid/sleuthkit sid] is outdated and does unfortunately not include support for ext4 and our images are using ext4. More recent sleuthkit upstream releases do support ext4, but there are no signed git tags yet ([https://github.com/sleuthkit/sleuthkit/issues/264 reported an issue]), so getting sleuthkit is a bit difficult. (If we want to defeat sophisticated backdoors, we shouldn't encourage auditors to blindly trust github's SSL alone for sleuthkit's integrity.) We could think about bending our images, downgrading from ext4 to ext3.

=== Expected Differences ===
* {{Code|(mount_folder) /boot/initrd.img*}} - Those are extracted to the {{Code|initrd_folder}} and diffed.
* {{Code|(mount_folder) /etc/fstab}} - Will contains different uuids. We could make them uniform, but that would complicate the code, manually look at the diff.
* {{Code|(mount_folder) /etc/shadow}} - Manually look at the diff. Users are advised to change their passwords anyway.
* {{Code|(mount_folder) /etc/shadow-}} - Same as above.
* {{Code|(mount_folder) /etc/init.d/.depend.boot}} - {{Code|/sbin/insserv}} (part of sysvinit) does not produce deterministic results. Gets copied to the {{Code|manual_analysis_folder}}. Manually review them. You just have to check, they're not containing anything sketchy. You most likely won't be able to tell, if some services are deliberately not started or in wrong order. This is not an issue, because when Whonix starts for the first time it executes {{Code|whonix_shared/usr/lib/whonix/first_run_initializer}}, which executes {{Code|/sbin/insserv}}, which recreates this file. <ref>We can not delete this file before redistributing Whonix, because then Whonix wouldn't start.</ref>
* {{Code|(mount_folder) /etc/init.d/.depend.start}} - Same as above.
* {{Code|(mount_folder) /etc/init.d/.depend.stop}} - Same as above.
* {{Code|(mount_folder) /usr/share/whonix_build_timestamp}} - Timestamp, naturally differs.
* {{Code|(mount_folder) /var/lib/initramfs-tools/...}} - Is a one-line text file, which contains the name of the initrd and its checksum. Differs, because the initrd isn't deterministic in the first place.
* {{Code|(mount_folder) /var/lib/initramfs-tools/...}} - Same as above.
* {{Code|(manual_analysis_folder) *.dd.1000000}} - The first ~1MB of the {{Code2|.img}}. Disk signature will differ.

=== Unexpected Differences ===
There could be differences besides the expected differences, because this is still experimental as in a new feature. Remember, there are no deterministically built distributions yet. If you find any additional differences, keep calm, it's not necessarily a backdoor, report them, and if you can, diff and/or audit them.

=== Folder Overview ===
Your report root folder can most likely be found in {{Code|/home/user/whonix_binary/$VMNAME-${whonix_build_whonix_version_new}_report_tempfolder}}.

{{Code|extracted_ova_folder}} - Should contain 3 files. One {{Code2|.vmdk}}, which you can ignore, that's what we unpack - if we could diff it in the first place we wouldn't have so much trouble. Since the contents of the extracted_ova_folder gets added to the file_list, it won't be possible, that there are any extra files - if there were, you could see them in the report and should be suspicious.

{{Code|vdi_folder}} - Should only contain one {{Code2|.vdi}}. If we could diff it in the first place we wouldn't have so much trouble.

{{Code|raw_folder}} - Should only contain one {{Code2|.img}}. Same as above.

{{Code|auto_hash_folder}} - Are all added to the {{Code2|.report}} and {{Code2|file_list}} and should contain no differences.

{{Code|extracted_initrd_folder}} - The are the extracted {{Code|(mount_folder) /boot/initrd.img*}} files. Are all added to the {{Code2|.report}} and {{Code2|file_list}} and should contain no differences.

{{Code|manual_analysis_folder}} - Not hashed in the {{Code2|.report}} file, because those will show differences anyway which we expect. Those have to be manually audited.

{{Code|debug_folder}} - We copy these files out of the images just in case for convenience. Those have been already checksum'ed (in the {{Code2|.report}} file) as regular files within the (mount_folder). Feel free to ignore that folder. It's only in for debugging purposes.

=== How-To ===
First of all, you need to create your own Whonix.ova images from source code, refer to [[Dev/Build Documentation|Build Documentation]]. Your report file can most likely be found at {{Code|/home/user/whonix_binary/$VMNAME-$whonix_build_whonix_version_new.report}} and your report_tempfolder at {{Code|/home/user/whonix_binary/$VMNAME-${whonix_build_whonix_version_new}_tempfolder}}. That is your own analyzed {{Code2|.ova}}. To make space for another analysis for other builds (such as those from whonix.org), rename your whonix_binary folder to something else, such as {{Code2|whonix_binary1}}.

If you've build for example Whonix 7.5.2, you have to download Whonix 7.5.2 as well. Place the {{Code2|.ova}} in {{Code|/home/user/whonix_binary/}}. Keep the original name. Then go to Whonix's source code folder ({{Code|cd /home/user/Whonix}} and analyze that image. Use.

<pre>
sudo ./build-steps.d/2800_create-report --tor-gateway
</pre>

(And later repeat that step with the --tor-workstation switch.)

Then you have two {{Code2|.report}} files and two report temp folders.

Use your favorite diff viewer for huge files. For example {{Code2|meld}}. Diff the reports. For example, use.

<pre>
meld ./whonix_binary1/Whonix-Gateway-7.5.2.report ./whonix_binary/Whonix-Gateway-7.5.2.report
</pre>

These files should be very similar, expect for a few differences which we earlier mentioned in chapter Expected Differences. Look at the differences. Two of them (because we're installing two kernels) should look like this:

{{Code|(mount_folder) /boot/initrd.img...}}

Check at the top of your report files for (extracted_initrd_folder) and see if both initrd's were really extracted. <ref>They should, because otherwise if extraction failed, the {{Code2|analyze_image}} script should have failed earlier and informed you already.</ref>

Check for more differences, you can ignore {{Code|(mount_folder) /etc/fstab}} for now, this is an expected difference and we audit them later.

Also ignore {{Code|(mount_folder) /etc/init.d/.depend.boot}}, {{Code|(mount_folder) /etc/init.d/.depend.start}}, and {{Code|(mount_folder) /etc/init.d/.depend.stop}} for now, this is an expected difference and we audit them later.

Also ignore {{Code|(mount_folder) /etc/shadow}} and {{Code|(mount_folder) /etc/shadow-}} for now, this is an expected difference and we audit them later.

Also ignore {{Code|(mount_folder) /usr/share/whonix_build_timestamp}} for now, this is an expected difference and we audit them later.

Also ignore {{Code|(mount_folder) /var/lib/initramfs-tools/...}} for now, this is an expected difference and we audit them later.

There should be no other differences in the {{Code2|.report}} files!

Now it's time to audit the differencing files which we ignored above.

Diff the virtual machine description file {{Code|(extracted_ova_folder) *.ovf}}. Only the uuids should differ. (The extracted_ova_folder folder can be found in your report_temp folders.)

Diff the manifest file {{Code|(extracted_ova_folder) *.mf}}. Only the checksums should differ.

Diff the first ~1 MB of .img (contains MBR and bootloader) {{Code|(manual_analysis_folder) *.dd.1000000}} - Use for example {{Code|vbindiff ....dd.1000000 *.dd.1000000}}. Only the disk signature should differ.

Finally diff the rest of the files in your {{Code2|manual_analysis_folder}}. Using a diff application which can diff whole folders such as {{Code2|meld}} would be useful, but what tools you use is up to you. Have a look at the "Expected Differences" chapter above for the kind of differences you can expect.

Auditing these files is unfortunately a bit difficult. The best tip to be given is to use your common sense. For example, having two {{Code2|/etc/init.d/.depend.start}} files at same size, but different order is probably not a backdoor. But if there are a lot extra lines looking weird ([http://security.stackexchange.com/a/40108 unrelated example code]), there might be something wrong.

== Verifiable Whonix Debian Packages ==
'''Not yet released!'''

Since Whonix 7.5.2, all Whonix Debian Packages are deterministically build. This means, if you build Whonix Debian Packages 7.5.2 from source code, then download 7.5.2 from Whonix's Debian repository, you can simply diff the checksum (for example the {{Code2|sha512sum}}) of those files and they should match.

Shouldn't they match, you could also compare them using {{Code|debdiff}}.
