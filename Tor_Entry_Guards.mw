{{Header}}
{{#seo:
|description=Tor Entry Guards, Alternate Configurations, Fingerprinting Risks
}}
{{Maintainer|
|status=stable
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=easy
|maintainer=[https://forums.whonix.org/users/0brand 0brand]
|support=[[Support]]
}}

= Introduction =

{{Persistent Tor Entry Guards Introduction}}

<ref>
As concluded in ticket [https://phabricator.whonix.org/T469 research non-persistent Tor directory guards], these are covered by the following instructions.
</ref>

= Increasing Protection from Malicious Entry Guards: One Guard per Application =

Whonix developer HulaHoop recently approached Tor researcher, Tariq Elahi, to discuss how exposure to malicious guards in multi-Workstation scenarios could be measured. It was discovered that 1 guard/client per internet-connected program (not identity!) is the safest possible configuration. In fact, the probability of a network adversary observing a user's activities is lower than the default scenario, whereby one Tor Entry Guard is relied upon for all applications.

To apply this configuration, follow these steps:

# Import a Whonix-Gateway into the hypervisor that has never been started.
# Take a snapshot and name it "Original".
# Start Whonix-Gateway and wait for Tor to finish bootstrapping (connecting). 
# After Tor has connected, shutdown Whonix-Gateway and take another snapshot - the naming convention should match the intended activity, such as "Email".
# This snapshot should be used with <u>all</u> Whonix-Workstation snapshots related to/called "Email", whether it is identity "John Doe", "Jane Doe" and so on. Note the Workstations should also be generated separately from a clean baseline.

When a separate activity is required such as IRC, users should revert to the Whonix-Gateway snapshot (labelled "Original"), then repeat the same steps. That is, allow it to boot and connect to Tor, shut it down, then take a snapshot entitled "IRC".

If you need to run multiple applications at the same time, then consider cloning the VMs.
<ref><pre>
HulaHoop
Subject: Re: Fwd: Re: Tor revised guard behavior & chances of malicious guard
To: Tariq Elahi, adrelanos@riseup.net


Tariq Elahi:
>
> The short story is that things get worse very quickly, but there is hope.
> The analysis below assumes only the adversary that runs guards and not
> the local adversary like the host OS or the Whonix processes themselves.
> In my analysis I assume a hypothetical adversarial guard bandwidth of
> 10% of the entire network. This is an arbitrary number since we don't
> know the real number, but it serves to show the trends as we increase
> the guards per client and number of clients per user. I do the kind of
> analysis we do in the Conflux[1] paper which is very relevant here,
> especially Table 3 and its discussion in section 5.2. I update the
> numbers and extend that analysis for the scenarios you have described.
>
> 1. 1 guard/client, 1 client/user.
> The adversary (i,e, the compromised guard) will have the ability to
> observe 10% of the clients and hence 10% users. This is the situation
> today.
>
> 2. 2 guards/client, 1 client/user.
> This is worse than 1 above. There is now a 18% probability that only one
> of the guards is compromised per client and a 1% chance that two guards
> are compromised per client. The probability of at least one bad guard is
> hence 19%. There really is not a real distinction between one or two bad
> guards from the user perspective since in both situations the client
> will go through a malicious guard in a short period of time, since the
> guard is picked uniformly at random from the guard set.
>
> 3. 1 guard/client, 2 clients/user.
> The observable clients again increase to 19% from the base 10% in 1
> above. This means that if the user split her app (or group of apps)
> across the clients then there is a 19% chance that at least one of the
> app (groups) is compromised. However, for each client there is still
> only a 10% chance that a malicious guard is present. Is this
> configuration better than scenario 2 above? Perhaps, but let's look at
> the following scenario first.
>
> 4. 2 guards/client, 2 clients/user.
> The observable clients increases to 54%. This means that there is a 54%
> chance that at least one bad guard is present. This is worse than all
> the other scenarios above. However, if we fix apps (or groups of apps)
> to particular clients then we can compare to scenario 2 where the app
> group/client is analogous and the same analysis holds. Then, for each
> client there is again a 19% chance that there is a malicious guard
> present. If we compare to 3 above we can see that if we only use 1
> guard/client then we can drop the exposure back down to 10% for that
> client and hence app group.
>
> Taking the above into account we can get good results by keeping the
> guard set size to 1 and users spin up one client for each app. Then we
> can achieve at most 10% of apps compromised at *any given time* but not
> simultaneously. We can call this scenario (which is an extension of
> scenario 3) the 1 guard/app scenario (1G/A). See the appendix for more
> tweaks to decrease guard exposure.
>
> If we want to consider 1G/A, then the next question for your user base
> is that is it better to either 1) have some portion of your apps
> compromised at *all* times (scenario 1G/A) or 2) have *all* your apps
> compromised some portion of the time (scenario 1). Tor tends to bend
> towards option 2, but then they have not considered the option of
> multi-client usage since it doesn't improve the situation in a
> non-compartmentalized setting, unlike the Whonix situation. I believe
> that option 2 is flawed because you never know if you are in fact
> currently compromised or not. It might be better to go ahead with
> assuming that you are compromised and mitigating that compromise to some
> portion of your network activity than all or nothing, which is what
> option 1 provides.
>
> I hope that answers your questions. Please do not hesitate to get in
> touch again if you would like to discuss further. I think this is a very
> interesting problem area and would be happy to contribute to improving
> the situation.
>
> Best regards,
> Tariq Elahi
>
>  [1] http://cacr.uwaterloo.ca/techreports/2013/cacr2013-16.pdf
>
> Appendix
> We can do better if we allow a user's clients to look at each other's
> lists to exclude guards that are already picked. The benefit would be
> that once the bad bandwith has been assigned it can no longer affect
> subsequent guard selections. However, clients looking at each other's
> memory space will compromise your vision of process containment. A zero
> knowledge/oblivious method for comparing guard lists might work to avoid
> this problem, and indeed the adversarial response will be weak since the
> best they can do is spread their bad bandwidth over many relays and at
> best return to the original exposure rate (e.g. 10%) but now with added
> costs of running many more relays.
>


Thanks for getting back to us. With your permission I'd like to quote
your reply on our wiki.

IIRC Tor is currently using a 2 guard per client config but will be
moving to 1 because of research showing it's safer. Should we force the
use of one guard even if it's not the standard configuration of most Tor
users at the moment?

With 1G/A being the best option it would translate to cloning the Tor VM
(for as many separate Apps desired) before first run - to ensure they
don't share the same guard correct?


***

I'm trying to think how the different Tor instances can look at each
other's guard lists across different VMs. Probably through using
inter-VM communication or something similar.

Spawning multiple Tor instances on the same Gateway VM would be easier
but getting each instance to use only it's own internal network that
connects to its unique App VM is not as straight forward as the separate
VM approach.</pre></ref>

== Extra Precautions ==

There is a small chance that Entry Guards could be reused for a separate application group, which would increase observation by an adversary. In the absence of a technological solution to automatically prevent such scenarios, it is encouraged to manually check the Tor node list on the Gateway using <code>Onion Circuits</code> for duplicated Entry Guards that are shared by other snapshots. Erase and re-take a different snapshot if that is the case.
<ref><pre>Tariq Elahi
Subject: Re: Fwd: Re: Tor revised guard behavior & chances of malicious guard
To: HulaHoop, adrelanos@riseup.net


Hi,

I have replied inline below.


On 27/09/18 17:22, HulaHoop wrote:
> [snip]
>
> Thanks for getting back to us. With your permission I'd like to quote
> your reply on our wiki.
Sure, but I would to take a look at what the context and quote is if that is alright, please.
>
> IIRC Tor is currently using a 2 guard per client config but will be
> moving to 1 because of research showing it's safer. Should we force the
> use of one guard even if it's not the standard configuration of most Tor
> users at the moment?
I thought Tor was using one guard and thinking of moving to two. Is it the other way around?
Forcing some users to do something different from other users partitions the user base and this is considered not a good thing to do in general.
>
> With 1G/A being the best option it would translate to cloning the Tor VM
> (for as many separate Apps desired) before first run - to ensure they
> don't share the same guard correct?
They could share the same guard if it gets picked randomly. The likelihood of this happening at random depends on the bandwidth of the guard so it might not be as rare. The trick is making sure you don't pick an already used guard without needing to divulge information about all other apps' guards.
>
>
> ***
>
> I'm trying to think how the different Tor instances can look at each
> other's guard lists across different VMs. Probably through using
> inter-VM communication or something similar.
>
> Spawning multiple Tor instances on the same Gateway VM would be easier
> but getting each instance to use only it's own internal network that
> connects to its unique App VM is not as straight forward as the separate
> VM approach.
>
Indeed, communication between the VMs is needed. Perhaps a mediation agent that could help facilitate the list matching process?

I am quite interested in this now. Perhaps we should talk more about this over chat if that will help.

Tariq</pre></ref>

== Important Caveats ==

* Do <b>NOT</b> start the application on the Workstation before taking the Gateway snapshot. This is to prevent it from generating data on the Gateway -- such as Onion Service descriptors -- that can be linked across sessions or detected in the event of the Workstation being infected. <ref>https://lists.torproject.org/pipermail/tor-dev/2016-November/011636.html</ref>

* If you use multiple instances of the same application concurrently -- email accounts John Doe and Jane Doe in the example above -- make sure each gets its own Gateway VM (cloned from the "Email" snapshot for example) and its own isolated network. They should never share the same Gateway because a malicious Workstation can:
** Sniff data on the shared isolated network; and 
** Also manipulate the common Tor client into divulging information belonging to the other application.

= Manual Rotation of Tor Guards =

== Anonymity and Performance-related Issues ==

Users may be tempted to create a new Whonix-Gateway (<code>sys-whonix</code>) in the following circumstances:

* Bootstrapping is slow or regularly fails.
* Tor logs show warnings suggestive of route manipulation attacks or other oddities.
* System logs reveal attempted attacks on Whonix or Tor processes, for example in AppArmor logs.
* Current Tor performance is very slow or unreliable due to collapsing circuits or other factors.
* The user is concerned about the amount of Tor data that could be revealed if Whonix-Gateway is infected, particularly after a long period of use.

Creating a new Whonix-Gateway (<code>sys-whonix</code>) will ''likely'' lead to a new set of Tor entry guards, which is [https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters proven to degrade anonymity]. 

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       ='''Warning:''' Users considering using disposable Whonix-Gateway ProxyVMs in Qubes R4 are [[Qubes/DisposableVM#Warning:_Avoid_Ephemeral_Whonix-Gateway_ProxyVMs_in_Qubes_R4|warned]] that this technique severely degrades anonymity; <u>new Tor guards are created during each distinct Whonix session.</u>
}}

== Manual Guard Rotation Threats ==

Forcing the rotation of guards more often than Tor’s default is dangerous for several reasons:

* It increases the likelihood of a compromised or malicious Tor guard being selected. This raises the chance of a successful [https://securityaffairs.co/wordpress/17489/intelligence/traf%EF%AC%81c-correlation-vs-anonymity-on-tor.html correlation attack] if the adversary runs Tor exit relays in the network. 
* The user is more likely to traverse a [http://freehaven.net/anonbib/#feamster:wpes2004 given] [http://freehaven.net/anonbib/#DBLP:conf:ccs:EdmanS09 set] of [http://freehaven.net/anonbib/#ndss13-relay-selection Internet infrastructure links] that are under the adversary's control, such as [http://web.mit.edu/6.033/www/papers/InterdomainRouting.pdf Autonomous Systems (ASes)] or [https://www.itu.int/en/wtpf-13/Documents/backgrounder-wtpf-13-ixps-en.pdf Internet Exchange Points (IXPs)].
* Every Tor guard change acts like a fingerprinting mechanism, since other users are less likely to pick the same set. If the adversary is able to enumerate a user's Tor guards and later observes someone with the same set, the chance is high the two observations stem from the same person. 

For these reasons the Tor design changed in 2014 to establish a solitary primary guard node, while also increasing the set period for guard rotation. Also, do not discount the possibility that an adversary might purposefully cause poor Tor throughput, in the hope Tor guards are manually changed: <ref>https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters</ref>

<blockquote>We should also consider whether an adversary can *induce* congestion or resource exhaustion to cause a target user to switch away from her guard. Such an attack could work very nicely coupled with the guard enumeration attacks discussed above.</blockquote>

In one sense, slow Tor entry guards should be welcomed - “honeypot” operators on the Tor network are unlikely to have constrained bandwidth which might chase away intended targets.

== Recommendations ==

If users feel compelled in their circumstances to proceed despite the anonymity risks, then it may be safer to first try:

* One of the fallback primary entry guards.
* A configured [[Bridges|bridge]].
* Chaining other [[Tunnels/Introduction|tunnels]] with Tor.
* Creating a fresh Whonix-Gateway (<code>sys-whonix</code>) and [[#Copy_Tor_Configuration_files_and_Settings_to_Another_sys-whonix_Instance|copying across the Tor state file]].

The safest decision is to persist with poor performance and wait for normal guard rotation.

= Mitigate the Threat of Guard Fingerprinting =

If guard fingerprinting across different locations is a legitimate concern, there are several ways to mitigate the threat. Viable options include: bridges, temporarily rotating guards or cloning Whonix-Gateway (<code>sys-whonix</code>) with new guards.

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       ='''Note:''' Weigh the fingerprinting risks outlined earlier before proceeding. In most cases the decision to not rotate guards (even temporarily) is the correct one.
}}

== Clone Whonix-Gateway (sys-whonix) with New Entry Guards ==

It is possible to clone the current Whonix-Gateway (<code>sys-whonix</code>) and regenerate the Tor state file. Once the VM is cloned, it is important that the original is not unintentionally used for any anonymous activities. To negate this threat, disable networking in the original Whonix-Gateway until returning home. 

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       ='''Warning:''' Do not clone the Whonix-Gateway (<code>sys-whonix</code>) with new guards at your home address. If the Tor client connects through the home network, the new guards might be correlated to the home address.
}}


Create a Whonix-Gateway (<code>sys-whonix</code>) clone and name it Whonix-Gateway-temp (<code>sys-whonix-temp</code>): 

** Virtualbox: follow [https://dirkstrauss.com/clone-virtualbox-vm/ these instructions] to create a VM snapshot.
** Qubes-Whonix: In Qube Manager, <code>Right-click on sys-whonix</code> -> <code>Clone qube</code>
* [[#Fresh_Tor_Entry_Guards_by_Regenerating_the_Tor_State_File|Regenerate the Tor State File]].

== Regenerate the Tor State After Saving the Tor State Folder ==

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Non-Qubes-Whonix only!
}}


Before arriving at the remote location, the Whonix-Gateway Tor state folder is moved to the <code>$HOME</code> directory and the Tor state file is regenerated. Perform all the following steps in Whonix-Gateway konsole.

'''1.''' Stop Tor.

{{CodeSelect|code=
sudo systemctl stop tor@default
}}

'''2.''' Move the Tor state folder to the <code>$HOME</code> directory.

{{CodeSelect|code=
sudo mv /var/lib/tor ~/
}}

'''3.''' Restart Tor.

{{CodeSelect|code=
sudo systemctl restart tor@default
}}

Before returning home, the Tor state folder is restored to its original settings.

'''1.''' Stop Tor.

{{CodeSelect|code=
sudo systemctl stop tor@default
}}

'''2.''' Remove the temporary Tor state folder.

{{CodeSelect|code=
sudo rm -r /var/lib/tor
}}

'''3.''' Restore the Tor state folder.

{{CodeSelect|code=
sudo mv ~/tor /var/lib
}}

'''4.''' Restart Tor.

{{CodeSelect|code=
sudo systemctl restart tor@default
}}

== Alternating Bridges ==

If [[bridges|Bridges]] are already configured, alternate bridges are recommended for different locations. If bridges are not being used, consider using entry guards in your primary location and relying on alternate bridges in different locations.

Complete the following steps in Whonix-Gateway (<code>sys-whonix</code>).

'''1.''' {{Disable_Tor}}

'''2.''' Configure Tor to use bridges. Refer to the [[Bridges|Bridges]] documentation.

'''3.''' Enable Tor at the new location.

{{Enable_Tor}}

'''4.''' Before leaving this location, disable Tor. If traveling to a different area, add a different bridge address. To revert to the usual Tor guards used at home, remove the torrc bridge settings before enabling the network or rollback to a VM snapshot created at home.

== Copy Tor Configuration files and Settings to Another sys-whonix Instance ==

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = [[Qubes-Whonix]] only!
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       ='''Warning:''' Carefully follow these instructions to avoid unforeseen consequences. <ref>If an alternative command is used to remove the Tor state folder, this can result in broken file persistence across reboots. This relates to the [[Qubes-Whonix]] design, which uses <code>bind-dirs</code> file persistence for the Tor folder and other select directories. At the very least, users would need to mount and then unmount the Tor folder in the same way as <code>bind-dirs</code> does. This is likely a complicated and time-consuming task.</ref> 
}}


There may be certain circumstances when [[Qubes-Whonix]] users may wish to copy the Tor state and custom configuration options from an existing <code>sys-whonix</code> ProxyVM to another <code>sys-whonix</code> instance. For example, this is useful for testing later Whonix releases without aiding deanonymization attempts by advanced adversaries <ref>As the same Tor entry guard is used.</ref> or when creating an identical backup that does not share any other persistent data, except for Tor state and custom torrc options.

=== Copy Tor State Files to Another sys-whonix Instance ===

The following instructions copy the Tor state from <code>sys-whonix-old</code> to <code>sys-whonix-new</code>.

'''1.''' In <code>sys-whonix-new</code>, stop Tor.

{{CodeSelect|code=
sudo systemctl stop tor@default
}}

'''2.''' In <code>sys-whonix-new</code>, remove the Tor state file.

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       ='''Warning:'''  Care should be exercised when removing files so extra spaces are not added to the file path! For example, if a space is accidentally placed before the asterisk in the command to remove the Tor state file, the <code>/</code> (root directory) and all system data would be lost.
}}


{{CodeSelect|code=
sudo su
}}

{{CodeSelect|code=
sudo rm /var/lib/tor/*
}}

'''3.''' In <code>sys-whonix-old</code>, stop Tor.

{{CodeSelect|code=
sudo systemctl stop tor@default
}}

'''4.''' In <code>sys-whonix-old</code>, copy the Tor state file across to <code>sys-whonix-new</code>.

{{CodeSelect|code=
sudo qvm-copy /var/lib/tor sys-whonix-new
}}

If the following error appears, it can be safely ignored (hit "OK" when prompted).

<pre>
qfile-agent: Fatal error: stat “VM” (error type: No such file or directory)
</pre>

'''5.''' In <code>sys-whonix-new</code>, list the QubesIncoming directory to ensure the Tor state file was copied over successfully.

{{CodeSelect|code=
ls ~/QubesIncoming/sys-whonix-old/tor
}}

The output should include the files below.

   <code>cached-certs cached-microdescs lock</code>
   <code>cached-microdesc-consensus cached-microdescs.new state</code>

'''6.''' In <code>sys-whonix-new</code>, move the newly copied Tor state file to ''/var/lib/tor''

{{CodeSelect|code=
sudo mv ~/QubesIncoming/sys-whonix-old/tor/* /var/lib/tor
}}

'''7.''' In <code>sys-whonix-new</code>, change ownership of all files in the Tor state folder to <code>debian-tor</code>

{{CodeSelect|code=
sudo chown -R debian-tor:debian-tor /var/lib/tor
}}

'''8.''' In <code>sys-whonix-new</code>, start Tor.

{{CodeSelect|code=
sudo systemctl start tor@default
}}

'''9.''' In <code>sys-whonix-new</code>, run [[whonixcheck]] to verify Tor is functioning properly. <ref>If Tor fails to start, verify the Tor folder has the proper file permissions with the following command <code>sudo ls -l /var/lib/tor</code></ref>

{{CodeSelect|code=
whonixcheck
}}

=== Copy Tor Configuration Options (torrc) to Another sys-whonix ===

These instructions copy custom Tor configuration options (torrc) from <code>sys-whonix-old</code> to <code>sys-whonix-new</code>.

'''1.'''  In <code>sys-whonix-old</code>, copy the <i>torrc</i> options across to <code>sys-whonix-new</code>.
<ref>
'''Note:'''  From Whonix 14 onward, all unique Tor configurations (torrc) options must be stored in <code>/usr/local/etc/torrc.d/50_user.conf</code> and nowhere else.</ref>

{{CodeSelect|code=
qvm-copy /usr/local/etc/torrc.d/50_user.conf sys-whonix-new
}}

If the following error appears, it can be safely ignored (hit "OK" when prompted).

  qfile-agent: Fatal error: stat “VM” (error type: No such file or directory)

'''2.''' In <code>sys-whonix-new</code>, list the <i>QubesIncoming</i> directory to ensure the <i>torrc</i> options were copied over successfully.

{{CodeSelect|code=
cat ~/QubesIncoming/sys-whonix-old/50_user.conf
}}

'''3.''' In <code>sys-whonix-new</code>, move the <i>50_user.conf</i> options from the <i>QubesIncoming</i> directory to the <i>50_user.conf</i> file.

{{CodeSelect|code=
sudo mv ~/QubesIncoming/sys-whonix-old/50_user.conf /usr/local/etc/torrc.d/50_user.conf
}}

'''4.''' In <code>sys-whonix-new</code>, change ownership of the Tor configuration file.

{{CodeSelect|code=
sudo chown -R root:root /etc/tor
}}

'''5.''' In <code>sys-whonix-new</code>, restart Tor so the newly copied Tor config options take effect.

{{CodeSelect|code=
sudo systemctl restart tor@default
}}

'''6.''' In <code>sys-whonix-new</code>, run [[whonixcheck]] to verify Tor is functioning properly. <ref>If Tor is not running after restart, it is possible to verify the newly migrated torrc options are valid with the following command <code>anon-verify</code> - the output should be similar to the following.
<br><i>
/===================================================================\
|                      Report Summary                               |
\===================================================================/
No error detected in your Tor configuration.
</i></ref>

{{CodeSelect|code=
whonixcheck
}}

= Unsafe Guard Rotation Methods =

== Fresh Tor Entry Guards by Regenerating the Tor State File ==

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = The action is inadvisable unless the user is aware of the consequences; see [[#Introduction|Introduction]]. 
}}


The following instructions manually change a user's Tor entry guards. One use case for this action is before permanently relocating to a new area.

Complete the following steps in Whonix-Gateway ([[Qubes-Whonix]]: <code>sys-whonix</code>).

'''1.''' {{Disable_Tor}}

'''2.''' Delete Tor's state file.

{{CodeSelect|code=
sudo rm /var/lib/tor/state
}}

'''3.''' Enable Tor at the new location.

{{Enable_Tor}}

== Configure Non-Persistent Entry Guards ==

Some users might consider configuring non-persistent entry guards so they constantly change. In almost all cases this is inadvisable, because persistent entry guards are a [[#Introduction|critical anonymity feature]]. A far more secure alternative is [[#Alternating Bridges|Alternating Bridges]], although this requires a considerable time investment.

<div class="toccolours mw-collapsible mw-collapsed">
To proceed in spite of the warning, press on Expand on the right.
<div class="mw-collapsible-content">
Complete these steps in Whonix-Gateway (<code>sys-whonix</code>).

'''1.''' {{Disable_Tor}}

'''2.''' Modify Tor settings.

{{Open /usr/local/etc/torrc.d/50_user.conf}}

Add.

{{CodeSelect|code=
DataDirectory /var/run/tor
}}

Save.

'''3.''' Enable Tor at the new location.

{{Enable_Tor}}

'''4.''' Before leaving this location, disable Tor and repeat the above steps if traveling to a different area. To revert to the usual guard nodes at home, remove the torrc setting before enabling the network or rollback to a VM snapshot that was created there.
</div>
</div>

= Notes =

The proposed Tails solutions towards AdvGoalTracking have disadvantages <ref>https://tails.boum.org/blueprint/persistent_Tor_state/</ref> <ref>https://blog.torproject.org/blog/tor-weekly-news-%E2%80%94-june-17th-2015#A_persistent_Tor_state_for_Tails</ref> and are not suitable options for Whonix. The reason is Whonix does not connect directly to a user's internet LAN, so trying to remember a network based on its SSID will not work. Unlike wireless access points, physical or virtual wired networks lack SSIDs and cannot be "remembered" that way.

Even if it were possible, it is best to avoid letting adversaries influence guard changes in any way. Spoofing MAC addresses or SSIDs would trigger the use of the alternative entry guard recorded for another "location profile". Global networks also have generic characteristics that cannot be differentiated from the point of view of a connecting device, resulting in the same guards being used on different networks.

Developers/Auditors-only: The development discussion related to this documentation chapter can be found [https://phabricator.whonix.org/T94 here].

= Footnotes =
{{reflist|close=1}}

= License =
{{License_Amnesia|{{FULLPAGENAME}}}}

{{Footer}}

[[Category:Documentation]]
