{{Header}}
{{#seo:
|description=Instructions on how to use VPN-Firewall. A Fail Closed Mechanism for VPNs. Prevent leaks when using VPNs. Force all connections through VPNs. Prevents shared VPN/Tor server leak bug.
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Unfinished! Testers/developers only! Not recommended for production use yet!
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = For a general introduction what VPN-Firewall does (and also what it NOT does) see:<br />
https://github.com/adrelanos/VPN-Firewall
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Use VPN-Firewall outside of Whonix only! (Whonix users should use the built-in VPN_FIREWALL features of Whonix-Gateway and/or Whonix-Workstation, see [[Tunnels/Introduction]] and its sub pages for documentation.)
}}

= Why =

If you simply add a VPN using common instructions, it generally fails open. That means, if the VPN breaks down, because the connection is interrupted, traffic will be send without the VPN.

It’s much safer when it fails closed, i.e. when the VPN connection breaks down, the whole internet connection must be down as long as the VPN connection isn’t restored.

= What does it do =

* Forbid outgoing traffic after the VPN / tunnel software broke down for some reason.
* Tight firewall rules, using iptables policy drop.
* Defeat [https://github.com/adrelanos/vpn-firewall/issues/12 shared VPN/Tor server leak bug]. [1]
* Only tested with OpenVPN. Should work with other VPN and tunnel clients such as PPTP in theory, you should test if it does what it claims anyway.
* Only tested on Debian Jessie. Should work in many Linux distribution supporting netfilter-persistent in theory, you should test if it does what it claims.
* Open Source / Free Software

[1] This should be a non-issue at least in Qubes once we get a Qubes sys-vpn ProxyVM.

= What does it NOT do =

* Care about DNS leaks. Consult your VPN software’s/provider’s documentation and configure /etc/resolv.conf to use the DNS server of your VPN server.
* Block WebRTC leaks.
* Defend against [https://blog.torproject.org/blog/bittorrent-over-tor-isnt-good-idea IP leaks]. If a locally installed application uses trickery to obtain the the users real IP and sends it somewhere though the VPN.
* Defend against adversaries, which are in position to run code locally, i.e. manipulate the firewall rules.
* Prevent any other kind trickery to circumvent using the VPN.
* Prevent leaks caused by bugs in the VPN software.
* Be compatible with Whonix-Gateway/Workstation. (VPN-Firewall is incompatible with Whonix-Gateway/Workstation’s firewall! Use Whonix documentation and use their built-in features.)
* Manage IPv6 traffic. IPv6 traffic is blocked.
* Install (Open)VPN.
* Configure (Open)VPN.
* Autostart (Open)VPN.
* Anything else not mentioned above in “What does it do”.
* Untested to work in Qubes ProxyVMs. (They have a different way to up networking and firewall.)

= How to use VPN-Firewall =
== Preparation ==
Since setting up OpenVPN including a secure, leak preventing fail closed mechanism is challenging, it is highly recommend to learn how to set up OpenVPN on Debian stable (currently: jessie). Get a Debian stable VM. Install the Debian openvpn package. (sudo apt-get install openvpn) Figure out how to set up your VPN using OpenVPN in the command line. Only proceed if you succeeded setting that up. Do not post support requests regarding these instructions before you succeeded with that basic exercise. You find some help with general VPN setup in the [[#VPN Setup]] chapter or on the [[TestVPN]] page. There however are ways to get [[Support|help]] from various sources for that basic exercise, also your VPN provider may be of assistance.

Existing users who upgrade may remember variable VPN_SERVERS. Don't wonder. That variable was abolished for better security. <ref>https://phabricator.whonix.org/T460</ref>

== Remove old versions of VPN-Firewall ==
If you had any installed. Otherwise you can skip this.

<pre>
sudo update-rc.d vpnfirewall remove
sudo update-rc.d vpn-firewall remove
sudo rm /usr/local/bin/vpnfirewall
sudo rm /usr/bin/vpnfirewall
sudo rm /usr/bin/vpn-firewall
sudo rm /etc/init.d/vpnfirewall
sudo rm /etc/init.d/vpn-firewall
</pre>

== Qubes specific ==
Non-Qubes users can ignore this.

1) If you are using [https://www.qubes-os.org Qubes OS] as your host operating system, it is recommended to use a StandaloneVM for this. For more information, see footnote. <ref>
This is due to technical limitations. The VPN-Firewall instructions assume to modify a files located in the root image, which by default do not persist in TemplateBasedVMs. So a convenient one time setup and then having it just work including autostart of VPN-Firewall and OpenVPN will not work yet. Help welcome!

In future, perhaps the following instructions could be made to work after some [https://github.com/marmarek/qubes-core-agent-linux/blob/master/vm-systemd/bind-dirs.sh bind-dirs.sh] enhancements.

When using a TemplateBasedVM, to persist these changes use the Qubes bind dirs mechanism.

<pre>
sudo mkdir /rw/config/qubes-bind-dirs.d
</pre>

{{Open with root rights|filename=
/rw/config/qubes-bind-dirs.d/50_user.conf
}}

<pre>
binds+=( '/etc/openvpn' )
binds+=( '/lib/systemd/system/openvpn@openvpn.service' )
binds+=( '/etc/systemd/system/multi-user.target.wants/openvpn@openvpn.service' )
</pre>

TODO: Does not work yet. Files need to exist first.

TODO: umount during run is probably not sane.
<pre>
/usr/lib/qubes/bind-dirs.sh umount
</pre>

TODO: re-running bind-dirs.sh without previous umount does not work yet.
<pre>
/usr/lib/qubes/bind-dirs.sh
</pre>
</ref>

2) Enable netfilter-persistent Qubes qvm-service.

<pre>
Qubes VM Manager -> right click on VM -> services -> enter (without the single quotes) 'netfilter-persistent' -> click on + -> OK
</pre>

== VPN Setup ==
====== Introduction ======
In the following example we are using the free Riseup VPN, because it is known to support TCP, UDP, SSL. You can use any VPN you like.

Update: Riseup "legacy" VPN may have been discontinued. It did not work anymore for the author of these instructions. The riseup replacement service bitmask has not been tested.

====== Get VPN Certificate ======
Look inside the [https://help.riseup.net/vpn riseup VPN help page] for [https://help.riseup.net/en/riseup-ca <code>RiseupCA.pem</code>] and (right click) [https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem download] it. Store it in {{Code2|/etc/openvpn/RiseupCA.pem}}.

<pre>
scurl https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem | sudo tee /etc/openvpn/RiseupCA.pem
</pre>

====== VPN Credentials ======
You need a riseup.net account. You need to know your riseup account name. Go to https://user.riseup.net/users/riseupusername/vpn to obtain your VPN secret. (VPN password) (Replace "riseupusername" with your actual riseup user name.) (Or just got to https://user.riseup.net, login and click on "VPN".) 

{{Open with root rights|filename=
/etc/openvpn/auth.txt 
}}

Add. (Add your actual user name and password.)

<pre>
riseupusername
vpnsecret
</pre>

Save.

====== VPN IP Address ======
Note, you must use IP addresses. You cannot use DNS hostnames. For example, you could not use {{Code2|vpn.riseup.net}}. You have to use IP addresses such as for example {{Code2|198.252.153.226}}. You find out the IP from your provider or by using nslookup on the host. Example. (You need to use your actual DNS hostname, not {{Code2|vpn.riseup.net}}.)

<pre>
nslookup vpn.riseup.net
</pre>

====== VPN Configuration File ======
{{Open with root rights|filename=
/etc/openvpn/openvpn.conf
}}

Add.

Note: make sure to adjust the {{Code|remote 198.252.153.226 80}} variable in your config (unless you are using {{Code|nyc.vpn.riseup.net}} as your VPN service). Replace the IP ({{Code|198.252.153.226}}) and port ({{Code|80}}) to match your VPN service.

<pre>
client

auth-user-pass auth.txt

## using nyc.vpn.riseup.net 80
remote 198.252.153.226 80

ca RiseupCA.pem
remote-cert-tls server
script-security 1

user tunnel
iproute /usr/bin/ip-unpriv

dev tun0
persist-tun
persist-key
</pre>

Save.

====== DNS Configuration ======
Currently only manual.

{{Open with root rights|filename=
/etc/resolv.conf
}}

Comment out.

<pre>
#nameserver 10.152.152.10
</pre>

Add.

<pre>
## Riseup.net OpenVPN DNS server
nameserver 172.27.100.1
</pre>

If you are not using riseup, you need to replace 172.27.100.1 and enter the virtual LAN IP address of your VPN providers DNS server. You might be able to obtain it from your VPN provider. You can also try to infer it after successfully connecting to the VPN from running "sudo route". The first destination default gateway should function as DNS server also.

Save.

If you want to be sure, that ''/etc/resolv.conf'' does not get overwritten by other packages. (Such as DHCP or resolvconf.)

{{CodeSelect2|code=
sudo chattr +i /etc/resolv.conf
}}

If you ever want to remove it, use ''-i''.

(A more usable way is TODO research, help welcome. As possible starting point, see footnote. <ref>
Possibly Install Packages. But would have to happen much earlier before changing Whonix firewall rules. (Because then Tor-only apt will no longer work.)

[[Update]] package lists.
<pre>
sudo apt-get update
</pre>

Install resolvconf. Since this is used by /etc/openvpn/update-resolv-conf. We probably better should not install it by default since it is not needed for Whonix generally but may introduce new issues.

<pre>
sudo apt-get install resolvconf
</pre>

Possibly /etc/openvpn/openvpn.conf changes.

<pre>
up "/usr/bin/sudo script_type=up dev=tun0 /etc/openvpn/update-resolv-conf"
down "/usr/bin/sudo script_type=down dev=tun0 /etc/openvpn/update-resolv-conf"
</pre>

Possibly /etc/sudoers.d/tunnel-unpriv additions.

<pre>
tunnel ALL=(ALL) NOPASSWD: /etc/openvpn/update-resolv-conf *
Defaults:tunnel env_keep += script_type
Defaults:tunnel env_keep += dev
</pre>
</ref>)

====== Configuration Folder Permissions ======
<pre>
sudo adduser tunnel
</pre>

Since we will be running OpenVPN under user tunnel, that user requires read access to folder /etc/openvpn.

<pre>
sudo chown -R tunnel:tunnel /etc/openvpn
</pre>

<pre>
sudo chown -R tunnel:tunnel /var/run/openvpn
</pre>

===== systemd setup =====
Create the OpenVPN systemd service file.

<pre>
sudo cp /lib/systemd/system/openvpn@.service /lib/systemd/system/openvpn@openvpn.service
</pre>

Enable the OpenVPN systemd service file.

<pre>
sudo systemctl enable openvpn@openvpn
</pre>

Start the OpenVPN systemd service.

<pre>
sudo service openvpn@openvpn start
</pre>

Check the OpenVPN systemd service status.

<pre>
sudo service openvpn@openvpn status
</pre>

===== Test the VPN =====
Ping test. Ping some IP. In the example below, we ping google's DNS server. Maybe better use some server of your choice.

<pre>
ping 8.8.8.8
</pre>

Test TCP.

<pre>
TODO
</pre>

DNS Test.

<pre>
nslookup google.com
</pre>

Test DNS and output IP address.

<pre>
wget myip.is
</pre>

===== Install VPN-Firewall =====
<pre>
sudo apt-get install netfilter-persistent git
</pre>

<pre>
git clone https://github.com/adrelanos/vpn-firewall.git
</pre>

<pre>
cd vpn-firewall
</pre>

<pre>
git checkout development
</pre>

Signed git tags and commits available. TODO: document how to verify, use some wiki template

<pre>
make deb-icup
</pre>

===== Forwarding =====
If you want to forward traffic for virtual machines (or other computers on the LAN), it can be enabled through an option.

'''Experimental!''' (The forwarding feature has not yet been tested for leaks!)

(The forwarding feature was introduced in May 29 2016. You might need to update vpn-firewall.)

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = The forwarding feature has only been developed and tested in a Qubes ProxyVM. Non-Qubes is [[FAQ#What_do_you_mean_by_unsupported.3F|unsupported]]!
}}

Create a new folder.

* Qubes users: run the following command.
* Non-Qubes users: can skip this.

<pre>
sudo mkdir -p /rw/config/vpn-firewall.d/
</pre>

Create a new file.

* Qubes users: /rw/config/vpn-firewall.d/50_user.conf
* Non-Qubes users: /etc/vpn-firewall.d/50_user.conf

Add.

<pre>
FORWARDING=true
</pre>

Save.

===== Start VPN-Firewall =====
Qubes users only: create qvm-service netfilter-persistent status file.

<pre>
sudo touch /var/run/qubes-service/netfilter-persistent
</pre>

Start VPN-Firewall by restarting netfilter-persistent. <ref>
Debian feature request: [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=824290 add dpkg trigger for /usr/share/netfilter-persistent/plugins.d folder to have newly installed plugins take effect]
</ref>

<pre>
sudo service netfilter-persistent restart
</pre>

Check netfilter-persistent status.

<pre>
sudo service netfilter-persistent status
</pre>

Should look like the following.

<pre>
● netfilter-persistent.service - netfilter persistent configuration
   Loaded: loaded (/lib/systemd/system/netfilter-persistent.service; enabled)
  Drop-In: /lib/systemd/system/netfilter-persistent.service.d
           └─30_qubes.conf
   Active: active (exited) since Wed 2016-05-11 19:21:36 UTC; 2s ago
  Process: 3950 ExecStop=/usr/sbin/netfilter-persistent stop (code=exited, status=1/FAILURE)
  Process: 3954 ExecStart=/usr/sbin/netfilter-persistent start (code=exited, status=0/SUCCESS)
 Main PID: 3954 (code=exited, status=0/SUCCESS)

May 11 19:21:36 work netfilter-persistent[3954]: run-parts: executing /usr/share/netfilter-persistent/plugins.d/30_vpn-firewall start
May 11 19:21:36 work netfilter-persistent[3954]: OK: The firewall should not show any messages,
May 11 19:21:36 work netfilter-persistent[3954]: OK: besides output beginning with prefix OK:...
May 11 19:21:36 work netfilter-persistent[3954]: OK: VPN firewall loaded.
May 11 19:21:36 work systemd[1]: Started netfilter persistent configuration.
</pre>

(There will only be a 30_qubes.conf drop-in for Qubes users. Non-Qubes users can ignore this.)

At next boot, VPN-Firewall should be automatically starting. It would not hurt to check it really does by checking netfilter-persistent status at next boot.

===== Test VPN-Firewall =====

1) Have VPN-Firewall set up as per above instructions.

2) Test if it works. Check whatismyipaddress.com if you your external IP is from the VPN.

3) Kill the VPN client.

Example OpenVPN:

<pre>
sudo killall openvpn
</pre>

4) Check if you can still connect to whatismyipaddress.com.

If yes, bad, something is wrong.

If no, good, you won't connect to any remote servers.

===== Qubes specific - Fallback Firewall =====
Qubes users only. Non-Qubes users can skip this chapter.

Untested! Please test and leave feedback!

The following is great for users for additional protection from leaks. This fallback is as save as previous ways to firewall VPNs. It however would not defeat the [https://github.com/adrelanos/vpn-firewall/issues/12 shared VPN/Tor server leak bug]. (It however is awful for developers since this would cloak eventual leaks in VPN-Firewall.)

<pre>
Qubes VM Manager -> sys-vpn -> right click -> VM Settings -> Firewall rules -> choose "deny all network access except..." -> add the IP and port of your VPN server -> OK
</pre>

===== Done =====
Done.

= Appendix =
===== Troubleshooting =====
{{VPN-Firewall/Troubleshooting}}

===== Unload VPN Firewall =====
How to unload VPN Firewall? If you know what you are doing... Either...

<pre>
sudo /usr/share/netfilter-persistent/plugins.d/30_vpn-firewall flush
</pre>

Or...

<pre>
sudo service netfilter-persistent flush
</pre>


===== Security Discussion =====
Statement by the creator of VPN-Firewall, Patrick Schleizer.

I don't think I can ever make this standalone VPN-Firewall  project as leak proof as Whonix as is. This is because I invented VPN-Firewall alone from scratch - in comparison Whonix was an evolution of existing previous documentation and created by multiple contributors. Also VPN-Firewall is younger, receives less attention by the community, and a lot more difficult to set up than Whonix. All these factors lead to lower popularity and thereby less eyes on the implementation. Specifically the forwarding [[#Forwarding]] feature should be activated with care, since it is my first project using IP forwarding.

===== Alternatives =====

* One could play with the linux equivalent of the [http://cranthetrader.blogspot.se/2011/10/dont-allow-non-vpn-traffic.html route] command.
* [http://www.inputoutput.io/hardening-your-vpn-setup-with-iptables/ Hardening your VPN Setup with iptables]
* [http://www.guavi.com/vpncheck_free.html VPNCheck] - No source code. Nice looking user interface.
* [http://vpnetmon.webs.com/ VPNetMon] - No source code. Windows only. Checks every, let’s say 500 ms, if the VPN IP is still valid, if not, kill a list of applications. This is not very secure, it’s a game if that time period is sufficient to stop a leak and if killing the applications is fast enough. Nice looking user interface.
* [http://openvpnchecker.com/ OPENVPN Watchdog] - No source code. Windows only. Nice looking user interface.
* [VPN Lifeguard](https://sourceforge.net/projects/vpnlife)

{{Footer}}

[[Category:Documentation]]
