{{Header}}

= About this page =

'''This is outdated documentation which no longer applies. Kept in case it will be required again in future.'''

= Updating Tor =

Tor was installed on Whonix according to [https://www.torproject.org/docs/debian#ubuntu official instructions for Ubuntu]. You can update Tor (and the rest of the system) using ''apt-get update'' and ''apt-get dist-upgrade''.

If you run in the following error message when running ''apt-get update'' on the Gateway...

<pre>W: GPG error: http://deb.torproject.org precise Inrelease: The following signature were invalid: Keyexpired 1346668560</pre>

...or into the following error message on the Gateway when running ''apt-get dist-upgrade'':

<pre>Warning: The following packages cannot be authenticated!
deb.torproject.org-keyring tor
Install these packages without varification?</pre>

...please use the workaround below. Please do not install without verification for your own safety!

Temporary fix. Run these two commands. (Check if they are still current and genuine in official instructions for Ubuntu.)

<pre>gpg --keyserver keys.gnupg.net --recv 886DDD89

gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -</pre>

(If they fail for the first time, perhaps because you are on a slow network or slow Tor circuit, run them a few times until the succeed.)

,, Technical problem: The latest Whonix release is a few days ago and in meanwhile there is a new deb.torproject.org-keyring got renewed while the old torproject deb keys expired. Fixing the problem requires a new Whonix release. It will be fixed in 0.3.0.

= VirtualBox Guest Additions =

== Introduction ==

Written and tested with Whonix 0.2.1 (Ubuntu precise). Many things can go wrong and none or the very least of them will be caused by Whonix. This has only limited support by the Whonix developers, because 1. it's not recommended for security reasons and 2. the guest additions related bugs and instructions are somewhat out of the scope of the Whonix project.

Installation is somewhat difficult and no packages exist. Just search the internet and you'll see, that loads of people having issues installing the VirtualBox guest additions. People having problems for years. VMware is of no alternative, people are also having trouble installing the VMware tools into Linux guests. The issue with the guest additions is ridiculous. For years no solution has been found. With each kernel update, recompilation is required, and quite often, due to some updates, complication becomes difficult or impossible for a long time.

Also see article, [[http://www.phoronix.com/scan.php?page#news_item&px#OTk5Mw|The VirtualBox Kernel Driver Is Tainted Crap]].

If you are having trouble, than in most cases not because of Whonix. The Whonix setup is a regular Ubuntu Linux and VirtualBox. You can try asking the regular VirtualBox and Ubuntu resources if you have trouble.

= TorChat source package =

== HowTo ==

'''EXPERIMENTAL''' Experimental as in it is difficult to install. Only use it in case you trust TorChat. There shouldn't be any anonymity leaks and it should be as safe as other hidden services in general and in Whonix.

Learn about [[Hidden Services]] in Whonix first and learn how to set up the hidden webserver. This will ease following this guide.

On Whonix-Gateway.

Open your {{Code2|/etc/tor/torrc}}.

<pre>sudo nano /etc/tor/torrc</pre>

Add.

<pre>HiddenServiceDir /var/lib/tor/torchat_service/
HiddenServicePort 11009 192.168.0.11:11009</pre>

Save. Reload Tor.

<pre>sudo service tor reload</pre>

On Whonix-Gateway.

Install dependencies.

<pre>sudo apt-get install python python-wxgtk2.8</pre>

Get your onion address.

<pre>nano /var/lib/tor/torchat_service/hostname</pre>

Backup your key, if you want to ever restore it one another machine, a newer Whonix-Workstation or after hdd failure.

<pre>/var/lib/tor/torchat_service/private_key</pre>

Download the latest Python version of TorChat source code, for example as time of writing torchat-source-0.9.9.553.zip - Python source code (classic standalone 0.9.9 version) from (https://github.com/prof7bit/TorChat/downloads) and store it in ''/home/user''.

Unpack.

<pre>unzip torchat-source-0.9.9.553.zip</pre>

Get into the torchat source folder. For example.

<pre>cd /home/user/torchat-source-0.9.9.553/</pre>

Get into the src folder.

<pre>cd src</pre>

Get into the Tor folder.

<pre>cd Tor</pre>

Rename tor.sh.

<pre>mv tor.sh backup_tor.sh</pre>

Go back to the src folder.

<pre>cd ..</pre>

Create torchat.ini.

<pre>nano torchat.ini</pre>

Add the following content.

<pre>[client]
listen_interface = 192.168.0.11
listen_port = 11009
own_hostname = <your onion hostname without .onion>

[tor]
tor_server = 192.168.0.10
tor_server_control_port = 9154
tor_server_socks_port = 9154

[tor_portable]
tor_server = 192.168.0.10
tor_server_control_port = 9154
tor_server_socks_port = 9154</pre>

Make torchat executable.

<pre>chmod +x torchat.py</pre>

Run torchat.

<pre>./torchat</pre>

=== Alternative ===

After installing the dependencies we could also force install the torchat deb package.

<pre>sudo dpkg -i --force-depends torchat-0.9.9.553.deb</pre>

And then configure the files inside ''/home/user/.torchat''. I don't know if that may be the better way.

= Mixmaster =

== MX capable DNS resolver ==

No longer required.

Mixmaster needs to resolve MX DNS records, [https://trac.torproject.org/projects/tor/ticket/7829 while Tor does not support that]. We have to install a DNS resolver capable of doing that. It still comes with caveats.

Required knowledge:

* Introduction chapter of [[Secondary DNS Resolver]]

The [[Secondary DNS Resolver#example-with-cznic-labs-dns-resolver|Example with CZ.NIC Labs DNS resolver]] worked in this case.

Security considerations when replacing the system wide DNS resolver:

<ul>
<li>The third party DNS resolver traffic goes through its own circuit, which is good.</li>
<li><p>All (custom installed) applications not configured to use a SocksPort (see [Stream Isolation]), would resolve their DNS through the system wide DNS resolver, which would be the third party resolver, giving too much power to it, because it's always the same, only one service provider, not changing like Tor circuits but static. ## Install Postfix ##</p>
<p>sudo apt-get install postfix ## configure postfix as sattelite system, default settings</p></li></ul>

Technical background: Mixmaster requires either - a) An (open) smtp server SMTPRELAY in ''/etc/mixmaster/remailer.conf''. Unfortunately, I haven't found any open smtp server (search term: open relay). A mailserver where the user registers first would probably work, but this would defeat the original idea: sending e-mails without depending on registration. Or, - b) a mta (mail transfer agent), which speaks to the remailer directly. '''TODO''': Are there enough Tor exit relays, which allow the SMTP port and does their ISP allow to speak SMTP? If there are too few servers, it could be bad for anonymity.

Open ''/etc/postfix/main.cf''.

<pre>kdesudo kwrite /etc/postfix/main.cf</pre>

Replace the content with the following.

<pre># See /usr/share/postfix/main.cf.dist for a commented, more complete version


# Debian specific:  Specifying a file name will cause the first
# line of that file to be used as the name.  The Debian default
# is /etc/mailname.
#myorigin = /etc/mailname

smtpd_banner = $myhostname ESMTP $mail_name (Debian/GNU)
biff = no

# appending .domain is the MUA's job.
append_dot_mydomain = no

# Uncomment the next line to generate "delayed mail" warnings
#delay_warning_time = 4h

readme_directory = no

# TLS parameters
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache

# See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
# information on enabling SSL in the smtp client.

myhostname = host.localdomain
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
mydestination = host, host.localdomain, localhost.localdomain, localhost
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_command = 
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = loopback-only
inet_protocols = all

relayhost = 1.1.1.1
#relayhost = 2.2.2.2</pre>

== Debugging Postfix ==

Looking into the mail log.

<pre>tail -f /var/log/mail.info</pre>

Should contain something like this.

<pre>
<date> <time> debian postfix/pickup[id]: id2: uid=1000 from=<user>
<date> <time> debian postfix/cleanup[id]: id2: message-id=<id3.id4@host.localdomain>
<date> <time> debian postfix/qmgr[id]: id2: from=<user@host.localdomain>, size=30000, nrcpt=1 (queue active)
<date> <time> debian postfix/smtp[300]: id2: to=<remailer@breaka.net>, relay=mail.breaka.net[202.75.54.8]:25, delay=30, delays=0.30/0.01/30/3.0, dsn=2.0.0, status=sent (250 OK id=id5-id6-id7)
<date> <time> debian postfix/qmgr[id]: id2: removed
</pre>

Reading local mail.

<pre>## Either with cli tool mail.
mail

## Or using gui tool Icedove (Debian version of Mozilla Thunderbird)
## using movemail.</pre>

If all went well, there will be no local mail. Only error messages result in local mails.

= Bugs =

* In Whonix 0.4.5, due to a [https://trac.torproject.org/projects/tor/ticket/7668 Tor Browser upstream bug] (they forgot to update the changelog) and because the keyserver is/was down, the torbrowser and whonixcheck script in Whonix can no longer find out which Tor Browser version is locally installed. ([https://sourceforge.net/p/whonix/discussion/general/thread/6122990d/ Whonix Bug Report]) The [[TorBrowser#update-tor-browser|Update Tor Browser]] chapter contains a workaround and a fix is available for testers.

= Attack matrix in different order =

<table>
<thead>
<tr class="header">
<th align="left">attack</th>
<th align="left">TBB</th>
<th align="left">TBB in a VM</th>
<th align="left">Tails</th>
<th align="left">Tails in a VM</th>
<th align="left">Whonix Standard Download version host+vm+vm</th>
<th align="left">Whonix Physical Isolation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">(1) Protocol IP leak</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">safe</td>
</tr>
<tr class="even">
<td align="left">(2) exploit + Unsafe Browser</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">safe</td>
</tr>
<tr class="odd">
<td align="left">(3) exploit + root exploit + Unsafe Browser</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">safe</td>
</tr>
<tr class="even">
<td align="left">(4) root exploit + Unsafe Browser</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">safe</td>
</tr>
<tr class="odd">
<td align="left">(5) exploit + vm exploit + Unsafe Browser</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
</tr>
<tr class="even">
<td align="left">(6) exploit + vm exploit + exploit against physically isolated Whonix-Gateway</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
</tr>
<tr class="odd">
<td align="left">(7) vm exploit</td>
<td align="left">safe</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">safe</td>
</tr>
<tr class="even">
<td align="left">(8) vm exploit + exploit against physically isolated Whonix-Gateway</td>
<td align="left">safe</td>
<td align="left">fail</td>
<td align="left">safe</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
</tr>
<tr class="odd">
<td align="left">(9) exploit against Tor process</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
</tr>
<tr class="even">
<td align="left">(10) attack against the Tor network</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
<td align="left">fail</td>
</tr>
</tbody>
</table>

= E-Mail Notification =

Users, who have an (anonymous) sourceforge.net account, could go to the [https://sourceforge.net/projects/whonix/ Whonix sf.net Project Page], scroll down to ''Update Notifications'' and hit the ''Subscribe to Updates'' button. They would receive notifications about new releases sent to their (anonymous) [E-Mail] address.

There is currently no way for users to subscribe to sf.net blogs or wiki, but such a feature [https://sourceforge.net/p/allura/tickets/5702/ has been requested].

== Sourceforge.net E-Mail Notification ==

Didn't work reliable.

E-mail notification: For users having an account on sf.net, there is on [https://sourceforge.net/p/whonix/code/ sf.net] git is an [[E-Mail]] subscribe button: '''M'''.

This is an example how such a mail could look like:

''experimental: comment by adrelanos http://sourceforge.net/p/whonix/code/ci/a1740dfcd391cedfa625d72b990b2a587620df30/''

''experimental: Whonix-Workstation_packages: added gtk3-engines-oxygen by adrelanos http://sourceforge.net/p/whonix/code/ci/7375070a7986230028bf4e82a6ab3ecb420bfd60/''

''---''

''Sent from sourceforge.net because you indicated interest in https://sourceforge.net/p/whonix/code/''

''To unsubscribe from further messages, please visit https://sourceforge.net/auth/prefs/''

= Restrict Flash Settings =
'''You can skip this chapter. It's no longer of use, because if you use BetterPrivacy as recommended above, you won't need this.'''

Flash applications can set cookies, so-called Local Shared Objects (LSO), independently of the browser's settings. These cookies are able to save data up to 100 Kb. Usually, they save settings but they may be used to track surfers as well.

In order to manage the settings of your Adobe Flash Player, Macromedia offers a [http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager.html Flash application] on its website. There you may e.g. configure the rules concerning the data storage and the rights for using camera and microphone. The settings are spread over several flash applications. Deactivate all functions that allow sharing and saving of data. The storage of LSOs may be deactivated on the [http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager03.html Global Storage Settings panel].

Hint: Only in case you previously deactivated JavaScript: You must have Javascript enabled for adobe.com and macromedia.com temporary to run the Flash application. 

[[Image:flash1.png|none]]

Furthermore, the cookies already saved have to be deleted. This functionality may be found on the [http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager07.html Website Storage Settings panel].

[[Image:flash2.png|none]]

Personal side note: you see how ridiculous that plugin is, if the usage of the Flash settings manager depends on their website being reachable.

= Build Documentation dpkg-source commit =
To dpkg commit changes, run the debian upstream tarball creation script.

<pre>
./help-steps/make-debian-package-upstream-tarball
</pre>

Then run.

<pre>
dpkg-source --commit
</pre>

When it asks "Enter the desired patch name:" just enter anything you wish, for example "buildconfig". In the following window, you don't have to fill out anything. Just save and close the editor. <ref>This will create a Debian quilt patch.</ref> You only have to do this once and won't be asked again to do this, unless you add another change which needs to be dpkg-source committed.

If you want to undo the dpkg-source committed change, check the contents of the {{Code|.pc}} and the {{Code|debian/patches}} folder and delete it.
= Build Documentation - Override Whonix Version =
Since the Whonix debian package version number is auto derived from {{Code|git describe}} and used for [[Download#Whonix_Version_Check_and_Whonix_News|Whonix News]] download, it is recommended to override it. <ref>Alternatively, you could deactivate or override [[Download#Whonix_Version_Check_and_Whonix_News|Whonix News]] in the whonixcheck script and manually stay on top of news.</ref> You could add a file to {{Code|buildconfig.d}}, for example {{Code|buildconfig.d/50_version}} and add for example.

<pre>
temp="$WHONIX_BUILD_CLOSEST_GIT_TAG"

## Using `export`, so whonix_shared/usr/share/whonix/chroot-scripts-post.d/70_log_build_version can read it.
export WHONIX_BUILD_WHONIX_VERSION_NEW="$(echo "$temp" | sed 's/-/./g')"

echo "WHONIX_BUILD_WHONIX_VERSION_NEW: $WHONIX_BUILD_WHONIX_VERSION_NEW"

WHONIX_BUILD_NEW_CHANGELOG_VERSION=""$WHONIX_BUILD_WHONIX_VERSION_NEW""-debpackage""$WHONIX_BUILD_NEW_DEB_REVISION_VERSION""

echo "WHONIX_BUILD_NEW_CHANGELOG_VERSION: $WHONIX_BUILD_NEW_CHANGELOG_VERSION"
</pre>

While building, check if WHONIX_BUILD_NEW_CHANGELOG_VERSION looks sane. <ref>For example {{Code|WHONIX_BUILD_NEW_CHANGELOG_VERSION: 2:6.13.g4218c564e556cb68a3f18dc4040db5353690706c}} does not look sane, but {{Code|WHONIX_BUILD_NEW_CHANGELOG_VERSION: 2:6-debpackage1}} looks sane.</ref>

If you added a new file to {{Code|buildconfig.d}}, for example {{Code|buildconfig.d/50_target_arch}}, those have to be dpkg-source committed before building Whonix. Otherwise you'll get an error message. (Which looks like this:<ref name=dpkgcommit>
<pre>
 dpkg-source -b Whonix
dpkg-source: info: using source format `3.0 (quilt)'
dpkg-source: info: building whonix using existing ./whonix_138adretemp.4.gd3d4f5fa9e18fddafdf5b09b428ba04dfb2a6d1e.orig.tar.gz
dpkg-source: info: local changes detected, the modified files are:
 Whonix/buildconfig.d/50_target_arch
dpkg-source: error: aborting due to unexpected upstream changes, see /tmp/whonix_138adretemp.4.gd3d4f5fa9e18fddafdf5b09b428ba04dfb2a6d1e-debpackage1.diff.fIiBKC
dpkg-source: info: you can integrate the local changes with dpkg-source --commit
dpkg-buildpackage: error: dpkg-source -b Whonix gave error exit status 2
debuild: fatal error at line 1361:
dpkg-buildpackage -rfakeroot -D -us -uc -sa failed
++ error_handler_general
++ local return_code=29
++ rm --force /etc/apt/sources.list.d/whonixtestingtemp.list
++ rm --force /etc/apt/apt.conf.d/90whonix-build-confold
+++ caller
++ echo '
BASH_COMMAND: sudo -E -u user debuild -p"gpg             --no-default-keyring             --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"             --default-key "$DEBEMAIL"
            " -sa
return_code: 29
ERROR ./build-steps.d/1200_create-debian-packages: | caller: 173 ./build-steps.d/1200_create-debian-packages
'

BASH_COMMAND: sudo -E -u user debuild -p"gpg             --no-default-keyring             --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER"             --default-key "$DEBEMAIL"
            " -sa
return_code: 29
ERROR ./build-steps.d/1200_create-debian-packages: | caller: 173 ./build-steps.d/1200_create-debian-packages

++ exit 1
</pre>
</ref>).

= Whonix 0.5.6 Download Matrix =
<big>Version: <span style="color: green">{{Version}}</span></big>

'''Note:''' You need to download both Gateway and Workstation virtual machine images.

{| class="wikitable" style="text-align: center;background-color: #fff"
|- style="background-color: #f9f9f9"
| style="height: 47px;"|
| style="white-space: nowrap; width: 137px;"|'''Whonix-Gateway'''
| style="white-space: nowrap; width: 137px;"|'''Whonix-Workstation'''
| style="white-space: nowrap; width: 140px;"|'''[[Hide Tor and Whonix from your ISP|Anonymous Download]]<br /> possible <ref name=anonymousdownload>By using the [https://www.torproject.org/download/download-easy.html.en Tor Browser Bundle] (TBB). For an introduction, see [[Tor Browser]]. See also [[Hide Tor and Whonix from your ISP]].</ref>'''
| style="width: 135px;"|'''[[Download Security]]<br /> without [[#Verify the Whonix images|Verification]]'''
| style="width: 135px;"|'''[[Download Security]]<br /> with [[#Verify the Whonix images|Verification]]'''
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:HTTP.png|40px]] {{Anchor|Whonix_signature}}
| <html><a href="http://sourceforge.net/projects/whonix/files/whonix-</html>{{Version}}<html>/Whonix-Gateway.ova/download" target="_blank">Download</a></html>
| <html><a href="http://sourceforge.net/projects/whonix/files/whonix-</html>{{Version}}<html>/Whonix-Workstation.ova/download" target="_blank">Download</a></html>
|{{Yes}} <ref name=anonymousdownload />
| style="background-color: {{Red}}"| Low <ref>[[Warning#Man-in-the-middle_attacks|Man-in-the-middle attacks]] could poison the download.</ref>
| style="background-color: {{Green}}"| High <ref name=openpgpverification>It does not matter if you did the bulk download over an insecure channel, if you use OpenPGP verification at the end.</ref>
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:Button_sig.png|25px]]
| white-space: nowrap;"|<html><a href="/download/</html>{{Version}}<html>-sig/Whonix-Gateway.ova.sig">OpenPGP Signature</a></html>
| white-space: nowrap;"|<html><a href="/download/</html>{{Version}}<html>-sig/Whonix-Workstation.ova.sig">OpenPGP Signature</a></html>
|{{Yes}} <ref name=anonymousdownload />
| -
| -
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:Crypto_key.png|25px]]
| colspan="2"|Verify the images using the [[Whonix Signing Key|Signing Key]]
|{{Yes}} <ref name=anonymousdownload />
| -
| -
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:btorrent-icon.png|25px]]<ref>Torrent clients known to work: transmission, Vuze, Deluge. Check this [https://en.wikipedia.org/wiki/Magnet_URI_scheme#Clients_table clients table]. If nobody is [http://wiki.answers.com/Q/What_are_seeders_and_leechers seeding] at the time, only clients with the [https://en.wikipedia.org/wiki/Magnet_URI_scheme#Normal_.28as.29 "as"] feature can be used, because we are providing a [https://en.wikipedia.org/wiki/BitTorrent#Web_seeding webseed].</ref>
| <html><a href="/download/</html>{{Version}}<html>-torrent/Whonix-Gateway.ova.torrent">Torrent Download</a></html>
| <html><a href="/download/</html>{{Version}}<html>-torrent/Whonix-Workstation.ova.torrent">Torrent Download</a></html>
|{{No}}
| style="background-color: {{Yellow}}"| Medium <ref name=atleastssl>It's at least as secure as [[SSL]] and [https://en.wikipedia.org/wiki/SHA-1 SHA-1], better than plain http. This is because you get the torrent file or magnet link over https and the torrent/magnet client checks the SHA-1 checksum at the end. Using OpenPGP verification would be safer.</ref>
| style="background-color: {{Green}}"| High <ref name=openpgpverification />
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:Magnet_icon.svg.png|20px]] <ref>Magnet link clients known to work: gtk-gnutella. Check this [https://en.wikipedia.org/wiki/Magnet_URI_scheme#Clients_table clients table]. If nobody is [http://wiki.answers.com/Q/What_are_seeders_and_leechers seeding] at the time, only clients with the [https://en.wikipedia.org/wiki/Magnet_URI_scheme#Normal_.28as.29 "as"] feature can be used, because we are providing a [https://en.wikipedia.org/wiki/BitTorrent#Web_seeding webseed].</ref>
| <html><a href="magnet:?xt=urn:btih:fba5ace7a163afae54aa1677cf92540a38d5914c&dn=Whonix-Gateway.ova&tr=http%3A%2F%2Fannounce.torrentsmd.com%3A6969%2Fannounce&as=http%3A%2F%2Fwebseed.whonix.org%3A8008%2FWhonix-Gateway-0.5.6.ova">Magnet Link</a></html>
| <html><a href="magnet:?xt=urn:btih:7255075def146b6f5d7b6e23121e1e5a5bedf13d&dn=Whonix-Workstation.ova&tr=http%3A%2F%2Fannounce.torrentsmd.com%3A6969%2Fannounce&as=http%3A%2F%2Fwebseed.whonix.org%3A8008%2FWhonix-Workstation-0.5.6.ova">Magnet Link</a></html>
|{{No}}
| style="background-color: {{Yellow}}"| Medium <ref name=atleastssl />
| style="background-color: {{Green}}"| High <ref name=openpgpverification />
|- style="height: 47px"
| style="background-color: #f9f9f9"| [[File:template_source.png|25px]]
| colspan="2"|[[Dev/Build Documentation|Build from source code]]
| See [[Dev/Build Anonymity|Build Anonymity]]
|colspan="2" style="background-color: {{Green}}"| Excellent <ref>When you build from source code, audit the source code for being non-malicious and reasonably bug free, you do not have to [[Trust]] the developers, the website or the SSL certificate authorities.</ref>
|}

= XChat =
{{Old-Stable-0.5.6}}

All XChat plugins have been deactivated (hardening) and moved to /usr/lib/xchat/plugins.disabled. If you really need a plugin, such as perl for SASL, you can use the example below.

<pre>sudo mv /usr/lib/xchat/plugins.disabled/perl.so /usr/lib/xchat/plugins/</pre>

= Manually updating Tor Browser (Whonix 0.5.6) =
{{Old-Stable-0.5.6}}

(1) Go to https://www.torproject.org/ and/or http://idnxcnkne4qt76tg.onion/ and download the Tor Browser Bundle for Linux 32 bit. Store it in ''/home/user/''.

(2) Read https://www.torproject.org/docs/verifying-signatures.html.en and/or http://idnxcnkne4qt76tg.onion/docs/verifying-signatures.html.en and learn about gpg verification.

(3) Go to https://www.torproject.org/docs/signing-keys.html.en and/or http://idnxcnkne4qt76tg.onion/docs/signing-keys.html.en to get the gpg keys.

(4) Verify the Tor Browser Bundle download.

(5) Go into ''/home/user/'' with the file manger. (Dolphin)

(6) Extract the Tor Browser Bundle. Right click on the downloaded archive -> extract -> extract archive here.

(7) In case you downloaded another version than ''en-US'', rename the tor-browser_''lang'' folder to ''tor-browser_en-US''. This is important, because the paths in the following script are hardcoded.

(8) Go into the ''/home/user/tor-browser_en-US'' folder.

(9) Delete ''start-tor-browser'' or move it to the ''/home/user/tor-browser_en-US/Docs'' folder.

(10) Create a new file within the ''/home/user/tor-browser_en-US/'' folder called ''start-tor-browser'' with the following content.

<pre>
#!/bin/bash
## Whonix Tor Browser start script

export TOR_SKIP_LAUNCH=1
    
cd ~
~/tor-browser_en-US/App/Firefox/firefox --profile ~/tor-browser_en-US/Data/profile
    
## End of Whonix Tor Browser start script
</pre>

(11) Make the ''start-tor-browser'' script executable. Right click on ''start-tor-browser'' -> Properties -> Permissions -> enable the ''Is executable'' box -> ok.

(12) Go to ''/home/user/tor-browser_en-US/Data/profile/'' and create a file ''user.js'' with the following content.

<pre>## Begin of patched user.js.

## If you edit this file while Firefox is running, your changes will be
## overwritten, when you close Firefox.

## How to create the user.js network settings:
## 1. Make a backup of prefs.js.
## 1. Start Tor Browser with the patched start script.
## 2. Apply proxy settings using the Tor Button settings dialog..
## 3. Make a diff from the old and the new pref.js.
## 4. Copy the relevant changes to user.js.

## network settings
## (Are now set in /etc/environment - or not...)
## (See /etc/environment.)
user_pref("extensions.torbutton.use_privoxy", false);
user_pref("extensions.torbutton.settings_method", "custom");
user_pref("extensions.torbutton.socks_host", "192.168.0.10");
user_pref("extensions.torbutton.socks_port", 9100);
user_pref("network.proxy.socks", "192.168.0.10");
user_pref("network.proxy.socks_port", 9100);
user_pref("extensions.torbutton.custom.socks_host", "192.168.0.10");
user_pref("extensions.torbutton.custom.socks_port", 9100);

## End of Whonix user.js.
</pre>

(13) If you want to make 100% sure you never have Tor over Tor, you must shut down Whonix-Gateway while doing the following.

(14) Delete /home/user/my_tor-browser_en-US/App/tor.

(15) If there is '''no''' green Vidalia icon in the task bar, everything is fine.

(16) Start Tor Browser and run

<pre>ps aux | grep tor</pre>

If you see something like.

<pre>109 /usr/sbin/tor</pre>

Or.

<pre>/home/user/my_tor-browser_en-US/App/tor</pre>

Something went wrong and you're running Tor over Tor, which is recommended against.

(17) If the tests results are as expected, everything went fine.

(18) Don't forget to restart Whonix-Gateway, if you shut it down in step (13).

(19) Done.

= DummyTor =
== Introduction ==
{{Old-Stable-0.5.6}}

Whonix-Workstation has an empty Tor package installed by default, called Dummy Tor package. It contains no files, besides some default files<ref>changelog.gz copyright README.Debian control control.tar.gz data.tar.gz debian-binary md5sums</ref>, which are required to create a dummy package. Debian packages are standard Unix '''ar''' archives, auditors can unpack and check them.

The reason for installing the Dummy Tor package inside Whonix-Workstation is to prevent installing the Tor package from the upstream (Debian or The Tor Project) repository, to prevent running Tor over Tor. This allows installation of packages, which depend on Tor, such as [[Chat#TorChat|TorChat]] and parcimonie on Whonix-Workstation.

To prevent the package from upgrading

<pre>echo "tor hold" | sudo dpkg --set-selections</pre>

has been run while building Whonix from source code.

To check the status an auditor could run.

<pre>dpkg --get-selections | grep tor</pre>

To undo holding the packing a user could run.

<pre>echo "tor install" | sudo dpkg --set-selections</pre>

== Implementation ==
{{Old-Stable-0.5.6}}

* Everything is inside the ''whonix_workstation/usr/local/share/whonix/dummytor/'' folder in Whonix source code
* and subsequently in /usr/local/share/whonix/dummytor/ in Whoix-Workstation.
* .deb package format
* /usr/local/share/whonix/dummytor/tor is the control file
* /usr/local/share/whonix/dummytor/tor_1.0_all.deb is the package which was installed using dpkg by whonix_workstation/usr/local/share/whonix_internal_install_script.
* whonix_workstation/usr/local/share/whonix/dummytor/dummytor is the "build script" for the package, which is actually only a single "equivs-build ./tor" command.

== How it would look... ==
{{Old-Stable-0.5.6}}

...if a Tor version higher than 1.0 was released.

<pre>
sudo apt-get dist-upgrade

Reading package lists... Done
Building dependency tree       
Reading state information... Done
Calculating upgrade... Done
The following packages have been kept back:
  tor
</pre>

= Tor Browser =
== Remove Proxy Settings - Whonix 0.5.6 ==
{{Old-Stable-0.5.6}}

It's best to get a fresh copy of Tor Browser, which has never been started before.

Whonix modifies user.js as documented in the [[Tor_Browser#Whonix_Proxy_Settings_.2F_user.js|Tor Browser chapter]].

Open ''/home/user/tor-browser_en-US_my/Data/profile/user.js''.

<pre>kwrite /home/user/tor-browser_en-US_my/Data/profile/user.js</pre>

Comment out all network settings.<ref>These steps are required to remove proxy settings.</ref> <ref>TOR_SOCKS_HOST and TOR_SOCKS_PORT were set for [[Stream Isolation]].</ref>

<pre>
## network settings
#user_pref("extensions.torbutton.use_privoxy", false);
#user_pref("extensions.torbutton.settings_method", "custom");
#user_pref("extensions.torbutton.socks_host", "192.168.0.10");
#user_pref("extensions.torbutton.socks_port", 9100);
#user_pref("network.proxy.socks", "192.168.0.10");
#user_pref("network.proxy.socks_port", 9100);
#user_pref("extensions.torbutton.custom.socks_host", "192.168.0.10");
#user_pref("extensions.torbutton.custom.socks_port", 9100);
</pre>

You could use Tor Button's settings dialog to set it to any other proxy or transparent torification. The latter means "no proxy", which will result in Tor Browser using whatever the operating system provides and if you don't have a VPN installed inside Whonix-Workstation, it will go through Tor's TransPort.

If you are using the transparent torification option in Tor Button, you could point a socksifier to ''start-tor-browser'' and it should work as usual.

If you are having problems, it's most likely a problem with Tor Browser / Tor Button's proxy settings. In Tor Browser open the pseudo url "''about:config''" and search for "''network.proxy''" and check if these settings are sane.


= Whonix 0.5.6 Disable Auto Login =
{{Old-Stable-0.5.6}}

'''OPTIONAL. Only in case you want to do that.'''

If you aren't using [[Physical Isolation]], i.e. if you use the Default-[[Download]]-Version (Virtual Machines), it's probably better to use the desktop locking mechanism of your host operating system.

These features are inherited from Debian and its packages.

'''1. On Whonix-Gateway and Whonix-Workstation'''

Open /etc/inittab:

<pre>
sudo nano /etc/inittab
</pre>

Look for:

<pre>
## If you do not want this,
## comment in the next line and comment out the second one.
</pre>

Below you'll see:

<pre>
#1:2345:respawn:/sbin/getty 38400 tty1
1:2345:respawn:/sbin/getty --autologin user 38400 tty1
</pre>

Change it to:

<pre>
1:2345:respawn:/sbin/getty 38400 tty1
#1:2345:respawn:/sbin/getty --autologin user 38400 tty1
</pre>

'''2. On Whonix-Workstation'''

Start Menu -> System Settings -> Login Screen -> Convenience -> Disable "Enable Auto Login"

= Footnotes =
<references />

{{Footer}}

[[Category:Deprecated]]
