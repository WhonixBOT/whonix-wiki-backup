<translate>

{{Header}}
{{#seo:
|description=Computer Security Guide for Whonix Linux for Users, Whonix Hardening
|image=https://www.whonix.org/w/images/1/19/Padlock-597495-640.jpg
}}

{{Maintainer|
|about=About this {{Code2|{{PAGENAME}}}} Page
|status=stable
|difficulty=medium
|maintainer=[[Authorship|Whonix team]]
|support=[[Support]]
}}

= Basics =

* [[Warning|Warnings]]
* [[DoNot|Do Not - Non technical steps staying anonymous]]
* [[Computer Security Education]]
* [[Post Install Advice]]
* [[Surfing Posting Blogging]]
* Read the [[Documentation]] in general

= Motivation =
This Motivation chapter may be skipped.

If you need motivation to secure your computer, refer to these articles:

* [https://krebsonsecurity.com/2012/10/the-scrap-value-of-a-hacked-pc-revisited/ The Scrap Value of a Hacked PC, Revisited (blog post).]
* [https://krebsonsecurity.com/2013/06/the-value-of-a-hacked-email-account/ The Value of a Hacked Email Account (blog post).]


If that is too much to read, then just take a glimpse at the graphics:

* [https://krebsonsecurity.com/wp-content/uploads/2012/10/HackedPC2012.png The Scrap Value of a Hacked PC, Revisited (picture).]
* [https://krebsonsecurity.com/wp-content/uploads/2013/06/HE-1-600x333.jpg The Value of a Hacked Email Account (picture).]

= Operating System =

{{Anchor|Recommendation to install latest security updates on all systems}}
== Updates ==
'''Important! All packages must stay up-to-date for security purposes.'''

* '''For [[Qubes|Qubes Whonix]] update directions, go to the [[Qubes/Update|Qubes-Whonix Update Guide]].'''
* '''For all other Whonix OS builds, follow the [[Security_Guide#Updates|update directions below]].'''

'''<u>Be sure to read and understand [[CVE-2016-1252|CVE-2016-1252 secure apt-get upgrading]].</u>'''

{{Operating_System_Updates}}

= Whonix-Gateway Security =
== General ==
Never use Whonix-Gateway for anything other than running Tor on it!

If the Whonix-Gateway VM is ever compromised, the identity (public IP address), all destinations visited, and the entirety of clear-text (and hidden service) communication over Tor becomes available to the attacker.

Before installing any extra packages on the Whonix-Gateway, please first consult the developers to ask whether that is really necessary and wise.

== Warning: Bridged Networking ==
Do not change Whonix-Gateway's first or second network interface to a bridged network. This is untested and should not be necessary. Users who feel it is necessary in their circumstances should get in [[contact]].

For further interest, here is a [https://sourceforge.net/p/whonix/discussion/general/thread/1e6a8675/ discussion thread], and [https://sourceforge.net/p/whonix/discussion/general/thread/3a0b673a/ another one], debating whether NAT or a bridged network is more secure.

= Host Security =

== Basics ==

Please read the [[Computer Security Education#Host Security|Computer Security Education section about Host Security]].

== Power Saving Considerations ==
Upon system suspend / standby, Full Disk Encryption keys are still kept in RAM. Users at high risk or traveling should avoid leaving a system in this state. Instead, the recommended power mode to use is hibernation. This will lock all system partitions to a safe state, though there is a small trade-off in startup time.

On GNU/Linux hosts, standby will not always result in having LUKS keys retained in memory. Some experimental projects <ref>https://github.com/jonasmalacofilho/ubuntu-luks-suspend</ref> and custom setups with systemd+scripting are able to erase the keys before system suspend to avoid mistakes.

Following a system standby period, the network fingerprint for Tor on the Whonix-Gateway is identical to a standard Tor instance on the host that has gone through the same procedure. There are some old connections that go stale and need renewal, but nothing is seen by a network adversary because time leak identifiers have been stripped out of Tor's protocol / OpenSSL, and TCP Timestamps are gone. 

[[Non-Qubes-Whonix]] only:<br />
In order to reconnect, manual time adjustment is required or the VM can simply be powered off and then powered on again. This step will not be necessary once hypervisor specific post resume hooks are used, because guest clocks will be seamlessly updated upon power state changes from the host.

[[Qubes-Whonix]] only:<br />
Has automatic seamless time adjustment after resume. <ref>
https://github.com/Whonix/sdwdate/blob/master/etc/qubes/suspend-pre.d/30_sdwdate.sh

https://github.com/Whonix/sdwdate/blob/master/etc/qubes/suspend-post.d/30_sdwdate.sh
</ref>

== Hardware Component Risks ==

In the default configuration, Whonix provides significant protection against [[Comparison_with_Others#Circumventing_Proxy_Obedience_Design|circumvention of the proxy obedience design]]. This includes:

* Applications not honoring proxy settings (proxy bypass IP leaks).
* Applications disclosing the user's real IP (protocol IP leaks).
* Remote code execution exploits with user-only rights (exploit + unsafe browser).
* Remote code execution exploits with root rights (exploit + root exploit + unsafe browser).


However, if a second exploit is used to break out of the VM, the default Whonix installation is broken and the user's real IP address will be identified. Only Whonix run with [[Physical_Isolation|physical isolation]] will defeat this attack. This is because the Whonix-Workstation host does not know the real IP address, only the Whonix-Gateway which is running on another machine. Consequently, to successfully deanonymize the user, the attacker must also: exploit the physically isolated Whonix-Gateway, subvert the Tor process, or attack the Tor network at large.

Nevertheless, physically-isolated users should be aware that if an adversary manages to break out of the Whonix-Workstation VM using an exploit, then additional risks are posed by the hardware components that are built-in or have been additionally installed. This includes CPU and HDD / SSD temperature sensors, microphones and cameras.

In the case of Whonix with physical isolation:

* The user's IP address is still safe, but the temperature sensors can be used for anonymity set reduction.
* Different CPU,  HDD and SSD models will report different sensor information, depending on climate and weather. If possible, it is advised to remove or to obfuscate the sensor results.
* Cameras and microphones can be covertly activated by the adversary. Remove external hardware and/or disable them in BIOS if possible. At a minimum, cover them or ideally remove them.


In the case of a default Whonix installation, the same general recommendations apply, although it does not really matter since the user will have been deanonymized successfully.

== Anonymous Mobile Modems ==
Mobile modems refers to portable broadband modems which allow your computer to connect to the internet via the cellular network. These devices support use of the 2G, 3G and 4G networks. 

For activities necessitating the best possible anonymity, it is theoretically safer to use an anonymous mobile modem far away from one's normal location, rather than use a local internet connection. The reason is the dial-up or broadband provider normally knows your name, postal address and non-anonymous payment method. This is problematic if Tor or Whonix is compromised, since an adversary could pressure the service provider and very easily confirm your identity. However, if a mobile modem user is successfully attacked, the IP address leaked will not immediately lead back to the postal address of the user.

'''Warning:''' The technique outlined below may be ineffective against intelligence agencies who can:

* [https://theintercept.com/2014/12/04/nsa-auroragold-hack-cellphones/ Subvert cellular networks].
* Conduct downgrade attacks on [https://www.schneier.com/blog/archives/2015/04/the_further_dem_1.html network functioning] from 4G to 3G, from 3G to 2G and so on.
* [https://www.schneier.com/blog/archives/2014/12/nsa_hacking_of_.html Attack all ciphers] used in cellular networks, including A5/1, A5/2 and A5/3.


It is safest to assume that identification and location information can be discovered if specifically targeted, alongside potential eavesdropping of activities and communications. Always conduct a threat assessment of planned activities before following any course of action!

'''Default Configuration Whonix Users'''

Either:

* Plug or integrate the mobile modem into the host operating system as its internet connection replacement (easy).
* Plug the mobile modem into the Whonix-Gateway and only route Whonix-Gateway's traffic through it, not the host traffic (difficult; undocumented and therefore not recommended).


'''Physically-Isolated Whonix Users'''

Use the second method outlined above. There is no host in the sense that the Whonix-Gateway is running bare-metal on a second computer.

'''Safe Purchase of a Mobile Modem and SIM Card'''

Recommendations:

* Buy the mobile modem anonymously. This may be in a store, second-hand, or on the street. Be sure to leave no personal data during the purchase.
* Be aware of cameras and potential witnesses to your purchases.
* Do not use the modem for any non-anonymous activity prior to using it for Whonix purposes.
* Telecommunication companies routinely log the serial numbers of phones (IMEI) and SIM cards, as well as the phone number for network logins. Therefore it is also necessary to: 
** Buy the SIM card anonymously (prepaid is better).
** Buy cash codes in different stores anonymously.
** Never use the anonymous SIM card with a non-anonymous phone or mobile modem beforehand.


'''Mobile Modem Warnings'''

* Many devices are manufactured by a handful of countries that have run [http://www.macworld.com.au/news/3g-and-4g-usb-modems-are-a-security-threat-researcher-says-89533/ insecure software] in the recent past.
* Devices often show critical [https://www.helpnetsecurity.com/2015/12/03/3g4g-cellular-usb-modems-are-full-of-critical-security-flaws-many-0-days/ zero days]. For example: remote code executive flaws, exploitable firmware, vulnerability to cross-site scripting and CSRF vulnerabilities.


Carefully choose all hardware and conduct manufacturer research beforehand!

'''Mobile Modem Operation'''

When using cellular networks, users often only get a shared external IP address due to scarcity of IPv4 IPs. This can lead to thousands of users sharing one IPv4 address at the same time. Also, some providers do not yet log the users' (NAT) ports. Consequently, providers cannot pinpoint users when they are given an IP address and time stamp. This is a nice feature, but do not rely on it for strong anonymity!

Some providers assign additional and unique IPv6 IP addresses to their users. This is not a concern for intended Tor usage, as it does not yet automatically utilize IPv6. <ref>https://trac.torproject.org/projects/tor/wiki/org/roadmaps/Tor/IPv6</ref> For greater security, prefer using a new, distant, random, non-circular location when conducting on-line activities.

== Anonymous WiFi Adapters ==

Normally the dial-up or broadband provider knows your name, postal address and non-anonymous payment method. If Tor or Whonix is compromised, then an adversary only needs to pressure the service provider to confirm your identity. This is not the case if using an anonymous WiFi adapter plugged or integrated into the Whonix-Gateway.

For safer use, it is recommended to:

* Buy the WiFi adapter anonymously in a store, second-hand or on the street.
* Never provide personal data during a purchase.
* Do not use the adapter for prior, non-anonymous activity. Some providers or hotspots log MAC addresses and the username (if paid).
* If possible, only use free hotspots or pay for them anonymously. Otherwise abstain from paid hotspots.
* For greater security, always use a new, distant, random, non-circular hotspot location.
* Check for cameras and witnesses during online activities.

== Hardening ==
Whonix does not yet improve host security. It is recommended to use a secure host operating system like [[Computer_Security_Education#Host_Operating_System|Debian]] [[Computer_Security_Education#Which_GNU.2FLinux_Distribution_do_you_recommend.3F|GNU/Linux]] and manually [[Advanced_Security_Guide#Harden_Debian|harden]] it. Also follow relevant steps in the [[Security_Guide#System_Hardening_Checklist|system hardening checklist]] for greater security.

== Mandatory Access Control ==
=== AppArmor ===
According to debian.org: <ref>https://wiki.debian.org/AppArmor</ref>

<blockquote>AppArmor is a Mandatory Access Control framework. When enabled, AppArmor confines programs according to a set of rules that specify what files a given program can access. This proactive approach helps protect the system against both known and unknown vulnerabilities.</blockquote>

AppArmor provides a number of advantages: <ref>http://wiki.apparmor.net/index.php/Main_Page</ref>

* It protects the operating system and applications from external or internal threats, including zero-day attacks.
* "Good behavior" is enforced and it mitigates exploits via unknown application flaws.
* AppArmor security policies define the system resources that individual applications can access, and with what privileges. For instance:
** Network access.
** Raw socket access.
** Read, write or execute file permissions on specific paths.


Strongly consider using the [[AppArmor|Whonix AppArmor profiles]] which are available for Tor Browser, Icedove and various other programs. The profiles are easily applied and provide a considerable security benefit.

=== Seccomp ===
According to Mozilla: <ref>https://wiki.mozilla.org/Security/Sandbox/Seccomp</ref>

<blockquote>Seccomp stands for secure computing mode. It is a simple sandboxing tool in the Linux kernel, available since Linux version 2.6.12. When enabling seccomp, the process enters a "secure mode" where a very small number of system calls are available (exit(), read(), write(), sigreturn()). Writing code to work in this environment is difficult; for example, dynamic memory allocation (using brk() or mmap(), either directly or to implement malloc()) is not possible.</blockquote>

Strongly consider enabling seccomp, since it is easily applied and provides additional sandboxing protection for the Tor process.

{{Open /etc/tor/torrc}}

Add.

<pre>
Sandbox 1
</pre>

Save and exit.

=== Firejail ===
==== Introduction ====
According to the Firejail project page: <ref>https://firejail.wordpress.com/</ref>

<blockquote>Firejail is a SUID program that reduces the risk of security breaches by restricting the running environment of untrusted applications using Linux namespaces and seccomp-bpf. It allows a process and all its descendants to have their own private view of the globally shared kernel resources, such as the network stack, process table, mount table.

Written in C with virtually no dependencies, the software runs on any Linux computer with a 3.x kernel version or newer. The sandbox is lightweight, the overhead is low. There are no complicated configuration files to edit, no socket connections open, no daemons running in the background. All security features are implemented directly in Linux kernel and available on any Linux computer. The program is released under GPL v2 license.</blockquote>

Firejail has built-in profiles for a large number of popular Linux programs, including many which are used in Whonix. A small sample of the 100+ profiles includes: Chromium, CryptoCat, Dolphin, Evince, Firefox, HexChat, Icedove, LibreOffice, Okular, Thunderbird, Transmission, VirtualBox, VLC and wget. <ref>https://github.com/netblue30/firejail/tree/master/etc</ref>

====Installing Firejail====
Firejail works in both [[Qubes-Whonix]] and [[Non-Qubes-Whonix]].

'''1. Boot the Whonix-Workstation ({{Code2|whonix-ws}}) TemplateVM'''

'''2. Add jessie-backports to sources.list'''
<pre>
sudo su -c "echo -e 'deb http://http.debian.net/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list"
</pre>
Or alternatively use the <i>.onion</i> mirror.
<pre>
sudo su -c "echo -e 'deb http://vwakviie2ienjx6t.onion/debian jessie-backports main' > /etc/apt/sources.list.d/jessie-backports.list"
</pre>
'''3. Use Apt-pinning Before Installing Dependencies'''

{{Apt-Pinning}}

'''4. [[Update]] the Package Lists'''
<pre>
sudo apt-get update
</pre>
'''5. Install Firejail'''
<pre>
sudo apt-get -t jessie-backports install firejail
</pre>
'''6. Launch Firejail'''

To run sandboxed applications, simply prefix your program command with "firejail" in a terminal. For example: 
<pre>
firejail evince

firejail vlc
</pre>
There is no secure and reliable way to create start menu entries / desktop shortcuts using Firejail. In the meantime, start firejailed applications from the command line. 

For a further technical discussion of Firejail, see: https://forums.whonix.org/t/firejail-seccomp-more-options-for-program-containment

====Sandboxing Tor Browser====
The [[Tor_Browser#Tor_Browser_Sandboxed|sandboxed Tor Browser]] cannot be used until Whonix 14 is released. In the meantime, consider using Firejail as an interim sandboxing measure to restrict the Tor Browser process. 

Mitigating the risk of Tor Browser security breaches makes sense, because it is an untrusted application with a huge attack surface; it is frequently and successfully attacked in the wild.

Note: Consider cloning the Whonix-Workstation-TemplateVM prior to installing Firejail. Firejail installs a host of  dependencies and users may not want these in the default template.

'''1. Boot the Whonix-Workstation TemplateVM'''

'''2. Follow the Steps to [[Security_Guide#Installing_Firejail|Install Firejail]] from jessie-backports'''

'''3. ''Optional Step (Untested):'' Create a Customized Firejail Profile for Tor Browser'''

Follow [https://firejail.wordpress.com/documentation-2/building-custom-profiles/ these steps] to build a custom profile. 

'''4. Create a New Whonix-Workstation-AppVM Based on the Modified Template'''

{{Qubes Create Workstation AppVMs}}

'''5. Launch the Sandboxed Tor Browser'''

Open a terminal and run.

    firejail torbrowser

'''6. Confirm Tor Browser is Sandboxed'''

Launch Tor Browser in the anon-whonix AppVM. Then open a terminal and run.

    firejail --tree

The output should show Tor Browser is now running in a Firejail container.

    XXXX:user:firejail torbrowser
    XXXX:user:/bin/bash /usr/bin/torbrowser
    XXXX:user:bash /home/user/.tb/tor-browser/Browser/start-tor-browser --all
    XXXX:user:./firefox --class Tor Browser -profile TorBrowser/Data/Browse

====Running Firefox-ESR in a Firejail Sandbox (Qubes Debian-8 Template Only)====
Note: Preferably clone the Debian-8 TemplateVM prior to taking these steps, as some dependencies are required. 

'''Warning:''' Do not use Firefox-ESR in a Whonix template! It is easily fingerprinted and less secure than the Tor Browser.

'''1. Boot the Debian-8 TemplateVM'''

'''2. Follow the [[Security_Guide#Installing_Firejail|Steps]] to Install Firejail from jessie-backports'''

'''3. Create a New Debian-8 AppVM Based on the Modified Template'''

'''4. Launch the Sandboxed Firefox-ESR'''

In a terminal, run.

    firejail firefox

'''5. Confirm Firefox-ESR is Sandboxed'''

Open another terminal and run.

    firejail --tree

The output should confirm Firefox-ESR is now running in a firejail container.

    XXXX:user:firejail /usr/lib/firefox-esr/firefox-esr

= Virtualization Platform =
== Type 1 vs Type 2 Hypervisors ==

According to qubes-os.org: <ref>https://www.qubes-os.org/intro/</ref>

<blockquote>Not all virtual machine software is equal when it comes to security. You may have used or heard of VMs in relation to software like VirtualBox or VMware Workstation. These are known as “Type 2” or “hosted” hypervisors. (The hypervisor is the software, firmware, or hardware that creates and runs virtual machines.) These programs are popular because they’re designed primarily to be easy to use and run under popular OSes like Windows (which is called the host OS, since it “hosts” the VMs). However, the fact that Type 2 hypervisors run under the host OS means that they’re really only as secure as the host OS itself. If the host OS is ever compromised, then any VMs it hosts are also effectively compromised.

By contrast, Qubes uses a “Type 1” or “bare metal” hypervisor called Xen. Instead of running inside an OS, Type 1 hypervisors run directly on the “bare metal” of the hardware. This means that an attacker must be capable of subverting the hypervisor itself in order to compromise the entire system, which is vastly more difficult.</blockquote>

The take-home message is that [[Qubes-Whonix|Qubes-Whonix]] is more secure than the default Whonix configuration using a Type 2 hypervisor like VirtualBox. Therefore, it is recommended to install Qubes-Whonix if users have suitably [https://www.qubes-os.org/doc/system-requirements/ modern hardware].

== Qubes-Whonix vs Physically-Isolated Non-Qubes-Whonix ==

In [[Non-Qubes-Whonix]], using a separate computer for [[Dev/Build_Documentation/Physical_Isolation|physical isolation]] is certainly more secure than using the same computer for everything in the standard host OS / Type 2 hypervisor configuration. However, it is not clear this is superior to Qubes' [http://invisiblethingslab.com/resources/2014/Software_compartmentalization_vs_physical_separation.pdf compartmentalized software approach].

Consider the pros and cons of physical isolation relative to Qubes: <ref>https://www.qubes-os.org/intro/</ref>

<blockquote>Pros

* Physical separation doesn’t rely on a hypervisor. (It’s very unlikely that an attacker will break out of Qubes’ hypervisor, but if one were to manage to do so, one could potentially gain control over the entire system).
* Physical separation can be a natural complement to physical security. (For example, you might find it natural to lock your secure laptop in a safe when you take your unsecure laptop out with you).
</blockquote>

<blockquote>Cons

* Physical separation can be cumbersome and expensive, since we may have to obtain and set up a separate physical machine for each security level we need.
* There’s generally no secure way to transfer data between physically separate computers running conventional OSes. (Qubes has a secure inter-VM file transfer system to handle this).
* Physically separate computers running conventional OSes are still independently vulnerable to most conventional attacks due to their monolithic nature.
* Malware which can bridge air gaps has existed for several years now and is becoming increasingly common.</blockquote>

In summary, the relative merits of physical isolation do not necessarily provide any more protection than Qubes' approach. Physical isolation is relatively difficult, still experimental, inconvenient, and requires a significant time investment. On the other hand, Qubes is relatively easy to install, has fully integrated Whonix, and is convenient for most activities. 

Qubes also supports [[Qubes/Why_use_Qubes_over_other_Virtualizers|a host of features]] unavailable in the physically-isolated model, such as: DisposableVMs, a USB VM, secure copy / paste operations between VMs, secure copying and transfers of files between VMs, and sanitization of PDFs and images.

For these reasons, [[Qubes-Whonix]] is recommended for the majority of users seeking a higher-security solution.

== Qubes-Whonix Hardware Requirements ==
For Qubes-Whonix hardware requirements, see [[System_Requirements|here]].

== VirtualBox Hardening ==

For an overview on VM security risks in general, see: [http://security.stackexchange.com/questions/3056/how-secure-are-virtual-machines-really-false-sense-of-security How secure are Virtual Machines really?]

The less features enabled, the smaller the [http://en.wikipedia.org/wiki/Attack_surface attack surface]. The following features can be removed or disabled without impacting core functionality:

* Disable Audio.
* Do not enable Shared Folders.
* Do not enable video acceleration.
* Do not enable 3D acceleration. <ref>
Quote http://www.virtualbox.org/manual/ch04.html#guestadd-3d
<blockquote>
Untrusted guest systems should not be allowed to use VirtualBox's 3D acceleration features, just as untrusted host software should not be allowed to use 3D acceleration. Drivers for 3D hardware are generally too complex to be made properly secure and any software which is allowed to access them may be able to compromise the operating system running them. In addition, enabling 3D acceleration gives the guest direct access to a large body of additional program code in the VirtualBox host process which it might conceivably be able to use to crash the virtual machine.
</blockquote>
</ref> <ref>
Quote https://hsmr.cc/palinopsia/
<blockquote>
If the "3D-Acceleration" feature of VirtualBox is activated, running the proof-of-concept code from inside the VM provides the ability to read framebuffers from the host system. 
</blockquote>
</ref>
* Do not enable the Serial Port.
* Remove the Floppy drive.
* Remove the CD/DVD drive.
* Do not attach USB devices.
* Disable the USB controller which is enabled by default. Set the Pointing Device to "PS/2 Mouse" or changes will revert.
* Do not enable the Remote Display server.
* Enable PAE/NX (NX is a security feature).


Not enabling IO APIC, EFI may also provide some protection, but this requires further investigation.

= Whonix-Workstation Security =

== Introduction ==

Note: Whonix implementation examples are based on Debian. To use a customized Whonix-Workstation VM based on other operating systems, see [[Other_Operating_Systems|here]]. For technical design notes, see [[Operating_System|here]].

If the Whonix-Workstation VM is ever compromised, the attacker has access to the data it contains, including all credentials, browser data and passwords. The IP address is never leaked, since this requires a compromise of the Whonix-Gateway VM, but this information may still result in identity disclosure.

In [[Non-Qubes-Whonix|Non-Qubes-Whonix]]:

The best practice is to keep a clean master copy of the Whonix-Workstation VM, make snapshots / clones of the master, and then only use these for internet activity. The user can then 'rollback' (use a new clean clone / snapshot VM) after risky activity, or if they suspect the integrity of the system has been compromised. See the [[Security_Guide#VM_Snapshots|multiple VM snapshots recommendation]] below.

In [[Qubes-Whonix|Qubes-Whonix]]:

The best practice is to use [[Qubes/Disposable_VM|DisposableVMs]] for all your internet activity. Alternatively, periodically delete your Whonix-Workstation AppVM(s) and create fresh instances from the Whonix-Workstation TemplateVM.

{{Anchor|Recommendation to use multiple VM Snapshots}}

== VM Snapshots ==
'''Note:''' the following advice refers to [[Non-Qubes-Whonix|Non-Qubes-Whonix]] users.

Apart from offering protection against hardware serial leaks, VMs have another major advantage: the ability to quickly discard and restore a system. This process is easy in [[Qubes-Whonix|Qubes-Whonix]], since every template-based AppVM used for activities is based on a TemplateVM which is only used for software installation and updates, and nothing else. AppVMs are easily discarded and recreated in a clean state whenever the user requires it. <ref>https://www.qubes-os.org/doc/templates/</ref> In [[Non-Qubes-Whonix|Non-Qubes-Whonix]], greater precaution is required. 

It is ''strongly recommended'' the user keep a master copy of the Whonix-Workstation VM which is:

* Kept updated.
* Does not have any additional software installed.
* Does not have any default settings changed.
* Is not used directly for any activities.


Regular "clean" snapshots or clones of the master VM should be made for activities that require anonymity. Particular care must be taken that clean and unclean states are never mixed up!

The correct method for the safest operation of Non-Qubes-Whonix is as follows:
# Import both VMs into the virtualizer.
# Start both the Whonix-Gateway and Whonix-Workstation VMs.
# [[Update|Securely update both VMs]].
# After the updates have finished, shut down both VMs. '''Do not''' browse anywhere or open any unauthenticated communication channels to the internet.
# Create snapshots of both VMs in their clean state.
# Only use the snapshots for browsing or initiating any external connections.


Note: The only exception made is running apt, since it has a guaranteed way to securely download and verify packages.

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
<u>For important [[VirtualBox]] information</u>, please press on Expand on the right.
<div class="mw-collapsible-content">
'''Warning to VirtualBox Users''': VirtualBox's VM Snapshot feature is recommended against because [https://www.whonix.org/old-forum/index.php/topic,97.msg1586.html#msg1586 data loss] has been experienced using it. Instead, use clones or other methods outlined in the "Reliable Alternative To VirtualBox VM Snapshots" section below.
{{Anchor|Reliable Alternative To Virtualbox VM Snapshots}}
{{Anchor|Reliable Alternative To VirtualBox VM Snapshots}}

Although VirtualBox's snapshot feature is useful when making interim snapshots of live running systems, it is not recommended as a reliable method for backing up VMs. The user risks possible data loss, primarily in the form of corrupted virtual hard drives (VHDs). Reverting can be very painful, or even impossible, following VHD corruption. Alternative methods are copy / paste, cloning, and exporting / importing. These methods reliably provide VM backups, but disk resources are used inefficiently and manual versioning is required.

'''SubVersioN (SVN) Backup Tool'''

[http://en.wikipedia.org/wiki/Subversion_(software) SubVersioN] is considered the best alternative tool for backing up VM operating environments. It is similar to VirtualBox's snapshot feature, but is much more reliable and efficient. Prior to using it, familiarize yourself with the tool's [https://subversion.apache.org/docs/ documentation] and design. SVN [http://en.wikipedia.org/wiki/Comparison_of_Subversion_clients clients] are available for various platforms.

SVN is a tool typically used by software developers to conduct: collaborative configuration management, version control, and backup / restore of file sets under development by many people over extended period of time. Basic functionality of versioning, backing up and restoring changes to sets of files is available. However, SVN is considered superior to CVS, GIT and other options for VM backups, because it does not have any file size limitations by design. Regardless of how big or small the files are, SVN handles them reliably and efficiently. See the following section: [http://svn.apache.org/repos/asf/subversion/trunk/doc/user/svn-best-practices.html "Be patient with large files"]. 

When versioning file sets, SVN employs [http://en.wikipedia.org/wiki/Atomic_commit "atomic commits"]. By way of comparison, [http://en.wikipedia.org/wiki/Concurrent_Versions_System Concurrent Versions System (CVS)] does not employ [http://en.wikipedia.org/wiki/Atomic_commit atomic commits]. Manual backup procedures are inherently not [http://en.wikipedia.org/wiki/Atomic_commit atomic functions]. Additionally, SVN also handles [http://en.wikipedia.org/wiki/Sparse_file sparse (dynamic)] virtual hard disk files, an option VirtualBox offers when [http://www.virtualbox.org/manual/ch01.html#gui-createvm instantiating new virtual disk drives].

Similar to VirtualBox's snapshot capability, SVN also takes into consideration differences in files - both textual and binary - from version to version. For instance, if a 50 GB virtual hard drive grows by an additional 60 GB over the course of a week, SVN's repository will not necessarily increase by an additional 60 GB when a new back up is performed. The outcome depends on how much of the original file changed since the previous backup. SVN will analyze differences between newer files against older files in its repository and only save the differences. Therefore, the repository may only grow as little as 10 GB+, making more efficient use of system resources.

VirtualBox's snapshot feature provides [http://forums.virtualbox.org/viewtopic.php?f=3&p=123806 'branching'] capability. This means one can revert to an earlier version of your VM and start a new branch / version of your VM from where you left off earlier. SVN also provides similar [http://svnbook.red-bean.com/en/1.7/svn.branchmerge.html branching] capability. 

'''Note:''' For backups and restores, configuration management tools like SVN require significant additional disk space over and above the size of the file. For instance, a 50 GB file typically requires approximately 150 GB of disk space to manage that instance of the VM because you require: 50 GB for the original source file, 50 GB in SVN's database [http://en.wikipedia.org/wiki/Apache_Subversion#Repository_types repository], and another 50 GB for SVN's [http://svnbook.red-bean.com/en/1.6/svn.tour.initial.html local workspace] working folder ('./.svn'). Although this overhead may seem inefficient, it is not when you consider SVN's functionality and reliability in comparison to manual backup methods outlined earlier.

'''Complete Operating Environment Backups'''

In addition to backing up the Whonix-Gateway and Whonix-Workstation(s) virtual hard drive files, it is also possible to back up the whole of the VirtualBox application and Whonix environment for a completely restoreable solution.  Cloning is another possible option, but that requires more advanced technical skills.

Typically, the VirtualBox application installed is the one provided by [http://www.virtualbox.org Virtualbox.org]. However, a [http://en.wikipedia.org/wiki/Portable_application portable application] version of VirtualBox is available via a tool provided by [http://www.vbox.me VBox.me]. This application converts VirtualBox's 'install application' into a 'portable application', thereby providing the option to port VMs to other computers via external USB hard drives and/or sticks. By instantiating VMs under portable VirtualBox's '~/data/.VirtualBox/Machines' folder, it is possible to backup and restore the complete operating environment of not only Whonix, but also specific instances of VirtualBox and SVN for complete portability. This method captures the entire Whonix operating environment under one parent folder, rather than distributing it across various user and system folders:
<br /><br />
[[File:2014-05-11 09_42_19.png|400px]]
<br /><br />
[[File:2014-05-11 09_46_43.png|400px]]
<br /><br />
[[File:2014-05-11 09_54_39.png|400px]]
</div>
</div>

== Adding a NAT Adapter to Whonix-Workstation / Updates without Tor ==
Anonymity is compromised if another NAT network adapter is added to the Whonix-Workstation. If this advice is disregarded, then your identity is leaked if/when infection occurs. Therefore, it is strongly recommended to always update over the Tor network. Although Tor updating is slow by comparison, it prevents inadvertent leaks.

== Adding a Host-Only Networking Adapter to Whonix-Workstation / SSH into Whonix-Workstation ==
If accessing the Whonix-Workstation via SSH, some users may consider something dangerous - adding a second network adapter with [http://www.virtualbox.org/manual/ch06.html#network_hostonly host-only networking].

'''Warning:''' Never add another network adapter in this manner! It is also potentially dangerous if any other VMs are running except the Whonix-Workstation! The reason is that it will expose the MAC address of the host to the Whonix-Workstation.

The VMware host-only warning regarding routing and connection sharing may equally apply to Whonix: <ref>https://www.vmware.com/support/ws4/doc/network_host_ws.html</ref>

<blockquote>If you install the proper routing or proxy software on your host computer, you can establish a connection between the host virtual Ethernet adapter and a physical network adapter on the host computer. This allows you, for example, to connect the virtual machine to a Token Ring or other non-Ethernet network.

On a Windows 2000, Windows XP or Windows Server 2003 host computer, you can use host-only networking in combination with the Internet connection sharing feature in Windows to allow a virtual machine to use the host's dial-up networking adapter or other connection to the Internet. See your Windows documentation for details on configuring Internet connection sharing.</blockquote>

If it is necessary to SSH or VNC into the Whonix-Workstation, then:

* It is safest to do this from another Whonix-Workstation. When using VMs, they can see each other if they are within the same virtual LAN. When using [[Physical Isolation]], VMs can see each other if they are within the same LAN.
* Alternatively run the services using [[Hidden Services]] and access them through another Whonix-Workstation.
* Another alternative is to run the services using [[Hidden Services]] and access them from the host using ordinary torification methods.
* A final method is to SSH from the host into Whonix-Gateway (see [[File Transfer]] for instructions) and then SSH from there [[File_Transfer#SSH_into_Whonix-Workstation|into the Whonix-Workstation]].


Note: The last two methods are <i>not</i> recommended. They risk weakening isolation between the host and Whonix-Workstation.

= Installing Additional Software =

See [[Install Software]].

= Updating with Extra Care =

See [[Install Software#How to install or update with most caution?|How to install or update with most caution?]].

= Onionizing Repositories =
When Whonix, Debian and Qubes packages are installed or updated, default settings point to repositories with a http:// URI. <ref>https://www.whonix.org/wiki/Whonix-APT-Repository#Repository_Location_URI</ref> However, experimental Tor hidden services are already available for the Whonix, Debian and Qubes packages.

There are several security and privacy benefits of using Tor hidden services: <ref>https://blog.torproject.org/blog/tor-heart-apt-transport-tor-and-debian-onions</ref>

* The user cannot be uniquely targeted for malicious updates (attackers are forced to attack everyone requesting the update).
* The package repository, or observers watching it, can't track what programs are installed.
* The ISP cannot easily learn what packages are fetched.
* End-to-end authentication and encryption provides protection against man-in-the-middle attacks e.g. version downgrade attacks.

==Whonix and Debian Packages==
Whonix 14 will prefer Tor hidden services (<i>.onion</i> repositories) by default, even when adding third-party resources. Until then, in order to install or update with the utmost caution, users may consider manually editing their sources.list to point to the Whonix and Debian <i>.onion</i> mirrors. 

The whonix.list and debian.list files in the <i>/etc/apt/sources.list.d</i> directory should be changed in ''both'' the Whonix-Workstation and Whonix-Gateway. [[Qubes-Whonix]] users note: Complete these steps in the whonix-gw and whonix-ws TemplateVMs.

'''1. Edit sources.list'''

In the Whonix-Gateway, edit the debian.list file using an editor with root rights.

If you are using a graphical Whonix or Qubes-Whonix, run.
<pre>
kdesudo kwrite /etc/apt/sources.list.d/debian.list
</pre>
If you are using a terminal-only Whonix, run.
<pre>
sudo nano /etc/apt/sources.list.d/debian.list
</pre>
'''2. Reference the Onionized Debian Repositories'''

Cut and paste the following <i>.onion</i> mirrors and comment out (#) the corresponding http repositories.
<pre>
#deb http://ftp.debian.org/debian jessie main contrib non-free
deb http://vwakviie2ienjx6t.onion/debian jessie main contrib non-free

#deb http://security.debian.org jessie/updates main contrib non-free
deb http://sgvtcaew4bxjd7ln.onion jessie/updates main contrib non-free

#Optional Backports
#deb http://ftp.debian.org/debian jessie-backports main contrib non-free
deb http://vwakviie2ienjx6t.onion/debian jessie-backports main contrib non-free
</pre>
Save and exit.

'''3. Reference the Onionized Whonix APT Repository'''
<pre>
sudo whonix_repository --baseuri http://deb.kkkkkkkkkk63ava6.onion --enable --repository stable
</pre>
Note: Whonix users have four package preferences available: stable, stable-proposed-updates, testers and developers. Change the entry above to reflect this preference. <ref>https://www.whonix.org/wiki/Whonix-APT-Repository#Whonix_APT_Repository_Overview</ref>

'''4. Confirm the Onionized Repositories are Functional'''
<pre>
sudo apt-get update && sudo apt-get dist-upgrade
</pre>
'''5. Repeat Steps 1 to 4 for the Whonix-Workstation'''

Note: Qubes users can repeat these steps in the Debian-8 TemplateVM to onionize future installations and updates.

'''6. ''Optional:'' Onionize Tor Project Updates'''

Note: Only do this if you are using [[Security_Guide#Tor_Versioning|Tor versions from The Tor Project repository]]. The Tor Project deb apt signing key must be added first (at the link above), or the user will receive error messages when completing these steps.

The following commands are run in either the Whonix-Gateway or whonix-gw TemplateVM (for [[Qubes-Whonix]] users).

First, create a torproject.list file using an editor with root rights.

If you are using a graphical Whonix or Qubes-Whonix, run.

<pre>
kdesudo kwrite /etc/apt/sources.list.d/torproject.list
</pre>

If you are using a terminal-only Whonix, run.

<pre>
sudo nano /etc/apt/sources.list.d/torproject.list
</pre>

Next, cut and paste the following text and comment out (#) the corresponding http repository.

<pre>
#Tor Project Mirror
#deb http://deb.torproject.org/torproject.org jessie main
deb http://sdscoq7snqtznauu.onion/torproject.org jessie main
</pre>

Save and exit.

==Qubes Packages==

The following commands must be run in dom0 in order to use Qubes’ Tor hidden service repositories for each type of VM. <ref>https://www.qubes-os.org/doc/hidden-service-repos/</ref>

Note: The cat commands are optional and for confirmation only. The downside of this approach is that repository definitions are managed by a Qubes package, meaning further manual updates need to be applied in the future when they change.

'''Dom0'''

In dom0, run.
<pre>
sudo sed -i 's/yum.qubes-os.org/yum.qubesos4rrrrz6n4.onion/' /etc/yum.repos.d/qubes-dom0.repo && cat /etc/yum.repos.d/qubes-dom0.repo
</pre>
<pre>
sudo sed -i 's/yum.qubes-os.org/yum.qubesos4rrrrz6n4.onion/' /etc/yum.repos.d/qubes-templates.repo && cat /etc/yum.repos.d/qubes-templates.repo
</pre>
'''Fedora Template'''

In dom0, run.
<pre>
qvm-run -a --nogui -p -u root $FedoraTemplateVM 'sed -i "s/yum.qubes-os.org/yum.qubesos4rrrrz6n4.onion/" /etc/yum.repos.d/qubes-r3.repo && cat /etc/yum.repos.d/qubes-r3.repo'
</pre>
'''Debian and Whonix Templates'''

In dom0, run.
<pre>
qvm-run -a --nogui -p -u root $DebianTemplateVM 'sed -i "s/deb.qubes-os.org/deb.qubesos4rrrrz6n4.onion/" /etc/apt/sources.list.d/qubes-r3.list && cat /etc/apt/sources.list.d/qubes-r3.list'
</pre>
= Transporting UDP Tunnels over Tor =

'''Tor Design'''

According to the Tor Project: <ref>https://blog.torproject.org/blog/moving-tor-datagram-transport</ref>

<blockquote>Tor transports data over encrypted TLS tunnels between nodes, which is in turn carried by TCP.</blockquote>

The current Tor design does not support the transport of [https://trac.torproject.org/projects/tor/ticket/7830 UDP-based protocols] through exit nodes in the network. This is unlikely to be supported in the near future due to incompatibility with cryptographic protocols in use and those planned.

The consequence is that UDP-based protocols and applications cannot be used to transmit UDP datagrams between guards and exit nodes in the default environment, for example, some [[VoIP]] or video applications. <ref>https://en.wikipedia.org/wiki/User_Datagram_Protocol</ref>

'''Transporting UDP Tunnels over Tor with a VPN'''

A solution to this problem is to use a [https://en.wikipedia.org/wiki/Tunneling_protocol tunneling protocol]. In simple terms, this allows a user to access a foreign protocol or network service that the underlying (Tor) network does not support or provide directly. 

The tested and working method in Whonix is to utilize a Virtual Private Network (VPN) with a trusted provider that does not block UDP traffic (User -> Tor -> VPN -> [Other Anonymizing Network] -> Internet). Some VPN protocols such as OpenVPN may use UDP while implementing reliable connections and error checking at the application level. <ref>Other VPN implementations may also be useful, but they have not been researched yet.</ref>

Please first read the related VPN documentation and warnings: 

* [https://trac.torproject.org/projects/tor/wiki/doc/TorPlusVPN Tor Plus VPN or Proxy].
* [[Whonix:General_disclaimer#Whonix_VPN_disclaimer|Whonix VPN disclaimer]].
* [[Tunnels/Connecting to Tor before a VPN| How to connect to Tor before a VPN (User -> Tor -> VPN -> Internet)]].
* [[Tunnels/Introduction#Comparison_Table|Tunneling comparison table]].


Before following the instructions to [[Tunnel_UDP_over_Tor|tunnel UDP over Tor]].

The current [http://sec.cs.ucl.ac.uk/users/smurdoch/papers/tor11datagramcomparison.pdf Tor architecture] may cause negative performance impacts on user activities. This arises from high latency due to congestion in the network, queue length on nodes (mixing of traffic across multiple nodes), and TCP mechanisms which attempt to account for lost packets and hold delivery of future packets until a resend is complete. <ref>https://guardianproject.info/2012/12/10/voice-over-tor/</ref>

Understand that adding a second connection in the tunneling chain adds significant complexity. This potentially increases the user's security and anonymity risks due to: misconfiguration, the increased attack surface of secure tunneling software, the difficulty in anonymously paying for VPN services, and potential bottlenecks with VPN providers. Depending on the configuration, this may also increase fingerprinting risk, remove stream isolation of  activities, and lead to a permanent destination X in the Tor network. <ref>Also read the Tor Project warnings here: https://trac.torproject.org/projects/tor/wiki/doc/TorPlusVPN</ref>.

'''Whonix Recommendations'''

Whonix recommends the use of [https://en.wikipedia.org/wiki/OpenVPN OpenVPN] as the most secure (SSL/TLS-based) protocol, rather than reliance upon IKE, L2TP/IPsec or PPTP. OpenVPN is considered extremely secure when used with encryption algorithms such as AES. <ref>IKE is being exploited by the NSA to decrypt IPSec traffic. IPsec configured with pre-shared keys is vulnerable to MITM attacks. PPTP is an obsolete method for VPN implementation with a host of security weaknesses. For further reading on intelligence agency capabilities against VPN protocols see: http://www.spiegel.de/media/media-35515.pdf</ref>

A dedicated virtual machine is recommended for this activity, see: [[Multiple Whonix-Workstations]].

= Time Attacks =
See [[Time Attacks]].

= Tor Versioning =

'''Newer Tor Versions from the Whonix Repository'''

Newer Tor versions via the Whonix stable-proposed-updates repository can be installed. [[Whonix-APT-Repository#Change_Whonix_APT_Repository|Enable]] the Whonix stable-proposed-updates repository and then [[Update|upgrade]] the system as usual. This is only recommended for testers.

'''Even Newer Tor Versions from The Tor Project Repository'''

''Untested and not fully documented. Testers only.''

Note: This risks breaking connectivity, for instance if the latest Tor version from deb.torproject.org has not been fully tested by Whonix developers at a specific point in time. <ref>
This has happened in the past. For example, on one occasion Tor from deb.torproject.org came with AppArmor changes that were incompatible with [https://github.com/Whonix/anon-gw-anonymizer-config anon-gw-anonymizer-config]'s [https://github.com/Whonix/anon-gw-anonymizer-config/blob/master/etc/apparmor.d/local/system_tor.anondist /etc/apparmor.d/local/system_tor.anondist] which resulted in Tor's systemd unit failing.
</ref>

To proceed despite the risk, install the even newer Tor version by enabling the deb.torproject.org repository. The [https://github.com/Whonix/anon-shared-build-apt-sources-tpo anon-shared-build-apt-sources-tpo] package must be installed. This enables The Tor Project's apt-get signing key and installs the apt source torproject.list. <ref>
Alternatively you can use [https://www.torproject.org/docs/debian The Tor Project's native instructions for Debian], but these manual steps are more difficult and involved. The verification of The Tor Project apt-get signing key is also harder. Since you already [[trust]] Whonix, the logical choice is to trust another Whonix package to install the right signing key.
</ref>

[[Update]] the package lists.

<pre>
sudo apt-get update
</pre>

Install anon-shared-build-apt-sources-tpo.

<pre>
sudo apt-get install anon-shared-build-apt-sources-tpo
</pre>

Refresh the package lists. <ref>
So the newly installed <i>/etc/apt/sources.list.d/torproject.list</i> takes effect.
</ref>

<pre>
sudo apt-get update
</pre>

Install the (potentially) newer version of Tor. <ref>A later version of Tor will not always be installed. For example, at the time of writing the stretch repositories for both packages.debian.org and deb.torproject.org have identical Tor versions. As the Debian stable release ages, the likelihood of receiving a newer Tor version from deb.torproject.org increases.</ref>

<pre>
sudo apt-get install tor
</pre>

= Verifying Fingerprints =

The Whonix documentation routinely recommends that users [[Trust#OpenPGP|carefully check the fingerprints of any signing key(s)]] that are downloaded. This is a necessary step before importing keys or trusting OpenPGP output concerning the validity of signature checks against signed binary files (prior to installation). 

The standard advice is to carefully obtain copies of the OpenPGP fingerprint from multiple secure websites and other authentication systems to check they match. <ref>Website checks are only as secure as the imperfect TLS system, which is itself based on certificate authorities that have been frequently compromised in recent years.</ref> In this instance, other "authentication systems" refers to: <ref>https://www.qubes-os.org/security/verifying-signatures/</ref>
<blockquote>
* Use the PGP Web of Trust.
* Check the key against different keyservers.
* Use different search engines to search for the fingerprint.
* Use Tor to view and search for the fingerprint on various websites.
* Use various VPNs and proxy servers.
* Use different Wi-Fi networks (work, school, internet cafe, etc.).
* Ask people to post the fingerprint in various forums and chat rooms.
* Check against PDFs and photographs in which the fingerprint appears (e.g., slides from a talk or on a T-shirt).
* Repeat all of the above from different computers and devices.
</blockquote>
= System Hardening Checklist =

It is possible for users to significantly harden their platform and improve the chances of successful, anonymous activity. This depends upon a user's skill level, motivation and available hardware. The checklist below is intended to provide a quick overview of important issues, categorized by difficulty level (easy, moderate, difficult and expert).

Note: Recommendations specific to [[Qubes-Whonix]] or [[Non-Qubes-Whonix]] are marked accordingly.
== Easy ==

=== Anonymous Blogging, Posting, Chat, Email and File Sending ===

* To remain anonymous, follow all the [[Surfing_Posting_Blogging|Whonix recommendations]] to minimize threats of keyboard/mouse biometrics, stylometry analysis and other covert channels.

=== Disabling and Minimizing Hardware Risks ===

* In Qubes-Whonix, only use a mouse and keyboard utilizing PS/2 ports (not USB ports) to prevent [https://theinvisiblethings.blogspot.fr/2011/06/usb-security-challenges.html malicious compromise] of dom0 (PS/2 adapters and available controllers are required).
* Do not enable audio input to any VM unless strictly required and consider [[Computer_Security_Education#Microphones|disabling microphones]] where possible (muting on the host) or unplugging external devices.
* Preferably [[Computer_Security_Education#Webcams|detach or cover webcams]] unless they are in use. In Qubes-Whonix, assign it to an untrusted VM (if needed).
* Avoid using [[Computer_Security_Education#Wireless_Input_Devices|wireless devices]], since they are insecure.
* Preferably disable or remove [https://en.wikipedia.org/wiki/Bluetooth#History_of_security_concerns Bluetooth hardware modules].
* Disable or remove [[Advanced_Security_Guide#Problematic_Interfaces|problematic devices]] like ExpressCard, PMCIA, FireWire or Thunderbolt which may allow attackers with physical access to read RAM.

=== File Handling ===

'''Qubes-Whonix Only'''

* In File Manager, disable previews of files from untrusted sources. Change file preferences in the TemplateVM's File Manager so future AppVMs inherit this feature.
* Files received or downloaded from untrusted sources (the internet, via email etc.) should not be opened in a trusted VM. Instead, open them in a DisposableVM (right click).
* Untrusted PDFs should be opened in a DisposableVM or converted into a [https://github.com/QubesOS/qubes-app-linux-pdf-converter trusted (sanitized) PDF] to prevent exploitation of the PDF reader and potential infection of the VM.

=== Mandatory Access Control ===

* Enable all available [[Security_Guide#AppArmor|apparmor profiles]] in the Whonix-Workstation and Whonix-Gateway TemplateVMs.
* Enable [[Security_Guide#Seccomp|seccomp]] on the Whonix-Gateway AppVM.

=== Passwords and Logins ===

* In Qubes-Whonix, store all login credentials and passwords in an offline vault VM (preferably with KeypassX) and securely cut and paste them into the Tor Browser. Copy something else into the clipboard after pasting so the password is purged and cannot be accidentally pasted elsewhere.
* Use unique and random [https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases Diceware passphrases] of 6-7 words in length for all on-line accounts, system logins and encryption / decryption purposes to prevent the feasibility of brute-forcing attacks.

=== Secure Downloads ===

* Download Internet files [[Secure_Downloads|securely]] using <i>scurl</i> instead of <i>wget</i> from the command line.

=== Secure Qubes Operation ===

'''Qubes-Whonix Only'''

* Verify the [https://www.qubes-os.org/doc/verifying-signatures/ authenticity and integrity] of the Qubes iso download.
* Check gpg is enabled in [http://docs.fedoraproject.org/en-US/Fedora/12/html/Deployment_Guide/sec-Configuring_Yum_and_Yum_Repositories.html config files] (gpgcheck=1) if new Fedora repositories are installed.
* Safely import new signing keys by checking it is the same from multiple sources.
* Preferably only install packages from trusted sources e.g. pre-configured Fedora, Debian, Whonix and Qubes sources. Untrusted or unverifiable programs should be installed in standaloneVMs or less trusted, cloned templates.
* For critical user data, protect against [https://www.qubes-os.org/doc/data-leaks/ unintentional leaks] by setting an empty NetVM field (set to "none") for the corresponding AppVM. 
* Observe the [https://theinvisiblethings.blogspot.fr/2011/05/app-oriented-ui-model-and-its-security.html security context] of colored windows borders in Qubes before running applications or manipulating data.
* Enable [https://en.wikipedia.org/wiki/IOMMU VT-d/IOMMU] via BIOS to have [https://en.wikipedia.org/wiki/DMA_attack DMA protection], effective network isolation, and the ability to assign PCIe devices to a HVM. Check it is running via dom0 (qubes-hcl-report).
* Ensure computer hardware meets all other [[Security_Guide#Qubes-Whonix_Hardware_Requirements|Qubes-Whonix  requirements]] for the best security, functionality and future compatibility with Qubes 4.X releases. 
* Always keep the system up to date in [https://www.qubes-os.org/doc/software-update-dom0/ dom0], [https://www.qubes-os.org/doc/software-update-vm/ template VMs] and standalone VMs.
* Never run applications in TemplateVMs or dom0, except updating tools or editors for configuration purposes (running applications poses security risks).
* Avoid [https://www.qubes-os.org/doc/multiboot/ dual / multi-boot configurations] in Qubes. The other OS could modify the unprotected /boot partition or firmware to maliciously compromise Qubes and/or spy on user activities.
* Follow all other [https://www.qubes-os.org/doc/security-guidelines/ security advice] from the Qubes team.

=== Tor Browser Series and Settings ===

* Consider using the Tor Browser alpha series. It provides additional [https://www.ics.uci.edu/~perl/pets16_selfrando.pdf Selfrando] (load-time memory randomization) protection. <ref>Selfrando provides a significant security improvement over standard address space layout randomization (ASLR) present in Tor Browser and other browsers. Selfrando is incompatible with grsecurity kernels. Due to a recently resolved [https://trac.torproject.org/projects/tor/ticket/20683 bug], Selfrando has not yet been integrated into the alpha series.</ref> <ref>The "hardened" Tor Browser series has been deprecated, see: https://trac.torproject.org/projects/tor/ticket/21912</ref> 
* Default search settings to the [https://3g2upl4pq6kufc4m.onion/privacy DuckDuckGo] <i>.onion</i> hidden service.
* Select [https://noscript.net/faq#qa7_1 ClearClick protections] in NoScript.
* Run the [[Tor_Browser#Security_Slider|Tor Browser Security Slider]] in the highest position. <ref>This may affect usability and proper functioning on some websites.</ref>
* [https://www.torproject.org/docs/faq.html.en#TBBJavaScriptEnabled Disable Javascript] by default and [[Tor_Browser#Security_vs_Usability_Trade-off|only allow it sparingly]] for trusted sites. <ref>This is more secure, but increases the user's fingerprinting risk due to selective use of Javascript.</ref>
* Use [https://www.torproject.org/docs/hidden-services.html.en <i>.onion</i> hidden services] where possible to stay within the Tor network.
* Use [[Tor_Browser#Multiple_Tor_Browser_Instances_and_Whonix-Workstations|multiple Tor Browser instances or Whonix-Workstations]] to better compartmentalize contextual identities.
* Follow all other [[Tor_Browser#Unsafe_Tor_Browser_Habits|Whonix recommendations for safe use]] of  [[Tor_Browser|Tor Browser]].

=== VirtualBox ===

'''Non-Qubes-Whonix Only'''

* Remove a host of [[Security_Guide#VirtualBox_Hardening|VirtualBox features]] to reduce the attack surface.
* Take regular, clean [[Security_Guide#VM_Snapshots|VM snapshots]] that are not used for any activities.
* Spoof the initial [[Advanced_Security_Guide#Spoof_the_Initial_Virtual_Hardware_Clock_Offset|virtual hardware clock offset]].

=== Whonix Updates ===

* Consider installing [[Security_Guide#Tor_Versioning|newer Tor versions]] via the Whonix stable-proposed-updates repository or directly from The Tor Project repository.

== Moderate ==

=== Create a USB Qube ===

'''Qubes-Whonix Only'''

* Prepare and utilize a [https://www.qubes-os.org/doc/usb/ USB qube]. USB keyboards and mice expose dom0 to attacks, and all USB devices are potential [https://en.wikipedia.org/wiki/Side-channel_attack side channel attack vectors].

=== Host Operating System Distribution ===

'''Non-Qubes-Whonix Only'''

* [[Computer_Security_Education#Host_Operating_System|Install GNU/Linux]] as the only serious option for a private host operating system. [https://www.gnu.org/proprietary/malware-microsoft.html Windows] and [https://www.gnu.org/proprietary/malware-apple.en.html MacOS] are surveillance platforms that do not respect user freedom or privacy.
* The [[Computer_Security_Education#Recommended_GNU.2FLinux_Distribution|Debian distribution]] is recommended by Whonix as providing a reasonable balance of security and usability.

=== Host Operating System Hardening ===

'''Non-Qubes-Whonix Only'''

* [[Advanced_Security_Guide#Harden_Debian|Harden]] the host Debian Linux OS.
* Use [[Advanced_Security_Guide#Full_Disk_Encryption|Full Disk Encryption (FDE)]] on the host.
* Apply a [[Advanced_Security_Guide#BIOS_password|BIOS password]] for BIOS setup and boot.
* [[Advanced_Security_Guide#torify_apt-get_traffic|Torrify apt-get traffic]] on the host to prevent fingerprinting and leakage of sensitive security information.
* Follow all other Whonix recommendations to [[Advanced_Security_Guide#Host_Security|further harden the host OS]] against [[Advanced_Security_Guide#Physical_Attacks|physical attacks]].

=== Networking ===

'''On both platforms:'''
* If possible, use a [[Advanced_Security_Guide#Dedicated_connection|dedicated network connection]] (LAN, WiFi etc.) that is not shared with other potentially compromised computers.
* If using a shared network via a common cable modem/router or ADSL router, configure a [[Advanced_Security_Guide#DMZ|de-militarized zone]] (perimeter network) to restrict Whonix-Gateway accessibility to/from other nodes on the network e.g. printers, phones and laptops.
* Test the [[Advanced_Security_Guide#Port_Scan|LAN's router/firewall]] with either an internet port scanning service or preferably a port scanning application from an external IP address.
* Change the default administration password on the router to a unique, random, and suitably long [https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases Diceware passphrase] to prevent bruteforcing attacks.
* WiFi users should default to the [https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access WPA2-AES standard] which provides the safest protocol and strongest encryption. Do not rely on WiFi Protected Set-up (WPS), which has [https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup major security flaws].
* Follow all other Whonix recommendations to [[Computer_Security_Education#Recommended_Router_Settings|lock down the router]].


'''In Qubes-Whonix:'''
* Use the Debian-8 Template for networking (sys-net and sys-firewall) since it is [https://github.com/QubesOS/qubes-issues/issues/1781 minimal in nature] and does not 'ping home', unlike the Fedora Template. <ref>https://forums.whonix.org/t/disable-sys-net-pings-to-fedoraproject-org/1952</ref>
* For greater security, higher performance and a lower resource footprint, consider using an experimental [https://github.com/talex5/qubes-mirage-firewall MirageOS-based unikernel firewall] that can run as a QubesOS ProxyVM.

=== Newer Kernels ===

'''Qubes-Whonix Only'''

* [https://www.qubes-os.org/doc/software-update-dom0/ Install newer kernels] to benefit from additional protections (including [https://www.grsecurity.net/ grsecurity elements]) being mainlined by the [http://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project kernel hardening project].

=== Onionizing Repositories ===

* Default the Debian, Whonix and Qubes package updates to [[Security_Guide#Onionizing_Repositories|Tor hidden service repositories]].

=== Sandboxing ===

* Use the [[Tor_Browser/Advanced_Users#Sandboxed_Tor_Browser|alpha sandbox]] to restrict Tor Browser. <ref>This is not possible until Whonix 14 is released.</ref>
* Use [[Security_Guide#Firejail|Firejail]] to restrict Firefox-ESR, VLC and other regularly used applications.

=== Secure Back-ups ===

'''Qubes-Whonix Only'''

* [https://github.com/QubesOS/qubes-issues/issues/971 Store encrypted back-ups] on a separate back-up disk that is already encrypted with LUKS.

=== Spoof MAC Addresses ===

Note: This is only necessary if you expect to travel with your laptop or PC. It is not required for home PCs that do not change locations.

* In Qubes-Whonix, [https://www.qubes-os.org/doc/anonymizing-your-mac-address/ follow these steps] to spoof the MAC address on the Debian or Fedora TemplateVM used for network connections.
* In Non-Qubes-Whonix, follow [[Computer_Security_Education#Changing_MAC_Addresses|these steps]] to spoof the MAC address of the network card on a Linux, Windows or macOS host.

=== Time Stamps and NTP Clients ===

'''Non-Qubes-Whonix Only'''

* [[Computer_Security_Education#Disable_ICMP_Timestamps|Disable ICMP timestamps]] and [[Computer_Security_Education#Disable_TCP_Timestamps|TCP timestamps]] on the host operating system to prevent leakage of: system information, host time, system uptime, and fingerprinting of devices behind a router.
* [[Time_Attacks#Clock-Leak_Vectors|Uninstall the NTP client]] on the host operating system and disable systemd's timdatectl NTP synchronization feature. This prevents time-related attack vectors which rely on leakage of the host time.

== Difficult ==

=== Anti-Evil Maid ===

'''Qubes-Whonix Only'''

* If a Trusted Platform Module is available, use [https://www.qubes-os.org/doc/anti-evil-maid/ AEM protection] to attest that only desired (trusted) components are loaded and executed during the system boot. Unauthorized modifications to BIOS or the boot partition will be notified.

=== Chaining Anonymizing Tunnels ===

* Avoid this course of action. The [[Tunnels/Introduction|anonymity benefits are unproven]] and it may actually hurt a user's anonymity and security goals.

=== DisposableVMs ===

'''Qubes-Whonix Only'''

* Run all instances of Tor Browser in a [[Qubes/Disposable_VM|DisposableVM]] which is preferably uncustomized to resist fingerprinting.

=== Email ===

'''In Qubes-Whonix:'''
* Use [https://www.qubes-os.org/doc/split-gpg/ split-GPG] for email to reduce the risk of key theft used for encryption / decryption and signing.
* Create an AppVM that is exclusively used for email and  change the VM's firewall settings to only allow network connections to the email server and nothing else ('Deny network access except...').
* Only open [https://micahflee.com/2016/07/how-qubes-makes-handling-pdfs-way-safer/ untrusted email attachments] in a DisposableVM to prevent possible infection.


'''On both platforms:'''
* Follow the [[E-Mail#Anonymity_Friendly_E-Mail_Provider_List|Whonix recommendations]] to select an email provider compatible with privacy and anonymity:
** Do not use [http://marketingland.com/yahoo-email-scan-microsoft-scroogled-46416 Yahoo] and [https://www.theguardian.com/technology/2014/apr/15/gmail-scans-all-emails-new-google-terms-clarify Gmail], which use automated software to scan emails for keywords to tailor advertising and sell products. 
** Do not rely on [https://www.nytimes.com/2014/03/21/technology/microsofts-software-leak-case-raises-privacy-issues.html?_r=0 Hotmail], which has a history of reading private emails and messages.
* Prefer email providers that are: free, support GPG encryption and key management, have encrypted inboxes by default, are outside [https://en.wikipedia.org/wiki/UKUSA_Agreement#9_Eyes.2C_14_Eyes.2C_and_other_.22third_parties.22 Fourteen Eyes] jurisdictions, and have desktop email compatibility with [[E-Mail#Icedove_.28Mozilla_Thunderbird.29_with_Enigmail_.2B_TorBirdy|Icedove]] (Mozilla Thunderbird).

=== Multi-Factor User Authentication ===

'''Qubes-Whonix Only'''

* Use a [https://www.qubes-os.org/doc/yubi-key/ Yubikey] to enhance the security of Qubes user authentication, mitigate the risk of password snooping, and to improve USB keyboard security.

=== Whitelisting Tor Traffic ===
* [[Qubes-Whonix]]: Configure sys-whonix to use [[Corridor|corridor]] as a filtering gateway to ensure only connections to Tor relays pass through. This provides an additional fail-safe to protect from accidental clearnet leaks that might arise from hypothetical Whonix bugs, but does not address potential Qubes ProxyVM leaks. <ref>https://github.com/rustybird/corridor</ref>
* [[Non-Qubes-Whonix]] or Qubes-Whonix: Use a standalone [https://github.com/rustybird/corridor corridor] as a filtering gateway.

== Expert ==

=== Disable Intel ME Blobs ===

* It is possible to [http://hardenedlinux.org/firmware/2016/11/17/neutralize_ME_firmware_on_sandybridge_and_ivybridge.html partially deblob] Intel's despicable ME firmware image by [https://github.com/corna/me_cleaner/blob/master/me_cleaner.py removing unnecessary partitions] from it. '''Warning:''' high risk of bricking your computer!

=== Flash the Router with Opensource Firmware ===

* Flash the insecure, limited-utility, proprietary firmware on the router with a [[Computer_Security_Education#Router_Firmware|powerful, open-source GNU/Linux alternative]]. '''Warning:''' risk of bricking your router!

=== Install Libreboot ===

* [https://libreboot.org/ Libreboot] is a free, opensource BIOS or UEFI replacement (firmware) that initializes the hardware and starts the bootloader for your OS. '''Warning:''' incompatible with newer architectures - risk of bricking your computer!

=== Physical Isolation ===

'''Non-Qubes-Whonix Only'''

* If additional hardware is available, consider [[Dev/Build_Documentation/Physical_Isolation|physical isolation]] in Non-Qubes-Whonix. Using two different computers and virtualization is one of the most secure configurations available, but may be less secure than [http://invisiblethingslab.com/resources/2014/Software_compartmentalization_vs_physical_separation.pdf Qubes' approach] (software compartmentalization).

= Stay Tuned =
[[Stay Tuned]]

= Advanced Security Guide =
For even more security advice, see the [[Advanced Security Guide]].

= Footnotes =
<references/>

{{Footer}}

[[Category:Documentation]]
</translate>
