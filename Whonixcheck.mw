{{Header}}
{{#seo:
|description=Whonix Security Check Application. Sanity Test. Leak Test. Update Check.
}}

[[Image:whonixchecknotification.png|thumb|whonixcheck completion]]

[[Image:Whonixcheck_GUI.png|thumb|whonixcheck progress meter]]

[[Image:whonixcheck_cli.png|thumb|whonixcheck in Konsole]]

[[Image:writing to tty1 by adrelanos.png|thumb|

[[Desktop#whonixcheck.2Ftimesync_writing_to_tty1|Automatically started whonixcheck writing to tty1.]]]]
= Introduction =
{{Code2|whonixcheck}} is a bash script which checks numerous, important system variables. whonixcheck can be run in a CLI environment (Konsole / Terminal) or via the GUI option, which has an in-built progress meter and summary notification popup of the results. The script is stored in the {{Code|/usr/bin/whonixcheck}} and {{Code|/usr/lib/whonix/whonixcheck/}} directories. Whonix is functional without the whonixcheck script since it only checks the system status; it is not responsible for core settings. Nothing is compiled, and the script can be easily inspected in the source code.

The whonixcheck script was inspired by https://check.torproject.org. In the past this was an important check when people were still recommended to use proxy settings to torify web browsers. Tor Browser is now securely pre-configured upon release, which means manual torification of web browsers is now recommended against. As an additional protection the default Tor Browser visits check.tpo to confirm everything is working as expected. <ref>Tor Browser in Whonix is configured to load a local Whonix resource after launch -- the familiar landing page.</ref> This site also checks whether Tor Browser is up-to-date by having Tor Button perform a local check after downloading version information.

check.tpo is useful for a browser check, but Whonix is a complete operating system. This means certain checks must be performed before the browser starts, otherwise a user's anonymity or security might be compromised. whonicheck's design allows the entire Whonix community to stay informed about important updates or advice, and this is particularly important for users who might not start the browser or visit the Whonix website regularly. For these reasons, whonixcheck is automatically started after boot/login if it has not been completed within the last 24 hours. This behavior holds true even if the system is not restarted, thereby keeping any long-running systems (like [[Onion_Services|Onion Services]]) safely informed.

If it is necessary to hide Tor and Whonix use from an ISP; see [[Hide_Tor_and_Whonix_from_your_ISP|here]]. While only a small minority of users configure their system to hide Tor, it is still desirable to hide any obvious Whonix signature. Whonix users are better off if adversaries cannot distinguish them from vanilla Tor Browser users, as the Whonix user pool is far smaller. 

When whonixcheck auto-starts, it first waits for a randomized period of time ranging between 60 and 500 seconds. This obfuscation feature is intended to further stymie traffic analysis, while Tor is still responsible for basic defenses against traffic volume and pattern signatures. Without waiting for a randomized period traffic flows would be more distinguishable, since a spike in whonixcheck traffic would always occur immediately after bootstrapping.

{{Running_Whonixcheck}}

= Checks =
* If run either on supported platforms bare metal ([[Physical Isolation]]), [[VirtualBox]], [[KVM]] or [[Qubes]]. Warns when using an unsupported (by Whonix developers) virtualizer. Reports only if not. Otherwise quiet unless using --verbose.
* Checks if the clock source is KVMClock and warns if that is the case. Might probably only happen for users using the [[KVM]] instructions. Reports only if KVMClock is detected. Otherwise quiet unless using --verbose.
* Checks that whonixsetup is done. Reports only if not. Otherwise quiet unless using --verbose.
* Checks that Tor is enabled. Reports only if not. Otherwise quiet unless using --verbose.
* Check the validity of Tor's config files by using {{Code|sudo tor --verify-config}}. Whonix-Gateway only. Reports only error. Otherwise quiet unless using --verbose.
* Check if a package manager is currently running. Waits as long as a package manager is running until it continues. It waits, because the Tor package or [[Dev/CPFP]] is currently upgraded, connection checks would fail. Otherwise quiet unless using --verbose.
* Checks, that Tor has been enabled (i.e., that {{Code|DisableNetwork 1}}) has been commented out from /usr/local/etc/torrc.d/50_user.conf (by whonixsetup or manually). Reports only if not. Otherwise quiet unless using --verbose.
* Check if the Tor process (pid) is running. Only on Whonix-Gateway. Reports error if not. Otherwise quiet unless using --verbose.
* Checks if IP forwarding is disabled on gateway.
* entropy availability check: Checks is {{Code2|/proc/sys/kernel/random/entropy_avail}} contains no less than 112 bytes.
* When using --verbose: Checks if {{Code|~/.whonix/msgdispatcher-error.log}} or {{Code|~/.whonix/whonix_torbrowser_updater_error.log}} exist and reports, if so.
* Checks if [[Dev/CPFP|Control Port Filter Proxy]] is running.
* Tor connection / IP
** Tor Bootstrap Status
** (1) downloads https://check.torproject.org with curl through extra SocksPort
** (2) downloads https://check.torproject.org with curl through TransPort
** The Whonix design ensures, that never the users real IP can be detected. Why check it anyway? Sometimes check.tpo reports false positives and fails to detect Tor exit nodes. The user should be informed about that possibility. That reduces support requests and bad press. It is fine to investigate if the Tor exit node could not be detected, but we're quite confident, that the outcome will be, that it is a Tor exit node IP. Some users may do dangerous and/or unsupported things, such as changing Whonix-Workstation's network interface from {{Code|internal}} network {{Code|"Whonix"}} to {{Code|bridged}} or {{Code|NAT}} or other creative and adventurous things, such as using virtualizers which are entirely unsupported and untested by Whonix developers. Last but not least, users can and are encouraged to install upgrades using {{Code|apt-get}} and free to install arbitrary packages on Whonix-Workstation. In a totally unexpected case, that may open up for a leak and whonixcheck is Whonix's last layer of defenses against such leaks.
** On Whonix-Workstation: [[Stream Isolation]], checks IP from (1) and (2) differ.
* Tor Browser version
** downloads https://check.torproject.org/RecommendedTBBVersions with curl through extra SocksPort
* Checks if a package manager is currently running. (Eventually the system is locked or the package manager in a broken state. Advices what to do in such situations.)
* operating system updates: Runs ''apt-get update'' through separate apt-get SocksPort (for stream isolation) and inform about the system being up to date or requiring updates. Using security workaround for unreliable apt-get exit codes. <ref>
https://phabricator.whonix.org/T194<br />
https://phabricator.whonix.org/T170
</ref>
* Meta Package Check: Accordingly checks if on a the whonix-gateway or whonix-workstation package is installed. (The packages which depend on all other recommended/default installed packages. See also [[Whonix_Debian_Packages]].)
* [[Download#Whonix_Version_Check_and_Whonix_News|Whonix version and Whonix news]]
** Supposed to work even if Whonix repository is down / changed.
** Supposed to work also for users who do not wish to use [[Whonix-APT-Repository]] (at all times).
** Not yet implemented: to [[Dev/ptt|defeat a permanent takedown threat]].
** Downloads Whonix News Files with curl through extra whonix news SocksPort.
** Is supposed to reflect most important news for people not even following Whonix Important Blog. In theory, if an IP leak in Whonix where found or exit nodes actively exploiting apt-get traffic, this would be used to briefly inform users about the danger.
** [[Dev/News|Whonix News Format]]
** Whonix version and news file must be signed by Whonix developer Patrick.
** Patrick's gpg key got copied to {{Code2|whonix_shared/usr/share/whonix/keys/whonix-keys.d/}} at build time.
** Warns if the file can not be gpg verified with Patrick's gpg key. In that case version and news is ignored.
** Messages signed more than one month ago are rejected and the user is informed about the message being no longer valid.
** Also see [[Trust]].
* Hostname
** Checks, if {{Code|hostname --fqdn}} outputs {{Code|host.localdomain}}.
** Checks, if {{Code|hostname }} outputs {{Code|host}}.
** Checks, if {{Code|hostname --ip-address }} outputs {{Code|127.0.0.1}}.
** Checks, if {{Code|hostname --domain }} outputs {{Code|localdomain}}.
* Informs if [[Whonix-APT-Repository]] is enabled and if yes, which one is enabled.

= Version Numbers =
== Whonix Build Version ==
The version number of the build. It never changes. And that is fine. At build time <ref>
The time at which the image was created.
</ref> the current Whonix version number is being added to the image itself. <ref>
The [https://github.com/Whonix/anon-shared-build-log-build-version anon-shared-build-log-build-version] package, [https://github.com/Whonix/anon-shared-build-log-build-version/blob/master/usr/lib/anon-dist/chroot-scripts-post.d/70_log_build_version 70_log_build_version] [[Dev/Source_Code_Intro#Chroot_Scripts|chroot script]] does in essence.
<pre>
echo "$anon_dist_build_version" > "/var/lib/anon-dist/build_version"
</pre>
</ref> It is there so whonixcheck can find out which version of the build script has created that version. This version number is supposed to never change. This is because sometimes updating or other issues do only apply to version created by specific, mostly older versions of the build script. This helps with diagnostic purposes therefore, should we ever need to deprecate a specific build version (because it would be too difficult/expensive to upgrade), then whonixcheck's [[#Whonix News]] could inform about this.

= Security =
The ''ca-certificates'' Debian package is installed on Whonix. Curl will verify the SSL certificate for downloads from check.tpo (SocksPort Test, TransPort Test, Tor Browser version check) and aborts if the certificate is not valid.

Attack surface for this script includes at least curl, apt-get, gpg, grep, sed, bash, uwt, torsocks, zenity, pgrep. Patrick believes, that benefits outweigh the risks not running those checks. The user is free to ''sudo chmod -x /usr/bin/whonixcheck'' and Patrick remains as always open for reviews and suggestions.

Also see [[SSL]].

== SSL Certificate Pinning ==
=== Introduction ===
<s>In whonixcheck 1.1-1 / Whonix 10 and above there will be an optional torproject.org certificate pinning option for SocksPort Test, TransPort Test and Tor Browser Update Check. If you want to use this, see below.</s>

https://phabricator.whonix.org/T80

=== How ===
Moved to: [[Next#whonixcheck_SSL_Certificate_Pinning]].

=== Defaults Discussion ===
For reasons for (not) enabling this feature by default, see [[Dev/SSL Certificate Pinning#Defaults Discussion]].

= Source Code Introduction =

[https://github.com/Whonix/whonixcheck/blob/master/usr/bin/whonixcheck /usr/bin/whonixcheck] {{Code2|source}}es:
* [https://github.com/Whonix/msgcollector/blob/master/usr/lib/msgcollector/error_handler /usr/lib/msgcollector/error_handler]
* [https://github.com/Whonix/anon-shared-helper-scripts/blob/master/usr/lib/anon-shared-helper-scripts/tor_enabled_check /usr/lib/anon-shared-helper-scripts/tor_enabled_check]
* [https://github.com/Whonix/anon-shared-helper-scripts/blob/master/usr/lib/anon-shared-helper-scripts/pkg_manager_running_check /usr/lib/anon-shared-helper-scripts/pkg_manager_running_check]
* followed by all files in [https://github.com/Whonix/whonixcheck/tree/master/usr/lib/whonixcheck /usr/lib/whonixcheck/] in lexical order

Then runs functions {{Code2|whonixcheck_main}} while passing command line arguments.

Function {{Code2|whonixcheck_main}} then calls:

* function [https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/parse_cmd {{Code2|parse_cmd_options}}] while passing command line arguments
* function [https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/preparation#L82 {{Code2|preparation}}]
* then uses function [https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/preparation#L17 {{Code2|whonixcheck_run_function}}] to run all other functions. The order differs for Whonix-Gateway and Whonix-Workstation. To find out how exactly and in which order, please have a look at {{Code2|/usr/bin/whonixcheck}}. The purpose of function {{Code2|whonixcheck_run_function}} is to allow users adding function names to configuration variable {{Code2|whonixcheck_skip_functions}} which allows to skip certain functions. (See also [[Advanced_Security_Guide#whonixcheck_Hardening|whonixcheck Hardening]].)

The {{Code2|/usr/lib/whonixcheck/}} folder is not a real .d style plugin drop-in folder. Shell function for separate [Whonix, unit] checks can be be put into separate files for better readability. The provided functions are then supposed to be run from {{Code2|/usr/bin/whonixcheck}} function {{Code2|whonixcheck_main}}.

For a simple example have a look at file [https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/check_entropy {{Code2|/usr/lib/whonixcheck/check_entropy}}] which contains function {{Code2|check_entropy}}. You can just do any information gathering and analysis as you want. In essence, in the function {{Code2|check_entropy}} example, that is.

<pre>
entropy_file="/proc/sys/kernel/random/entropy_avail"
entropy_size="$(cat "$entropy_file")"
if [ "${entropy_size}" -lt "112" ]; then
</pre>

Then you can use, copy and paste, common boilerplate for making what you found out visible.
<pre>
local MSG="<p>Entropy Available Check Result: low. <code>$entropy_file</code>: <code>$entropy_size</code> Please report this issue!</p>"
$output ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
</pre>

Or if you wanted to only output it, if the user has run whonixcheck with --verbose, then you could use.

<pre>
 if [ "$verbose" = "1" ]; then
</pre>

Other useful variables are available.

* $TEMP_DIR
* $VM "Whonix-Gateway" or "Whonix-Workstation"
* $vm_lower_case_short "gateway" or "workstation"
* $GATEWAY_IP
* $whonix_codename /etc/apt/sources.list.d/whonix.list codename
* $whonix_codename_uppercase
* $DAEMON = 1 run in daemon mode
* $AUTOSTARTED = 1 run after boot
* $manualrun = 1 manually run
* $ARCH "$(uname --machine)"
* $whonix_build_version
* $whonix_deb_package_version

For more examples, please look what other functions in folder {{Code2|/usr/lib/whonixcheck/}} are doing.

= Silent Mode =
{| class="wikitable" style="background-color: #fff;text-align: center"

! 
! Whonix-Gateway
! Whonix-Workstation

|-
! run in after boot (autostart mode)
| {{Yes}} <ref>To possibly give feedback in case of Tor bootstrapping is slow or grave issues.</ref>
| {{No}}  <ref>Less popups. Avoid duplicate popups (such as Tor bootstrapping not done yet).</ref>

|-
! run regularly during run (daemon mode)
| {{No}} <ref>Could result in a disruptive error popup while the user is doing something entirely different. Such as if the user has not been using Whonix-Gateway/Tor for a while and Tor is no longer connected, it would report this issue. If it is only a transient error, we are better off. If it is a permanent error that will get visible later, the user will hopefully run whonixcheck manually.</ref>
| {{No}} <ref>When using for example 5 AppVMs that would cause 5 error popups.</ref>

|}

{| class="wikitable" style="background-color: #fff;text-align: center"

! <u>situation</u>
! <u>action</u>

|-
! Tor bootstrapping fast enough <ref>(Tor connected when whonxicheck runs function {{Code2|check_tor_bootstrap}})</ref>
! "Connected to Tor" passive popup only.

|-
! Tor bootstrapping not done
! "Connecting to Tor" passive popup + success "Connected to Tor" passive popup when done or active error popup with advice when failed

|-
! grave issue <ref>For example, if unwanted packages are installed</ref> <ref>See also [[#Checks]].</ref> found
! active error popup with advice

|-
! no grave issue found
! no gui output

|-
! manual run of whonixcheck
! Then <code>silent</code> gets set to <code>0</code>. Resulting in progress bar + run all tests <ref>Verbose ones only when using --verbose.</ref> + active popup with results when done (like in Whonix 11).

|}

* always skip disclaimer when running inside Qubes
* made whonixcheck more silent, suitable for Qubes AppVM design
<br />
1) If running in Qubes, when autostarted (after boot) -> silent=3<br />
2) If running in Qubes, when daemon (planed iteration during run) -> silent=3<br />
3) Silent only applies to autostart and daemon mode. When manually run, show all messages. Same as Whonix 11.<br />
4) overview of various silent levels
<br />
* silent lower/equal 0: show SocksPort and TransPort "Test Result: Connected to Tor. IP" messages

* silent greater/equal 1: no "whonixcheck was recently run, no need to run it again, you could still manually start it" message.

* silent lower/equal 2: do test SocksPort and TransPort but only report errors (no connectivity, Tor not detected and false positives)

* silent greater/equal 2: no "Tor Bootstrap Result: Connected to Tor." message unless bootstrapping took a while and a progress bar was shown
* silent greater/equal 2: do test stream isolation, but only report errors
* silent greater/equal 2: no Whonix News result if there are no news and debian and build version up to date
* silent greater/equal 2: no "No updates found via apt-get" message
    
* silent greater/equal 3: no Tor SocksPort / TransPort test at all
* silent greater/equal 3: no stream isolation test at all
* silent greater/equal 3: no Whonix News check at all
* silent greater/equal 3: no apt-get update check at all
* silent greater/equal 3: skip to inform if Whonix repository is enabled
* silent greater/equal 3: no progress bar for the usual tests. Except a progress bar if Tor is not bootstrapped yet.
* silent greater/equal 3: skip test if a package manager is already running.

* silent greater/equal 4: skip test whether Whonix repository enabled/disabled test at all. In other words, do not report disabled Whonix repository.

= Development =
== Use Cases ==
* automated test: run after automatic boot by an automated test suite
* automatic run after boot: as connectivity progress information (Tor bootstrap check) (in progress... done [or failed])
* automatic run after boot: as a general sanity check [run gateway in ProxyVM, not AppVM, IP forwarding disabled, clock sanity, and much more]

* manual by the user: as connection functionality test
* manual by the user: as connection leak test
* manual by the user: as a general sanity check
* manual by the user: as a general system security and anonymity check
* manual by the user: as an information gather tool, shows Whonix Debian Package Version (and when using with --verbose it shows Whonix build version)
* manual by the user: as a VPN / tunnel functionality test

* to educate users: when they add a VPN, it breaks stream isolation

== TODO ==
* <s>non-zero exit codes when at least one warning or error was detected [for automated test suite]</s> (Done in Whonix 14)
* <s>check for failed systemd units [except perhaps apparmor] [for automated test suite]</s> (Done in Whonix 14)
* on error -> short error message, separate help button opens help, separate technical details drop down button shows debugging information

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]] [[Category:Design]]
