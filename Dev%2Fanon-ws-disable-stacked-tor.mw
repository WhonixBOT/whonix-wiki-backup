{{Header}}
{{#seo:
|description=Preventing Tor over Tor for Tor Browser, TorChat and others.
}}

= Why? =
See [[DoNot#Prevent_Tor_over_Tor_scenarios.]]

= Implementation =
TODO:

* needs update (moved to socat with Whonix 13 <code>anon-ws-disable-stacked-tor</code> <code>3:2.4-1</code> stable upgrade)
* needs update (moved to systemd-socket-proxyd with Whonix 14)

Implemented in three ways on Whonix-Workstation.

* Implemented in [https://github.com/Whonix/anon-ws-disable-stacked-tor anon-ws-disable-stacked-tor], [https://github.com/Whonix/anon-ws-disable-stacked-tor/blob/master/debian/control {{Code|debian/control}}]. The package uses the "Provides: tor" field<ref>See "7.5 Virtual packages - Provides" on http://www.debian.org/doc/debian-policy/ch-relationships.html</ref>, which should avoid any kinds of conflicts, in case upstream releases a higher version of Tor. This won't work for packages, which depend on an explicit version of Tor (such as TorChat). This is non-ideal, since for example the {{Code|torchat}} package will install Tor, but still acceptable, because of the following additional implementations.

* Tor's autostart is disabled in {{Code|/etc/default/tor}} (dpkg-diverted using config-package-dev), so even if the {{Code|tor}} package gets installed, it won't be automatically started.

* {{Code|rinetd}} is configured by [https://github.com/Whonix/anon-ws-disable-stacked-tor/blob/master/etc/rinetd.conf.anondist {{Code|/etc/rinetd.conf}}] to listen on
** Tor's default ports. I.e.
*** system Tor's {{Code|127.0.0.1:9050}}, {{Code|127.0.0.1:9051}} and,
*** Tor Browser's {{Code|127.0.0.1:9150}}, {{Code|127.0.0.1:9051}}
*** Tor Messenger's {{Code|127.0.0.1:9152}}, {{Code|127.0.0.1:9153}}
** Those are forwarded to Whonix-Gateway.
** This prevents the default Tor Browser, Tor Messenger and/or Tor package by The Tor Project from opening these default ports, which will result in Tor failing to open its listening port and therefore exiting, thus preventing Tor over Tor.

https://forums.whonix.org/t/socat-running-on-ws-called-from/2225

https://www.whonix.org/wiki/Dev/Whonix_Packages#anon-ws-disable-stacked-tor

We mimic a functional Tor as well as possible.

anon-ws-disable-stacked-tor is also providing:

* Tor Control Unix Domain Socket file: /var/run/tor/control, which is redirected to Control Port Filter Proxy on Whonix-Gateway.
* Tor Control Auth Cookie: a functional /var/run/tor/control.authcookie that works with [[Dev/Control_Port_Filter_Proxy|Control Port Filter Proxy]].
* Tor Socks Unix Domain Socket file: /var/run/tor/socks that is redirected to Whonix-Gateway Tor port 9050

https://github.com/Whonix/anon-ws-disable-stacked-tor/blob/master/etc/anon-ws-disable-stacked-tor.d/30_anon-dist.conf

Required for Tor Browser connectivity, SocksSocket:

* https://phabricator.whonix.org/T192
* https://trac.torproject.org/projects/tor/ticket/14272#comment:3
* https://trac.torproject.org/projects/tor/ticket/20111#comment:5

https://cloud.githubusercontent.com/assets/156128/21556064/8ead0338-cdd2-11e6-918c-d4ca61724b52.png any should work.

TODO: describe

* bindp
* https://phabricator.whonix.org/T561
* systemd socket activation
* https://phabricator.whonix.org/T357

= Debugging =
== onion-grater ==
Run.

{{CodeSelect|code=
echo "$TOR_SOCKS_IPC_PATH"
}}

Should show the following.

<pre>
/var/run/anon-ws-disable-stacked-tor/127.0.0.1_9150.sock
</pre>

----

Run.

{{CodeSelect|code=
echo "$TOR_CONTROL_IPC_PATH"
}}

Should show the following.

<pre>
/var/run/anon-ws-disable-stacked-tor/127.0.0.1_9151.sock
</pre>

Also please run.

{{CodeSelect|code=
UWT_DEV_PASSTHROUGH=1 curl 127.0.0.1:9150
}}

Should show the following.

<pre>
<html>
<head>
<title>Tor is not an HTTP Proxy</title>
</head>
<body>
<h1>Tor is not an HTTP Proxy</h1>
<p>
It appears you have configured your web browser to use Tor as an HTTP proxy.
This is not correct: Tor is a SOCKS proxy, not an HTTP proxy.
Please configure your client accordingly.
</p>
<p>
See <a href="https://www.torproject.org/documentation.html">https://www.torproject.org/documentation.html</a> for more information.
<!-- Plus this comment, to make the body response more than 512 bytes, so      IE will be willing to display it. Comment comment comment comment      comment comment comment comment comment comment comment comment.-->
</p>
</body>
</html
</pre>

Run a similar command.

<pre>
echo GET | socat - UNIX-CONNECT:/var/run/anon-ws-disable-stacked-tor/127.0.0.1_9150.sock
</pre>

Should show the same as above.

-----

Next one to try.

{{CodeSelect|code=
UWT_DEV_PASSTHROUGH=1 curl 127.0.0.1:9151
}}

Should show the following.

<pre>
510 Request filtered
...
</pre>

Run a similar command.

<pre>
echo GET | socat - UNIX-CONNECT:/var/run/anon-ws-disable-stacked-tor/127.0.0.1_9151.sock
</pre>

Should show.

<pre>
510 Request filtered
</pre>

== Debugging with curl ==

Trying to use <code>curl</code> rather than <code>curl.anondist-org</code> is a common mistake when debugging Whonix network issues.

<code>curl</code> is a symlink to <code>curl.anondist-orig</code>. In turn, this symlinks to <code>uwtwrapper</code> which runs <code>curl</code> under <code>torsocks</code>. <code>torsocks</code> then forces Tor to run on <code>localhost</code> for stream isolation.

==== To use curl ====

* The <code>uwt</code> steam isolation wrapper must be circumvented or disabled.
* The command must be run under user <code>clearnet</code>


In Whonix-Gateway or <code>sys-whonix</code> [[Qubes-Whonix|Qubes-Whonix]]
  
'''1.''' Change to user <code>clearnet</code>

{{CodeSelect|code=
sudo su clearnet
}}

'''2.''' Circumvent <code>uwt</code> stream isolation wrapper by appending <code>.anondist-orig</code> to <code>curl</code>

{{CodeSelect|code=
curl.anondist-orig <your_url>
}}

==== Using curl in Whonix 14 ====
 
In the following examples, the <code>exec</code> calls from the command output shows the difference between running <code>curl</code> with the <code>uwtwrapper</code> both enabled and disabled. 

'''<i>Example 1</i>'''

<code>curl</code> is run with the <code>uwtwrapper</code> enabled. 

{{CodeSelect|code=
uwtwrapper_verbose=1 curl <your_url>
}}

This results in the following <code>exec</code> calls. Only the latest (most recent) call matters which shows <code>torsocks</code> is prepended before running <code>curl</code>. 

 exec torsocks /usr/lib/uwtexec something <your_url>
 exec -a /usr/bin/curl /usr/bin/curl.anondist-orig <your_url>

'''<i>Example 2</i>'''

<code>curl</code> is run with the <code>uwtwrapper</code> disabled.

{{CodeSelect|code=
uwtwrapper_verbose=1 UWT_DEV_PASSTHROUGH=1 curl <your_url>
}}

This command results in the following <code>exec</code> calls which show <code>torsocks</code> does not get prepended before <code>curl</code>. Since <code>curl</code> does not run under <code>torsocks</code>, local connections are not hindered and there is no stream isolation.

  exec /usr/lib/uwtexec <your_url>
  exec -a /usr/bin/curl /usr/bin/curl.anondist-orig <your_url>

'''The output from the previous commands establish the following'''.

* <code>/usr/bin/curl</code> is symbolically linked to <code>/usr/bin/curl.anondist-orig</code>. This demonstrates <code>/usr/bin/curl.anondist-orig</code> is the actual (real) <code>curl</code> binary.

* When <code>/usr/bin/curl.anondist-orig</code> is run with the <code>uwtwrapper</code> disabled all <code>uwt</code> logic is circumvented. 


Users can either circumvent the <code>uwt</code> stream isolation wrapper or disabled it either permanently or temporary.
 
Links:

* [[Stream_Isolation|Stream Isolation]]
* [[Stream_Isolation/Disable_Easy|Stream Isolation/Disable Easy]]

-----

= Application Developers =
[[Dev/Whonix friendly applications best practices]]

= Footnotes =
<references />

{{Footer}}

[[Category:Design]]
