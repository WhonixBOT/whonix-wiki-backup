{{Title|title=Two-factor Authentication (2FA)}} 
{{Header}}
{{#seo:
|description=Understanding Two-factor authentication (2FA). How to avoid locking yourself out of online logins. Time-based One-time Password (TOTP). "Google Authenticator."
|image=https://www.{{project_clearnet}}/w/images/3/3d/2FA.jpg
}}
[[Image:2FA.jpg|thumb]]

= Introduction =

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = You are your email address! If an email address is hacked, the attacker can potentially take over most of your digital identity. This can lead to impersonation on social media and forums, the depletion of banking/credit/shopping accounts, access to cloud storage services or password managers, and more.
}}

{{mbox
| image   = [[File:Ambox_notice.png|40px]]
| text    =
2FA is beneficial even for advanced users that have the capability to easily detect phishing attempts. The reason is email addresses used for (financial) service sign-up can be hacked due to factors outside of an individual's control, such as database leaks, malicious insiders and so on. In that case 2FA will still afford protection to accounts.
}}

== Definition ==

Even users who are knowledgeable about [[Social_Engineering|(spear) phishing]] can benefit from two-factor authentication (2FA). 2FA and similar terms are encompassed under the broader multi-factor authentication (MFA) definition: <ref>https://en.wikipedia.org/wiki/Multi-factor_authentication</ref>
<blockquote>Multi-factor authentication ... is an electronic authentication method in which a user is granted access to a website or application only after successfully presenting two or more pieces of evidence (or factors) to an authentication mechanism: knowledge (something only the user knows), possession (something only the user has), and inherence (something only the user is). MFA protects user data—which may include personal identification or financial assets—from being accessed by an unauthorised third party that may have been able to discover, for example, a single password.</blockquote>

2FA can be used to strengthen the security of online accounts, smartphones, web services, access to physical locations and other implementations. By requiring two (or more) separate and distinct forms of information/identification before secure access is granted to something, this minimizes the threat posed by malicious actors. 2FA relies upon a combination of two of the following: <ref>https://www.investopedia.com/terms/t/twofactor-authentication-2fa.asp</ref>  
* something you know -- like a password
* something you have -- like a code sent to a smartphone or smartphone authenticator application
* something you are -- such as biometric markers (fingerprints, face or retina scans) 

A familiar example of 2FA is the withdrawal of money from an Automatic Teller Machine (ATM). To withdraw cash it is necessary to present a valid credit or debit card (something you have), and to enter a Personal Identification Number (PIN; something you know) for a successful transaction. Although this increases overall security, this procedure is vulnerable to attacks such as [https://www.fbi.gov/scams-and-safety/common-scams-and-crimes/skimming ATM skimming]. <ref>In this attack: <blockquote>
* ATM skimmer devices usually fit over the original card reader.  
* Some ATM skimmers are inserted in the card reader, placed in the terminal, or situated along exposed cables.
* Pinhole cameras installed on ATMs record a customer entering their PIN. Pinhole camera placement varies widely. 
* In some cases, keypad overlays are used instead of pinhole cameras to records PINs. Keypad overlays record a customer’s keystrokes.
* Skimming devices store data to be downloaded or wirelessly transferred later.</blockquote></ref>  <ref>https://pixelprivacy.com/resources/two-factor-authentication/</ref>

2FA is not foolproof because hackers can potentially access these authentication factors via malware, account recovery procedures, phishing attacks, [https://en.wikipedia.org/wiki/Man-in-the-browser browser vulnerabilities] and [[Warning#Man-in-the-middle_Attacks|Man-in-the-middle Attacks]]. It is also possible to intercept text messages that are sent as part of a 2FA procedure. This is why MFA is more secure than 2FA -- more than two factors are required before account access is granted.

== Digital Identity ==

Consider what would happen if:

* you immediately lost access to your email address
* a malicious third party had exclusive access to your email address while you did not

These hypothetical scenarios reinforce that a digital identity is centered around the inviolability (security) of personal email addresses. For many purposes, it's a trust anchor. Malicious actors who control your email address also have major control over most of your digital life. As noted in the [[Basic_Security_Guide_Introduction#Hacked_Email_Account|Essential Security Guide Introduction]] chapter:
<blockquote>Just one breach of an online email service permits the theft of valuable personal data, account/contact harvesting, re-sale of retail accounts, spam and much more. An email account is a particularly weak link, since once under the attacker's control they can reset the password, along with the passwords of many linked services and accounts.</blockquote> 

Feasible consequences of an email breach include: <ref>https://www.rd.com/list/what-hackers-can-do-with-email-address/</ref> <ref>https://krebsonsecurity.com/2013/06/the-value-of-a-hacked-email-account/</ref>

* <u>Employment</u>: forwarding of work documents and work email; access to Fedex, UPS, Salesforce or related accounts; employer/colleague details; a hack of the victim's employer; and sending a termination letter to an employer, employees, landlord, mobile carrier, banks etc.
* <u>Financial</u>: access to bank accounts; reset of accounts for malicious transactions; financial accounts/loans made in the victim's name; email account ransom; personal credit score harm; changed billing arrangements; cyberheist lures; and blackmail/extortion opportunities against the owner of the hacked account.
* <u>Harvesting</u>: all email and chat contacts; access to file hosting accounts; Google Docs, MS Drive, Dropbox and other accounts; software license keys; social security number and other information for identity theft; and password recovery requests to all social media and other accounts. <ref>Password recovery may not even be necessary because many Internet users tend to use the same passwords for multiple accounts.</ref>
* <u>Privacy</u>: access to personal name and history; personal messages, calendar, photos, Google/Skype chats; call records (plus mobile account); your location (plus mobile/i-Tunes); names of friends and family members; the threat of real-world stalking; and potentially political views, travel and favorite places.
* <u>Spam</u>: commercial email; phishing; malware proliferation; stranded abroad, email signature and Facebook/Twitter scams; and other malicious emails/messages requesting funds/cryptocurrency transfers to help "solve" non-existent scenarios.
* <u>Reputation</u>: reputational harm due to uploading of indecent content, photos, videos to social media/other websites; sending of inappropriate e-mails; and catfishing romantic partners. <ref>A catfish is someone masquerading as somebody else to create false identities, often to pursue deceptive online romances.</ref>
* <u>Retail Resale</u>: Facebook, Twitter, Tumbler, Macys, Amazon, Walmart, i-Tunes, Skype, Bestbuy, Spotify, Hulu+, Netflix, Origin, Steam, Crossfire and other accounts.

The multiple, serious consequences of an email breach emphasize the importance of properly configuring 2FA for both accounts and password managers to minimize the potential damage. It is also recommended to:
* use strong and unique [[Passwords#Generating_Unbreakable_Passwords|passwords]] for all accounts
* avoid the use of email accounts as a login for other accounts
* limit information shared over email
* avoid typing your email password on public WiFi networks

= Common Misconceptions =

'''Table:''' ''Common 2FA Misconceptions'' <ref>https://www.wired.com/insights/2013/04/five-myths-of-two-factor-authentication-and-the-reality/</ref> <ref>https://thecybersecurityplace.com/6-myths-about-two-factor-authentication/</ref> <ref>https://www.stuff.co.nz/business/opinion-analysis/300221352/3-common-misconceptions-about-twofactor-authentication</ref> <ref>https://www.yubico.com/blog/internet-security-myth-busters-debunking-3-common-misconceptions-about-two-factor-authentication/</ref> <ref>See also: [https://www.wwpass.com/pdf/docs/2FAsCostlyMisnomersAndMisconceptions.pdf 2FA’s costly misnomers and misconceptions].</ref>

{| class="wikitable"
|-

! scope="col"| '''Misconception'''
! scope="col"| '''Description'''
|-

! scope="row"| 2FA requires Google
| Google authenticator is the most popular 2FA implementation, but not the only one -- Google software is not necessary to take advantage of 2FA. Many services link to and recommend Google authenticator, but any Time-based One-time Password (TOTP) implementation will work, see: [[#Software Choices|Software Choices]].

|-

! scope="row"| 2FA is a quick fix to protect against future breaches
| Sites cannot simply "turn on" 2FA; deployment requires tokens to be issued or cryptographic keys embedded in other devices. If 2FA is deployed, many users will not have the means to log in, or if it is voluntary, some will not bother enabling this security feature.

|-

! scope="row"| 2FA is invulnerable to most threats
| 2FA does improve security but it is imperfect. For example: 
* 2FA technologies may prompt users to approve various transactions; inattentive users might approve an attacker's transactions without realizing.
* Third-party authentication tokens rely upon the security of the issuer (who can be breached).
* 2FA relying on text messaging (SMS) depends upon the security of the mobile provider; malware on a phone can intercept SMS messages and send them to an attacker.

|-

! scope="row"| 2FA always requires the use of a second device
| Single device 2FA is possible, for example keying information with a smartphone application that prompts the user for something they know. This means a second device is not needed to receive one-time passwords.

|-

! scope="row"| Most 2FA solutions are similar
| This is incorrect. 2FA solutions can rely on hardware tokens that produce one-time passwords, emails, SMS messages, mobile applications with cryptographic secrets (like Google Authenticator, Defender Soft Token etc.), keying information stored in a user's browser, physical security keys (like a YubiKey) and so on.

|-

! scope="row"| 2FA is unnecessary; strong and unique passwords are sufficient
| As noted in the introduction, this is demonstrably false. For example, phishing attacks, [https://en.wikipedia.org/wiki/Man-in-the-browser browser vulnerabilities] and [[Warning#Man-in-the-middle_Attacks|Man-in-the-middle Attacks]] can lead to the recovery of passwords. 2FA is recommended for all accounts -- even your password manager -- for an extra layer of security. This way hackers need to overcome two barriers instead of one to access an account.

|-

! scope="row"| All 2FA is equally strong
| This is incorrect. For example, SMS and mobile authenticator applications are vulnerable to SIM swapping, mobile malware, phishing scams, and [[Warning#Man-in-the-middle_Attacks|Man-in-the-middle Attacks]]. On the other hand, Google researchers found that no users relying exclusively on physical security keys were victims of targeted phishing campaigns (since physical key access is required to log in). <ref>https://security.googleblog.com/2019/05/new-research-how-effective-is-basic.html</ref> <ref>Device-based challenges like SMS codes, security keys and on-device prompts were generally more effective against automated bots, bulk phishing attacks, and targeted phishing attacks. Less useful were knowledge-based challenges like a secondary email address, phone number, or last sign-in location.</ref>

|-

! scope="row"| 2FA is complicated and time-consuming
| The right 2FA solution for a user's security needs can be simple to use, and does not always involve using one-time passwords. For example, a physical security key may only require one touch or tap of the key to log in.

|-

! scope="row"| 2FA requires an Internet connection
| This is incorrect. For example the TOTP authentication mechanism does not require an Internet connection.

|-

|}

= 2FA Configuration and Options =

== Backups ==

Users tend to not backup 2FA backup codes since no (popular) services enforces <ref>
Like bitcoin wallets enforce retyping the wallet mnemonic seed.
</ref> backups. Or users lose their 2FA backup codes and then when they lose the device used to generate 2FA codes, they will lock themselves out.

Recommendations:

* Always set up at least two (2) devices which can generate 2FA one time passwords.
* Always backup, write down 2FA backup codes in two (2) different places.

Common misconception: Google 2FA backup login codes cannot restore 2FA for services other than google. These are only a way to login into a google account after having lost access to the 2FA device.

== Software Choices ==

Google authenticator doesn't have a backup function. Non-freedom software. Therefore not the best choice.

Google authenticator desktop application replacement:

* [[keepassxc]] can be used as a replacement for Google Authenticator on desktop computers on Windows, Qubes OS (recommended), Linux (recommended) or Mac. Functional in offline virtual machine (VM).

== Popularity ==

Most popular, most supported at most services:

* TOTP, Time based One Time Password (often called "Google Authenticator") although Google Authenticator is not specifically required. See [[#Software Choices]] for Freedom Software applications.

Popular but not the most popular:

* [[YubiKey]]
* [https://en.wikipedia.org/wiki/WYSIWYS '''''W'''hat '''Y'''ou '''S'''ee '''I'''s '''W'''hat '''Y'''ou '''S'''ign'' (<code>WYSIWYS</code>)].

== Compartmentalization ==

For reasons of practicality, users might consider for real life, non-anonymous accounts at for example banks could be secured through TOTP generation on multiple non-anonymous devices such as Android and iPhone devices.

= Warnings =

== Threat Model ==

'''Table:''' ''2FA Threat Model'' 

{| class="wikitable"
|-

! scope="col"| '''2FA Protection Level'''
! scope="col"| '''Description'''
|-

! scope="row"| Full protection
| 2FA is effective when:
* A user email address is compromised due to either the email provider being hacked or a rogue employee. In this case the attacker could potentially impersonate the user, or use the password recovery option of external services such as other email services, financial services, (social media) accounts, and so on. However, the attacker would not have the necessary 2FA one-time passwords.
* Users fail victim to [[Social_Engineering|(spear) phishing]], for example when a login password (and maybe even the 2FA code) is sent by email to an attacker. By the time the attacker receives the message, the 2FA code will be either missing (if not sent by the user) or if lucky, may have already expired.
* Account logins are only protected by weak passwords, because 2FA acts to make login security stronger.
* [https://en.wikipedia.org/wiki/Shoulder_surfing_%28computer_security%29 Shoulder surfing] leads to disclosure of the password; the password in isolation does not allow logins.

|-

! scope="row"| Partial protection
| 2FA ''might'' work when:
* Password databases of third party services -- such as banks and cryptocurrency exchanges -- are compromised (because the 2FA database is not compromised by the attacker). In these cases there is still a probability of losing funds, but the risk is lower.
* An email provider is compromised -- such as a server compromise by an attacker or a rogue employee -- leads to unauthorized access to an email address, which is often enough to reset passwords. Depending on the third party service policies, changing 2FA credentials might not be easy. In these cases, an account compromise of the third party service might be preventable.

|-

! scope="row"| Ineffective protection
| 2FA is ineffective if the user's device is already infected by [[Malware and Firmware Trojans|malware]]. In that case a trojan horse can simply take over the login session without the user's knowledge.

|-

|}

== Security Issues ==

Avoid SMS-based 2FA due to [[Account_and_Mobile_Security#SIM_Swap_Scam|SIM Swap Scam]] and [https://www.vice.com/en/article/y3g8wb/hacker-got-my-texts-16-dollars-sakari-netnumber malicious SMS re-routing] as mentioned on the [[Account and Mobile Security]] wiki page.

== Anonymity Issues ==

Possible de-anonymization when using the following apps on a non-torified device:

* authy requires an internet connection
* Symantec VIP requires an internet connection
* Google authenticator / [https://play.google.com/store/apps/details?id=org.shadowice.flocke.andotp andOTP] do not use the internet at the time of writing to our current understanding but this might change with an (automatic) update.

If anonymity matters, it is strongly recommended to only run 2FA software in non-networked or torified machines.

= Practical 2FA Example =

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = A 2FA setup for Discourse and KeePassXC (an open-source password manager) is shown in the following example. 2FA implementations are possible for a wide range of other web services, SSH logins and more.
}}

{{Box|text=

'''1.''' Navigate to Discourse preferences.
 
[[File:2FA-discourse-prefernces.png|400px]]

'''2.''' <code>Click on Security</code> &rarr; <code>Manage Two-Factor Authentication</code>

[[File:2FA-discourse-security.png|400px]]

'''3.''' <code>Enter your password</code> &rarr; <code>Click Continue</code>

[[File:2FA-discourse-enterpassword.png|400px]]

'''4.''' Click on <code>Add Authenticator</code>

[[File:2FA-discourse-addauth.png|400px]]

'''5.''' <code>Select Enter manually</code> &rarr; <code>Take a copy of the QR code</code>

[[File:2FA-discourse-showcode.png|400px]]

'''6.''' <code>Open KeePassXC</code> &rarr; <code>Right-click on the Discourse account</code> &rarr; <code>Select Time-based one-time password</code> &rarr; <code>Set up TOTP...</code>

[[File:2FA-keepassxc.png|400px]]

'''7.''' <code>Add the QR code in the empty Key field</code> &rarr; <code>Click OK</code>

[[File:2FA-keepassxc-addkey.png|400px]]

'''8.''' Select <code>Copy TOTP</code>; new keys are regenerated every 30 seconds.

[[File:2FA-keepassxc-copykey.png|400px]]

'''9.''' <code>Add your username to My Authenticator</code> &rarr; <code>Add the generated TOTP to Code</code> &rarr; <code>Click Enable</code>

[[File:2FA-discourse-addkey.png|400px]]
}}

Readers are welcome to add further practical examples of 2FA to this section.

= Debian Packages =

* [https://packages.debian.org/buster/libpam-barada libpam-barada]: Pluggable authentication module (PAM) to provide two-factor authentication based on HMAC-Based One-time Password (HOTP).
* [https://packages.debian.org/buster/libpam-google-authenticator libpam-google-authenticator]: The Google Authenticator project has implementations of one-time passcode generators for several mobile platforms, as well as a PAM. <ref>This supports both the HOTP and TOTP algorithms.</ref> 
* [https://packages.debian.org/buster/libpam-blue libpam-blue]: PAM module for local authentication with bluetooth devices.
* [https://packages.debian.org/buster/libpam-oath libpam-oath]: Open AuTHentication (OATH) Toolkit libpam_oath PAM module. <ref>The OATH Toolkit has shared libraries, command line tools and a PAM module to enable easy  building of one-time password authentication systems.</ref>
* [https://packages.debian.org/buster/libpam-otpw libpam-otpw]: OTPW for PAM authentication. <ref>OTPW is a one-time password system which protects against the password list being stolen and last digit attacks.</ref>
* [https://packages.debian.org/buster/libpam-p11 libpam-p11]: A PAM module for using PKCS#11 smart cards.
* [https://packages.debian.org/buster/libpam-poldi libpam-poldi]: A PAM module allowing authentication using a OpenPGP smartcard. <ref>This PAM module allows logins, screenlock and service validation using a GnuPG smartcard.</ref>
* [https://packages.debian.org/buster/libpam-fprintd libpam-fprintd]: A PAM module for fingerprint authentication through fprintd.

See also:
* [https://wiki.debian.org/SecurityManagement/fingerprint%20authentication Debian wiki: Fingerprint authentication]
* YubiKey:
** [https://www.qubes-os.org/doc/yubikey/ Qubes wiki: YubiKey]
** The [https://github.com/QubesOS/qubes-app-yubikey Qubes' YubiKey package] for configuring YubiKey login support could be ported to Debian.

= See Also =

* [[Phone_Number_Validation|Phone Number Validation vs User Privacy]]
* [[Account and Mobile Security]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
