{{Header}}
{{#seo:
|description=Development Notes about existing and new Virtualizers supported by Whonix... VirtualBox, Qemu, KVM, VMware etc...
|image=https://www.whonix.org/w/images/a/aa/Background-1126047640.jpg
}}
{{forkme}}
= Introduction =
Whonix is available for:

* [[Qubes]]
* [[KVM]]
* [[VirtualBox]]

In an ideal world, Whonix would support all Virtualization Platforms. Theoretically it could be done using [http://libvirt.org/ libvirt]. Practically libvirt is out of question. [https://www.redhat.com/archives/libvirt-users/2012-August/msg00150.html libvirt-users Does libvirt abstract each and any vm specific command?] Libvirt does not (yet) abstract some commands Whonix depends on.

= Other Virtualization Platforms =
== Introduction ==
In theory, Whonix could run inside any virtualizer, because its build scripts are very modular and extensible. In reality, Whonix has no man power to test other virtualizers. As soon as contributors join the project and maintain support for other virtualizers, support for them can most likely be easily added.

== Support Plan ==
Whonix would need a [[Contribute#Maintainer|maintainer]] to support the other virtualization platform.

Important:

* Someone who runs those [[Test]], [[LeakTests]] and tests from [[Protocol-Leak-Protection_and_Fingerprinting-Protection]].
* Someone who otherwise looks around if everything is sane.

Ideal:

* Someone who creates, signs, uploads .ova images for the other virtualization platform (such as VMware, KVM, etc.).

== Partially Finished Attempts ==
* [[QEMU]] (deprecated)
* [[VMware]] (proof of concept, no maintainer)

= VirtualBox =
== VirtualBox missing features ==
The following is non-ideal for [[Comparison_with_Others#Verifiable_Builds|verifiable builds]], because we have to convert to vdi first:

* [https://forums.virtualbox.org/viewtopic.php?f=1&t=58460 export VM using VDI instead of VMDK?]: seems not possible.
* [https://forums.virtualbox.org/viewtopic.php?f=7&t=58461 Mount VMDK on Debian jessie?]: seems not possible.

The following is non-ideal, because we can not warn when host operating systems are being used we don't think are the right tool for hosting Whonix VMs:

* [https://forums.virtualbox.org/viewtopic.php?f=1&t=58498 Can a guest find out its host operating system?]: seems not possible.

* VirtualBox uses VMDK version 3. This is non-ideal, because working with these images is difficult.
** Converting these images is difficult.
*** <s>qemu-img version 1.6.1 ({{Code|qemu-img convert "vmdk_file" -O RAW "vdi_file"}}) fails with: {{Code2|qemu-img: 'image' uses a vmdk feature which is not supported by this qemu version: VMDK version 3}}, which is a [https://bugs.launchpad.net/qemu/+bug/1253465 known issue in qemu].</s> As per [https://bugs.launchpad.net/bugs/1253465 this], QEMU version equal or bigger than {{Code2|2.8}} should be capable to work with VMDK version 3 disks. TODO: try
*** Therefore it is required to convert them with VBoxManage to .vdi first. ({{Code|VBoxManage clonehd --format VDI "vmdk_file" "vdi_file"}})
** <s>Therefore the Free guestmount doesn't support mounting VMDK version 3 as well (because it internally uses qemu-img).</s> (Still true?)
** <s>It requires proprietary software to mount them, such as the proprietary nbdkit plugin [https://github.com/libguestfs/nbdkit/blob/master/plugins/vddk/README.VDDK vddk]. We're not aware of a Free Software alternative yet.</s> (Still true?)

== VirtualBox no longer in Debian main ==
* http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=709899
* http://lists.debian.org/debian-devel/2013/08/msg00057.html
* "Virtualbox ships a BIOS that requires Watcom to compile from real sources,precompiled copy they ship as well is free but is not the preferred form for modification." http://lists.debian.org/debian-devel/2013/08/msg00106.html
* https://www.virtualbox.org/ticket/12011
* https://lists.torproject.org/pipermail/tor-talk/2013-September/029978.html

* This is unrelated to <code>VirtualBox Oracle VM VirtualBox Extension Pack</code>, which is proprietary, and which was never in Debian.

== Arguments for keeping VirtualBox Support ==
* [[KVM]] is not available to Windows users.
* Simplicity, as in: [[VirtualBox]] has a VM import GUI feature.
* <s>We have a [[Windows|Whonix Windows Installer]].</s> (Unmaintained.)
* Available to users not owning computer providing hardware virtualization. ([[KVM]] requires that. [[QEMU]] may or may not but is [[unsupported]].)
* Due to Windows users and simplicity it leads to greater popularity, which in theory attracts more users, developers, auditors, [[payments]], etc and is therefore good for the overall health of the project.
* Some Windows/[[VirtualBox]] users experimenting with their first Linux (Whonix) will one day become users who mainly use Linux as their host operating system.

== Why Use KVM Over VirtualBox? ==
See [[KVM#Why_Use_KVM_Over_VirtualBox.3F|Why Use KVM Over VirtualBox?]]

== See Also ==

* [[Advanced_Security_Guide#About_VirtualBox]]

== Misc ==
== Status ==
Works on Debian stretch on real hardware.

Does not work inside Whonix VirtualBox most likely due to anbox issues inside VirtualBox.

Small chance it will work better once Whonix is based on Debian buster.

== Install Anbox ==
{{Box|text=
[[Update]] the package lists.

{{CodeSelect|code=
sudo apt-get update
}}

Install adb fastboot.

{{CodeSelect|code=
sudo apt-get install adb fastboot
}}
}}

Install anbox and newer kernel. <ref>
It is required to install a newer linux kernel because it contains kernel modules required by anbox. No longer required on Debian buster and above.
</ref>

{{Box|text=
{{Install Backport|
package=linux-image-amd64 linux-headers-amd64 anbox
}}
}}

{{Box|text=
Change directory to the <code>/var/lib/anbox</code> folder.

{{CodeSelect|code=
cd /var/lib/anbox
}}

Download anbox andorid image.

{{CodeSelect|code=
sudo curl --tlsv1.2 --remote-name https://build.anbox.io/android-images/2018/07/19/android_amd64.img
}}

Download anbox andorid image sha256sum file.

{{CodeSelect|code=
sudo curl --tlsv1.2 --remote-name https://build.anbox.io/android-images/2018/07/19/android_amd64.img.sha256sum
}}

Verify.

{{CodeSelect|code=
sha256sum --check android_amd64.img.sha256sum
}}

Should show:

<pre>
android_amd64.img: OK
</pre>

Rename <code>android_amd64.img</code> to <code>android.img</code>. <ref>
anbox-container-manager.service expects this file name.
</ref>

{{CodeSelect|code=
sudo mv android_amd64.img android.img
}}
}}

Reboot required. <ref>
So new kernel gets load. No longer required on Debian buster.
</ref>

{{CodeSelect|code=
sudo reboot
}}

<ref>
{{Box|text=
Start anbox systemd service.

{{CodeSelect|code=
sudo systemctl start anbox-container-manager.service
}}

Check if anbox systemd service is functional.

{{CodeSelect|code=
sudo systemctl status anbox-container-manager.service
}}

Should show something similar to the following.

<pre>
● anbox-container-manager.service - Anbox Container Manager
   Loaded: loaded (/lib/systemd/system/anbox-container-manager.service; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2018-12-31 06:23:49 EST; 874ms ago
     Docs: man:anbox(1)
  Process: 1996 ExecStartPre=/usr/share/anbox/anbox-bridge.sh start (code=exited, status=0/SUCCESS)
  Process: 1991 ExecStartPre=/sbin/modprobe binder_linux (code=exited, status=0/SUCCESS)
  Process: 1986 ExecStartPre=/sbin/modprobe ashmem_linux (code=exited, status=0/SUCCESS)
 Main PID: 2074 (anbox)
    Tasks: 9 (limit: 4915)
   Memory: 5.1M
      CPU: 51ms
   CGroup: /system.slice/anbox-container-manager.service
           └─2074 /usr/bin/anbox container-manager --daemon --privileged --data-path=/var/lib/anbox

Dec 31 06:23:48 debian systemd[1]: Starting Anbox Container Manager...
Dec 31 06:23:49 debian systemd[1]: Started Anbox Container Manager.
</pre>
}}
</ref>

== Start Anbox ==
=== From Start Menu ===
<code>Start menu</code> -> <code>Accessories</code> -> <code>Anbox</code>

=== From Command Line ===
<ref>
/usr/share/applications/anbox.desktop
</ref>

{{CodeSelect|code=
anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity
}}

== Anbox Issues ==

https://github.com/anbox/anbox/issues/72

<pre>
user@host:~$ anbox check-features
Your computer does meet all requirements to run Anbox
user@host:~$ sudo anbox check-features
Your computer does meet all requirements to run Anbox
</pre>

<pre>
env ANBOX_LOG_LEVEL=debug anbox session-manager
libEGL warning: DRI2: failed to authenticate
[ 2018-12-31 12:16:33] [Renderer.cpp:168@initialize] Using a surfaceless EGL context
[ 2018-12-31 12:16:33] [Renderer.cpp:193@initialize] Failed: Missing egl_image related extension(s)
[ 2018-12-31 12:16:33] [service.cpp:41@Service] Successfully acquired DBus service name
Stack trace (most recent call last) in thread 3080:
#7    Object "[0xffffffffffffffff]", at 0xffffffffffffffff, in 
#6    Object "/lib/x86_64-linux-gnu/libc.so.6", at 0x7f324fdb8ace, in clone
#5    Object "/lib/x86_64-linux-gnu/libpthread.so.0", at 0x7f3251e76493, in 
#4    Object "anbox", at 0x56263e972600, in emugl::Thread::thread_main(void*)
#3    Object "anbox", at 0x56263e89832c, in RenderThread::main()
#2    Object "anbox", at 0x56263e96d7a3, in renderControl_decoder_context_t::decode(void*, unsigned long, IOStream*)
#1    Object "anbox", at 0x56263e8f558e, in 
#0    Object "anbox", at 0x56263e8f8555, in RendererConfigList::getPackInfo(int*, int*) const
Segmentation fault (Address not mapped to object [(nil)])
Segmentation fault
</pre>

{{Footer}}

[[Category: Design]]
