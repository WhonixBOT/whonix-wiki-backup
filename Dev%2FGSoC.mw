
= Proposals =

== 2019 ==

=== Application ===
'''Introduction'''

Every software project should solve a problem. Before offering the solution (your Google Summer of Code project), you should first define the problem. What’s the current state of things? What’s the issue you wish to solve and why? Then you should conclude with a sentence or two about your solution. Include links to discussions, features, or bugs that describe the problem further if necessary.

'''Project goals'''

Be short and to the point, and perhaps format it as a list. Propose a clear list of deliverables, explaining exactly what you promise to do and what you do not plan to do. “Future developments” can be mentioned, but your promise for the Google Summer of Code term is what counts.

'''Implementation'''

Be detailed. Describe what you plan to do as a solution for the problem you defined above. Include technical details, showing that you understand the technology. Illustrate key technical elements of your proposed solution in reasonable detail.

'''Timeline'''

Show that you understand the problem, have a solution, have also broken it down into manageable parts, and that you have a realistic plan on how to accomplish your goal. Here you set expectations, so don’t make promises you can’t keep. A modest, realistic and detailed timeline is better than promising the impossible.

If you have other commitments during GSoC, such as a job, vacation, exams, internship, seminars, or papers to write, disclose them here. If you have conflicts, explain how you will work around them. If you are found to have conflicts which you did not disclose, you may be failed.

Open and clear communication is of utmost importance. Include your plans for communication in your proposal; daily if possible. You will need to initiate bi-weekly formal communications such as a post in Whonix forum. Lack of communication will result in you being failed.

'''About me'''

Provide your contact information and write a few sentences about you and why you think you are the best for this job. Prior contributions to Whonix are helpful; list your commits. Name people (other developers, students, professors) who can act as a reference for you. Mention your field of study if necessary. Now is the time to join the Whonix forum and the relevant mailing lists. We want you to be a part of our community, not just contribute your code.

Tell us if you are submitting proposals to other organizations, and whether or not you would choose Whonix if given the choice.

Other things to think about:

    Are you comfortable working independently under a supervisor or mentor who is several thousand miles away, and perhaps 12 time zones away? How will you work with your mentor to track your work? Have you worked in this style before?
    If your native language is not English, are you comfortable working closely with a supervisor whose native language is English? What is your native language, as that may help us find a mentor who has the same native language?
    After you have written your proposal, you should get it reviewed. We will try to comment on every proposal but it is wise to ask a colleague or a developer to critique your proposal as well. Clarity and completeness are important.




= Proposals =

== Suggested Proposals ===

Project: Whonix IPv6 and nftables support

Brief explanation: T509: https://phabricator.whonix.org/T509

Recent upstream features such as Tor's IPv6 support and the Linux kernel's transition to nftables fromm iptables requires that Whonix adapts downstream to take advantage of these developments. 

Expected results:

Work at upstream Tor: An older version of https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy page was the origin of Whonix. Update that page for nftables / IPv6 support without mentioning Whonix. Then discuss that on the tor-talk mailing list for wider input. - https://trac.torproject.org/projects/tor/ticket/21397
implement corridor feature request add IPv6 support / port to nftables - https://github.com/rustybird/corridor/issues/39
port whonix-firewall to nftables
* Support connections to IPv6 Tor relays
* Support connections to IPv6 destinations
* Migrate all iptables rules to nftables and run leak tests to ensure no degradation of security occured.

Knowledge prerequisite:

nftables
iptables
IPv6

Mentor: Patrick Schleizer




Project: Censorship Circumvention Gateway

Brief explanation:

Censorship Circumvention Gateway is similar to the idea of a Whonix-Gateway. but it is optimized for circumvention and speed only, without trying to estabilish anonymity at all.

One motivation for this project is to have a reasonably good speed for censorship circumvention. Previous reporting indicates that, although many pluggable transport tools have been intergrated into Whonix, the speed can be so slow that it makes it almost unusbale (Meek_lite in China).

Another motivation for this project is to work around the chiken-and-egg problem of distributing and obtaining censorship cirucmvention tools. Fortuately, many channels have been estabilished to mitigate the distribution issues. Thus, we’d like to provide a secure and censorship resistatnt mechanism to download and update censorship cirumvention tools behind national firewalls.

A roadmap on intergrating Lantern, a censorship circumvention tool into a gateway VM is described here: https://www.whonix.org/wiki/Lantern

For more information, there is a related technical report: https://groups.google.com/forum/#!msg/qubes-devel/FbSUL8Pw8mk/v6bN_gErBQAJ

Expected results:

A secure and censorship resistant way to distribute pre-configured censorship cirumvention tools and hide all unnecessary complexity from users for ease of use.

Knowledge prerequisite:

GNU Make

Mentor: Patrick Schleizer




Project: Using Tor Browser Bundle's Tor as the “system Tor”

Brief explanation: T887: https://phabricator.whonix.org/T887

It would save the Whonix community a great deal of development time and offer many new features if we could use the Tor Browser Bundle's (TBB) Tor tooling rather than the standalone Tor daemon dsitributed from the Debian repos. This will allow Whonix to immediately take advantage of the latest censorship circumvention (pluggable transports) and the tor-launcher graphical user interface. Moreover, the current Tor pacakage requires manual testing by Whonix Devs and is then uploaded to the Whonix repo. This procedure is time consuming and forces users to put more trust in the development infrastructure which we would rather minimize.

Expected results:

tor-control-panel / anon-connection-wizard integration into a Tor configuration GUI that uses the latest pluggable transports from TBB.
debugging and working around Apparmor and systemd seccomp sandboxing interaction issues when pluggable transports are used.

Knowledge prerequisite:

bash
systemd

Mentor: Patrick Schleizer
