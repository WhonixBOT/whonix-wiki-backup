{{Header}}
{{#seo:
|description=Malware and Firmware Trojans, Protecting Against Infection
|image=https://www.whonix.org/w/images/b/b4/Malware-1446109640.jpg
}}
[[image:Malware-1446109640.jpg|thumb]]
= Malware =

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = The integrity of the host is a critical part of the system's [https://en.wikipedia.org/wiki/Trusted_computing_base Trusted Computing Base]. If the host system is compromised by [https://en.wikipedia.org/wiki/Malware malware], so is every {{project name}} virtual machine, Tor process and communication thought to be anonymous.
}}

== Introduction ==

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = '''Reminder:''' {{project name}} is not perfect. The security, anonymity and privacy issues facing society are great, but there are few volunteers who are ''seriously'' investing the effort to challenge and resolve them.
}}

{{Should I be concerned}}

== The Importance of a Malware Free System ==

Malware has malicious intent and can potentially: <ref>https://en.wikipedia.org/wiki/Malware</ref>
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* View and take snapshots of the desktop.
* Peruse files and folders.
* Gain access to protected data when decrypted.
* Exfiltrate, corrupt or destroy data (particularly financial and personal information).
* Damage operating system functionality.
* Encrypt the contents of a drive(s) and demand payment for decryption ([https://en.wikipedia.org/wiki/Ransomware ransomware]). 
* Display unwanted advertising.
* Install unwanted software.
* Install persistent [https://en.wikipedia.org/wiki/Rootkit rootkits] or [https://en.wikipedia.org/wiki/Backdoor_(computing) backdoors].
* Track browsing and other behaviour.
* Remotely turn on webcams and microphones.
* Create "zombie" computers which form part of a botnet for spam email, [https://en.wikipedia.org/wiki/Distributed_denial-of-service DDOS attacks] or the hosting of illicit / illegal material.
* Record everything a user types, sends and receives.
</div>

== Detection of System Changes ==

If trivial changes are noticed on your system -- such as a duplicate deskop icon -- this is not evidence of a hack or leak. Similarly, if warning or error messages appear that are difficult to understand, in most cases there is no need for panic. If something unexpected occurs such as the appearance of a "htaccess file in home directory", or graphical glitches emerge in [[Arm#Nyx|Nyx]], then it is more likely a harmless bug and/or usability issue rather than a compromise.

Skilled attackers do not leave such obvious traces of their breach. An infection by tailored malware is more plausible in this scenario and this is virtually impossible to detect by reading random messages in system logs. Even malware that is bought off-the-shelf (malware building toolkits) are unlikely to be discovered by cursory inspections. <ref>Interested readers can verify these claims by researching off-the-shelf malware building toolkits. They are dangerous to install for inexperienced users, but there is a wealth of information online such as screenshots and video tutorials.</ref> [https://en.wikipedia.org/wiki/Rootkit Rootkit] technology is no doubt a standard feature of the various programs.

Strange files, messages or other system behavior could feasibly relate to an attacker wanting the user to find something. However, the likelihood of this kind of harassment is considered low. [https://en.wikipedia.org/wiki/Script_kiddie Script kiddies] ("skiddies") are unskilled attackers who uses scripts or programs to conduct attacks on computer systems and networks, most often with juvenile outcomes. For example, they might use programs to remotely control poorly-secured Windows desktops, trolling their victims from an open, forced chat window, opening their DVD drive and so on. It is improbable that skiddies can achieve similar exploits against Linux, Xen or BSD platforms. <ref>It is unclear if script kiddie programs are readily available for attacking non-Windows users.</ref> Sophisticated attackers generally avoid detection, unless the user is unlucky enough to be a victim of [https://en.wikipedia.org/wiki/Zersetzung Zersetzung] (a psychological warfare technique).

Every forum post and support request requires time that could otherwise be directed to {{project name}} development. Unless there is genuine evidence of a serious and credible problem, there is no need for a new post. Developers and the {{project name}} community at large do not have enough time to explain every message that Linux might report. In most cases, they are not important and outside the control of {{project name}} developers.

Related:
* [[Browser Tests]]
* [[Dev/Leak Tests|Leak Tests]]

== The Utility of Antivirus Tools ==

Antivirus products and [https://en.wikipedia.org/wiki/Personal_firewall personal firewalls] are ''not'' drop in solutions for a secure host. Malware can often stay undetected and evade scans, while application level personal firewalls are often circumvented. <ref>https://www.grc.com/lt/leaktest.htm</ref> [https://en.wikipedia.org/wiki/Polymorphic_code Polymorphic code] and [https://en.wikipedia.org/wiki/Rootkit rootkits] essentially render antivirus products helpless. <ref>
https://arstechnica.com/security/2014/05/antivurus-pioneer-symantec-declares-av-dead-and-doomed-to-failure/
</ref> <ref>
[https://www.reddit.com/r/IAmA/comments/sq7cy/iama_a_malware_coder_and_botnet_operator_ama/?limit=500000 A botnet author brags in this thread of writing unbeatable malware and trolling antivirus vendors.]
</ref> 

Antivirus tools are actually worse than useless. In the case of sophisticated and targeted attacks, the antivirus software can serve as a pathway to exploiting a system's kernel, since they almost always run with administration level privileges. <ref>https://theintercept.com/2015/06/22/nsa-gchq-targeted-kaspersky/</ref> Antivirus software also harms privacy by sending system files back to the company servers for analysis.<ref>https://www.schneier.com/blog/archives/2017/10/more_on_kaspers.html</ref> The software also actively conducts man-in-the-middle attacks on secure SSL connections, enabling very sensitive information to be viewed. <ref>https://bugs.chromium.org/p/project-zero/issues/detail?id=978</ref>

== Preventing Malware Infections ==

The optimal scenario is to avoid infection by malware in the first place. Once malicious code has accessed a system, it is next to impossible to contain. Sensible steps include: hardening the operating system, carefully vetting programs and files that are retrieved from the Internet, and using hypervisors (virtualizers) to isolate software that processes untrusted data.

In the event a system compromise is strongly suspected or confirmed, the ultimate goal is to re-establish a trusted, private environment for future activities -- see [[Disaster_Recovery|Compromise Recovery]] for  techniques to recover from host and/or {{project_name}} VM infections.

== Detecting Malware Infections ==

Detecting off-the-shelf (standardized) malware is a very hard problem and conceptually a lost cause. If uncustomized malware is widespread enough, then it has a chance of being detected by a technician. Tailored malware might also get detected by a technician, but the likelihood is low unless they are lucky or gifted.

Non-technical users do not have many good options. They can either:

* Spend a few years to rapidly increase their knowledge base of operating systems, network protocols, package analysis, programming, disassembly etc., and then try their luck.
* Pay exorbitant sums to a technician to try and find system malware, even though there is no certainty of success. <ref>The salary costs for a security researcher / malware analyst over an extended period rule this out for most individuals.</ref> <ref>https://forums.whonix.org/t/document-recovery-procedure-after-compromise/3296/12
</ref>
* Or seek the voluntary assistance of a technician to find malware, if they are both a high value target and have a reasonable rationale for why they are likely compromised. <ref>Only a select group of people fall into this group, for instance, whistleblowers targeted and infected by tailored viruses. Experts might be located who are willing to conduct analysis pro bono; later publicizing their findings for the public benefit.</ref>

== Watering Hole Attacks ==

It should be noted that advanced malware can infect a user's computer via a [https://www.techopedia.com/definition/31858/watering-hole-attack Watering Hole Attack]. This vector has similarities to the software version of a [[Firmware_Security_and_Updates#Supply_Chain_Attacks|Supply Chain Attack]], and these methods are not mutually exclusive: <ref name=Watering_hole_attack>https://www.techopedia.com/definition/31858/watering-hole-attack</ref>

<blockquote>A watering hole attack is a malware attack in which the attacker observes the websites often visited by a victim or a particular group, and infects those sites with malware. A watering hole attack has the potential to infect the members of the targeted victim group. Although uncommon, a watering hole attack does pose a significant threat to websites, as these attacks are difficult to diagnose.</blockquote>

In the case of (Qubes-){{project_name}} users, any future attempt would logically target hosted content on GitHub, SourceForge, various forum locations,  mirrors, popular documentation links, and frequently visited security and anonymity sites like Tails, The Tor Project and so on. <ref>More commonly attacks favor banks, large organizations and government offices due to the obvious political and profit motives.</ref> The hope is that developers, contributors and general users of the software become infected with stealthy malware that is immune to detection.

The attack involves a few steps: <ref name=Watering_hole_attack /> <ref>https://en.wikipedia.org/wiki/Watering_hole_attack</ref>

# Zero-day or other vulnerabilties target the website software.
# Malicious JavaScript or HTML are most often used to inject malicious programming code.
# The code redirects visitors to a different site that serves "malvertisments" or malware masquerading as legitimate software.
# Once installed, the malware can infect various members of the targeted group.

It should be noted that advanced adversaries are capable of gaining knowledge about the behavioral patterns of target groups -- where they congregate, topics of research, related interests, and handle mapping of anonymous networks. This generic browsing and membership knowledge, along with observed security practices, greatly narrows the number of specific sites that need be targeted and the suitable attack mode. One way to mitigate this threat is to rigorously inspect websites for malicious code. 

Interested readers can learn about six recent watering hole attacks targeting the US, China, banks and other entities [https://en.wikipedia.org/wiki/Watering_hole_attack#Examples here].

= Firmware Trojans =

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = Once a user is infected with very sophisticated malware that modifies low-level firmware, it is extremely difficult to detect in almost all cases.
}}

Firmware infections should not be confused with [https://en.wikipedia.org/wiki/Hardware_Trojan hardware/circuit trojans], which are malicious modifications made to machine components during the manufacturing process. Despite their sophistication, circuit trojans are not immune to detection. <ref>https://en.wikipedia.org/wiki/Hardware_Trojan#Detecting_Hardware_Trojans</ref>

== Virtualizers and Hardware Compromise ==

Virtualizers like Qubes, VirtualBox and KVM cannot absolutely prevent the compromise of hardware. Running all activities inside VMs is a very reasonable approach. However, this only raises the bar and makes it more difficult and/or expensive to compromise the whole system. It is by no means a perfect solution.

No distribution of Linux, BSD, Xen or any other variant can solve the issue of needing to dispose of potentially infected hardware. Hardware-specific issues can really only be fixed at the hardware level. At best, software interventions can only provide workarounds.

== The Promise of Libre Firmware ==

The problem is no hardware exists that consists of entirely Libre firmware. It is very difficult to analyze the [https://en.wikipedia.org/wiki/Firmware firmware] of hardware, wipe potentially compromised versions, or [[Firmware_Security_and_Updates|overwrite firmware with a most-likely-clean version]]. 

Even if a user wholly depended on Libre firmware, this would only make verification easier but it could not stop infection. Disassembling hardware components -- BIOS, disk controllers, CPU, Intel AMT and so on -- and flashing them with clean versions offline is extremely difficult. It is simply cheaper and more convenient to buy new hardware.

The bundling of undesirable anti-features like DRM in closed firmware is further evidence that Libre firmware is needed, in addition to [https://www.gnu.org/philosophy/free-hardware-designs.html Libre hardware designs].

A hypothetical stateless computer <ref>https://blog.invisiblethings.org/2015/12/23/state_harmful.html</ref> <ref>https://github.com/rootkovska/state_harmful/blob/master/state_harmful.md</ref> would solve the problem of malware persistence, but it still could not protect against the damage (data-exfiltration) caused by successful exploitation.

= References =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
