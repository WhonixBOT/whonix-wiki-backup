{{Header}}
{{#seo:
|description=How to use DisposableVM with Qubes-Whonix
|image=https://www.whonix.org/w/images/5/55/Qubes-logo-icon.png
}}

== Advanced Users Only! ==
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
Use only Qubes R4 with Qubes-Whonix 14 and above for use with Qubes-Whonix DisposableVMs! <ref>
DisposableVMs have significant improvements; see https://github.com/QubesOS/qubes-issues/issues/866#issuecomment-220495485
</ref> 
<br />
Qubes R3.2 with Qubes-Whonix is unsupported! <ref>
A serious [https://phabricator.whonix.org/T695 privacy bug] is unresolved in Qubes R3.2 / R3.2.1 and below. Only Qubes R4 and above is supported by Whonix developers.
</ref>
}}
<br />
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
A [[#Warnings|few usability issues]] in DisposableVMs affect anonymity. If the risks are unknown to the user, then first carefully read this page.
}}

__TOC__

----

== What are DisposableVMs? ==

In the Qubes TemplateVM model, <ref>[https://www.qubes-os.org/getting-started AppVMs (qubes) and TemplateVMs] </ref> any changes made to a [https://github.com/QubesOS/qubes-issues/issues/2489 root filesystem of a TemplateBasedVM] are lost upon reboot. This is advantageous for several reasons: it saves time and disk space, and allows faster, centralized updates for applications that are usually found inside the root filesystem. However, certain directories are designed to persist between reboots in order to store files and settings. These directories are stored in <i>/rw/</i> and include <i>/home/user</i> as well as additional directories defined by "bind directory" settings. <ref>[https://www.qubes-os.org/doc/bind-dirs/ How to make any file in a TemplateBasedVM persistent using bind-dirs]</ref>

Qubes does not have a built-in snapshot capability like VirtualBox that can completely revert all changes back to a previous VM state. <ref>
Apart from [https://www.qubes-os.org/doc/dom0-tools/qvm-revert-template-changes/ qvm-revert-template-changes] which can only revert to the state existing before the last shutdown of the TemplateVM.
</ref> <ref>
[https://forums.whonix.org/t/qubes-vm-snapshots-using-git-svn Qubes VM snapshots using git / SVN].
</ref> In other words, no method exists within AppVMs to reverse changes made to the persistent file system  without implementing some type of custom solution. To ensure that '''all''' filesystem changes are discarded after a session, Qubes offers DisposableVMs. When a DisposableVM is shutdown, the VM is removed from Qubes and all related VM images are deleted from the host filesystem. This method is [[Qubes/Disposable_VM#Warning:_Disposable_VMs_are_not_amnesic|not yet amnesic]] and should not be relied upon for anti-forensics!

While DisposableVMs ensure that files do not persist without user intervention, the downside is the user can no longer decide whether or not the current VM state should be kept or destroyed. Users must choose beforehand to use a standard AppVM or a DisposableVM; this decision cannot be changed after the fact.

{{Qubes persistence}}

===== The Layered DisposableVM System =====

Qubes R uses a two-layered approach to DisposableVMs. At the core of the system is a ''TemplateVM'' upon which a ''DisposableVM-Template'' is based. Every time a new DisposableVM is launched, it is based on the ''DisposableVM-Template'' - hence, two layers. In a standard Qubes-Whonix installation:

* The base TemplateVM is <code>whonix-ws-14</code>. 
* The DisposableVM-Template is called <code>whonix-ws-14-dvm</code>.
* Each new DisposableVM (<code>disp1, disp2, ...</code>) is based on <code>whonix-ws-14-dvm</code>. 

Once a DisposableVM-Template is created, its <i>/home/user/</i> directory can be customized <ref>
https://www.qubes-os.org/doc/dispvm-customization/
</ref> independently of the base TemplateVM. In this special case, the DisposableVM-Template will continue to inherit changes from the base TemplateVM's root filesystem (for example, package updates), but user files in <i>/home/user/</i> will persist independently.

Qubes R4 you are no longer restricted to a single, system-wide ''DisposableVM-Template''. Instead, <i>any</i> TemplateBasedVM can be enabled for use as a template for dispvms, by setting its [https://www.qubes-os.org/doc/dispvm-customization/ <code>template_for_dispvms</code>] property.

Qubes-Whonix comes with whonix-ws-14-dvm that already has this property set.

To start Torbrowser in a DispVM based on whonix-ws-dvm, either:

* Use GUI: <code>Qubes menu > Disposable: whonix-ws-14-dvm > whonix-ws-14-dvm: Tor Browser (AnonDist)</code>

* Or from dom0 Terminal: <code>qvm-run --dispvm=whonix-ws-dvm torbrowser</code>

TODO: Briefly describe customization path in Qubes R4.

===== DisposableVM Traffic is Stream Isolated from Other VMs =====

DisposableVMs work especially well with Whonix-Gateway because each VM is assigned a unique internal IP address. In this way, all traffic from a DisposableVM is [[Stream_Isolation | stream isolated]] from all other traffic arising from VMs running in paralell.

----

== Warnings ==
==== Warning: Use Caution when Spawning DisposableVMs from Other VMs  ====
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
If a DisposableVM is created from within a VM that is not connected to Whonix-Gateway, the new DisposableVM may route its traffic over clearnet. <ref>DisposableVMs are created in one of two ways: 
* <code>Open in DisposableVM</code>. On the command line (domU), run. {{CodeSelect|code=qvm-open-in-dvm}}
* <code>Run in DisposableVM</code>. On the command line (domU), run. {{CodeSelect|code=qvm-run --dispvm}} </ref> This is because DisposableVMs inherit their NetVMs from the calling VM, or the calling VM's <code>dispvm_netvm</code> setting if different. <br /><br /> The <code>dispvm_netvm</code> setting can be configured per VM via: <br />
<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>VM Settings</code> -> <code>Advanced</code> -> <code>NetVM for DisposableVM</code> <ref> On the command line (dom0), run. {{CodeSelect|code=qvm-prefs -s vmname dispvm_netvm sys-whonix}} </ref> <br /><br /> If the calling VM is connected to Whonix-Gateway, this step is not necessary and the DisposableVM's traffic will be routed over Tor.
}}

<ref>[https://github.com/QubesOS/qubes-issues/issues/1954 Whonix default NetVM settings fixes]</ref>

==== Warning: DisposableVMs are not Amnesic ====
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
All changes to a DisposableVM's file system are discarded upon shutdown. However, DisposableVMs are similar to snapshots insofar as they can leave traces of their activity on storage and in memory. <u>These traces may be later recoverable through data forensics.</u> This is further justification for using full disk encryption on the Qubes host and completely shutting down the system when it is not in use. Laptop users may wish to remove batteries to ensure that power to the RAM is indeed disconnected.
}}

<ref>[[Warning#Whonix_is_not_amnesic | Whonix is not amnesic.]]</ref> <ref>[[FAQ#Is_there_a_substitute_for_Whonix.27s_lack_of_an_Amnesic_feature_.2F_Live_CD.2FDVD.3F_Forensics.3F | Is there a substitute for Whonix's lack of an Amnesic feature?]]</ref> 
<ref>[https://groups.google.com/d/topic/qubes-devel/QwL5PjqPs-4/discussion DisposableVMs do not run entirely in RAM.]</ref> 
<ref>[https://github.com/QubesOS/qubes-issues/issues/904 DisposableVMs: support for in-RAM execution only (for anti-forensics) #904]</ref>
<ref>
[https://github.com/QubesOS/qubes-issues/issues/3037 4.0rc1 dirty shutdown causes dispVMs to remain persistent #3037]
</ref>

==== Warning: DisposableVMs may be Linkable to other VMs Connected to the Same Whonix-Gateway ====
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
The Tor Project developer Teor has stated that Tor caches {{Code|DNS, HS descriptors, pre-emptive circuits, etc.}} <ref>https://lists.torproject.org/pipermail/tor-dev/2016-October/011591.html</ref> which may lead to linkability between AppVMs and DisposableVMs sharing the same gateway. The extent to which this is a threat for Whonix users is currently under investigation. <ref>[https://phabricator.whonix.org/T567 Multi GW Documentation.]</ref>
}}

==== Warning: Check the Tor Browser Version ====
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
Keeping Tor Browser updated in a (customized) DisposableVM can be difficult for several reasons <ref>
These references might not apply (to the same degree) to Qubes R4 and above with Qubes-Whonix 14 and above.

* https://forums.whonix.org/t/using-whonix-workstation-as-a-disposablevm-dispvm/2461/21
* https://forums.whonix.org/t/qubes-dispvm-technical-discussion/3232/11
</ref>, but it is necessary.
<br />
To learn about recent Tor Browser versions, follow [https://blog.torproject.org The Tor Project blog] or look at raw data for the latest [https://www.torproject.org/projects/torbrowser/RecommendedTBBVersions Recommended TBB Versions]. Tor Browser's version number can also be checked manually: <code>Tor Browser</code> -> <code>Menu</code> -> <code><u>H</u>elp</code> -> <code>About Tor Browser</code>. See [[Qubes/Disposable_VM#Updating_Tor_Browser|Updating Tor Browser]] for more information.
<br />
When using DisposableVMs, use the [[Tor_Browser#Tor_Browser_Internal_Updater|Tor Browser Internal Updater]] daily to check the browser is up to date.
}}

==== Warning: Avoid Ephemeral Whonix-Gateway ProxyVMs in Qubes R4 ====

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Using disposable Whonix-Gateway ProxyVMs in Qubes R4 makes the user ''less'' anonymous due to the configuration having [[Tor#Always_Non-Persistent_Entry_Guards|non-persistent entry guards]]!
}}


Some Whonix users have the mistaken belief that disposableVMs for both the Whonix-Gateway and Whonix-Workstation in Qubes R4 is the ultimate configuration: increasing their security, without any corresponding privacy downside. This reasoning is incorrect for the following reasons: <ref>[[Qubes/DisposableVM#Warning:_DisposableVMs_are_not_Amnesic|DisposableVMs are not Amnesic]].</ref> <ref>https://github.com/QubesOS/qubes-issues/issues/904</ref> <ref>[[Tor#Entry_Guards|Tor Entry Guards]].</ref>
* DisposableVMs are not amnesic. In practice this means traces of their activity can be left on storage or in memory, making them vulnerable to forensic operations. <ref>This is another reminder of why full disk encryption should always be used on the host.</ref>
* Using a disposableVM for the Whonix-Gateway results in non-persistent entry guards to the Tor network; behavior unlike the default configurations for Whonix, Tor, and the Tor Browser Bundle. Mathematically speaking, end-to-end correlation attacks are ''more'' likely to succeed when a user chooses many random entry and exit points to the Tor network, rather than semi-permanent entry guards which are only rotated every few months. <ref>https://trac.torproject.org/projects/tor/ticket/8240</ref> <ref>The reason is there are both malicious and benign guards in the Tor network. The more often the user "rolls the dice" (changes guards), the greater the chance of striking out.</ref>


The solution to the first problem is only allowing [https://github.com/QubesOS/qubes-issues/issues/904 in-RAM execution of DisposableVMs], but this is not planned for implementation in the short-term. There is no perfect solution to the second problem. That said, there is an actual unstated security-privacy trade-off by running this configuration. Theoretically, an ephemeral Whonix-Gateway ProxyVM is only able to be infected for a single session (via the ''/home'', ''/usr/local'' and ''/rw'' directories), since it is discarded upon shutdown. This provides a counterbalance to the increased threat of malicious guards, as [https://tails.boum.org/blueprint/persistent_Tor_state/ Whonix becomes more "Tails-like"].

----

== Setup ==
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
These instructions are current as of Qubes 3.2. Updated documentation will be required for Qubes 4.0 since it is anticipated it will bring major changes to the DisposableVM implementation. <ref>[https://github.com/QubesOS/qubes-issues/issues/1335 Home folder of template not inherited by DisposableVM #1335]</ref>
}}
<br />
'''Note:''' All examples below reference GUI actions whenever possible. The equivalent command line interface commands are listed in the footnotes.

==== Creating a New DisposableVM-Template Based on Whonix-Workstation ====
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Advanced users:''' If you wish to install the alpha version of Tor Browser, click on Expand on the right.
<div class="mw-collapsible-content">
'''Option #1: Use a non-customized DisposableVM-Template''' 

This template will use a stock image based on whonix-ws and will not preserve any changes that are made to it.

Step 1: Disable <code>tb-updater</code>'s functionality which automatically updates during apt-get inside the Qubes TemplateVM. <ref>[[Tor_Browser#tb-updater_in_Qubes_TemplateVM]]</ref> 

This prevents the preferred Tor Browser version being overwritten by the stable version.

In whonix-ws terminal, run.

{{CodeSelect|code=
echo "tb_install_follow=false" {{!}} sudo tee -a /etc/torbrowser.d/50_user.conf
}}

Step 2: Install the preferred version of Tor Browser to TemplateVM by launching Tor Browser Downloader by Whonix and following the instructions. <ref name=hide_gtk_warnings /> <ref name=noaskstart /> <ref name=cli_noaskstart />

In whonix-ws terminal, run.

{{CodeSelect|code=
noaskstart=true update-torbrowser --input gui >/dev/null 2>&1
}}

Step 3: Create a DisposableVM-Template based on the whonix-ws TemplateVM.

In dom0 terminal, run.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

When a new version of Tor Browser is released, repeat the previous two steps to update the TemplateVM and  DisposableVM-Template.

'''Option #2: Use a Customized DisposableVM-Template''' 

Note: This template can be further customized by following the instructions [[#Customizing a DisposableVM-Template|below]].

Step 1: Delete the existing DisposableVM-Template.

In dom0 terminal, run. 

{{CodeSelect|code=
qvm-remove <oldDisposableVM-Template>
}}

Step 2: Create a new DisposableVM-Template based on the whonix-ws TemplateVM.

In dom0 terminal, run.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

Step 3: Configure Whonix-Gateway as the NetVM for the DisposableVM-Template.

In dom0 terminal, run.

{{CodeSelect|code=
qvm-prefs -s whonix-ws-dvm netvm sys-whonix
}}

Step 4: Launch a DisposableVM-Template terminal.

In dom0 terminal, run. 

{{CodeSelect|code=
qvm-run -a whonix-ws-dvm konsole
}}

Step 5: Enable a customized flag in the DisposableVM-Template.

In the DisposableVM-Template terminal, run.

{{CodeSelect|code=
touch /home/user/.qubes-dispvm-customized
}}

Step 6: Use update-torbrowser to download and install the preferred TorBrowserBundle.

In the DisposableVM-Template terminal, run.

{{CodeSelect|code=
noaskstart=true update-torbrowser --input gui >/dev/null 2>&1
}}

Step 7: Shutdown the DisposableVM-Template.

In the DisposableVM-Template terminal, run.

{{CodeSelect|code=
sudo poweroff
}}

Step 8: Regenerate the DisposableVM-Template.

In dom0 terminal, run.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

Do not forget to [[Qubes/Disposable_VM#Warning:_Check_your_Tor_Browser_Version|check your Tor Browser version]]!

----
</div>
</div>

'''Create and Configure a DisposableVM-Template'''

Step 1: Open a dom0 terminal.

<code>Qubes App Launcher (blue/grey "Q")</code> -> <code>System Tools</code> -> <code>Konsole or Xfce Terminal</code>

Step 2: Create a DisposableVM-Template.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

Step 3: Enable DisposableVM-Template presentation in the Qubes VM Manager (QVMM).

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>(menu) View</code> -> <code>enable 'Show/Hide internal VMs'</code>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>enable 'Show/Hide inactive VMs'</code>

Step 4: Configure Whonix-Gateway as the NetVM. <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-prefs -s whonix-ws-dvm netvm sys-whonix}}</ref>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>VM Settings</code> -> <code>NetVM</code> -> <code>sys-whonix</code>

If intending to spawn DisposableVMs from other VMs, configure the NetVM for the DisposableVM setting, see [[Qubes/Disposable_VM#Warning:_Use_caution_when_spawning_DisposableVMs_from_other_VMs|Warning: Use caution when spawning DisposableVMs from other VMs]].

The DisposableVM is now ready for use and is configured with all of the applications present in the Whonix-Workstation template, including Tor Browser.

Also follow the next step [[#Edit Qubes DisposableVM start menu]] to make sure Firefox is not accidentally started, since this is discouraged!

===== Edit Qubes' DisposableVM Start Menu  =====
Complete the following to work around [[#Warning: Do not use Firefox from Qubes DisposableVM default start menu]].

In Qubes dom0.

<code>alt + F3</code> -> <code>on the left side, click 'DisposableVM'</code> -> <code>right-click on 'Firefox'</code> -> <code>edit</code> -> 

* Name: <code>DisposableVM: Tor Browser</code>
* Command: <code>sh -c 'echo torbrowser | /usr/lib/qubes/qfile-daemon-dvm qubes.VMShell dom0 DEFAULT red'</code> 
<br />
-> <code>click 'Save'</code>

While editing entries, it is also possible to edit the xterm entry and change it to konsole. This is not important for security, but may be a personal preference.

==== Deleting a DisposableVM-Template ====
Deleting a DisposableVM-Template is not usually necessary, since only one DisposableVM-Template is allowed (before Qubes 4.0). Creating a new DisposableVM-Template will overwrite the existing one. However, if a template has been customized, the existing one may need to be deleted to start with a fresh unmodified DisposableVM-Template.

A DisposableVM-Template can be deleted in the same manner as other VMs.

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Remove VM'</code>
<ref>On the command line (dom0), run. {{CodeSelect|code=qvm-remove <vmname>}}</ref>

==== Customizing a DisposableVM-Template ====
Extra caution must be exercised when customizing a DisposableVM-Template. <ref>Qubes documentation: [https://www.qubes-os.org/doc/dispvm-customization DisposableVM Customization]</ref> From a privacy perspective, one would ideally want to have a DisposableVM-Template that is indistinguishable from any other Whonix-Workstation. If changes are made to the DisposableVM-Template, these may link all of the DisposableVMs via a uniquely generated fingerprint should they be compromised independently. Risky changes include, but are not limited to: the installation of obscure programs, uncommon configuration settings, or the placement of unique data files. Always remember that the DisposableVM will likely be exposed to the greatest Internet threats.

Tor Browser is specifically designed to prevent websites from fingerprinting the user or identifying them based on the browser configuration. It should generally be used in its stock configuration in order to make the user's fingerprint less unique, due to commonality with the larger pool of Tor users. Each individual browser change can contribute to significant worsening of the fingerprint, so it is advisable to only make alterations if the expected impact is known.

Some changes, like disabling JavaScript by default, may make sense to users in terms of a usability-security trade-off. Additionally, minor cosmetic changes like the UI layout, or the placement of buttons, may be considered harmless to privacy while enhancing personal usability.

Please remember that only files in <i>/home/user/</i> can be customized in a DisposableVM-Template. <ref>[https://github.com/QubesOS/qubes-issues/issues/1335 Home folder of template not inherited by DisposableVM #1335]</ref>

As stated earlier, the following steps to customize the DisposableVM are completely optional.

'''1. Configure Qubes to Preserve Customized Changes'''

Open a terminal in the DisposableVM-Template. <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-run -a whonix-ws-dvm konsole}}</ref>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Run command in VM'</code> -> <code>type 'konsole'</code>

Instruct Qubes to preserve changes.

{{CodeSelect|code=
touch /home/user/.qubes-dispvm-customized
}}

'''2. Launch the Application to Customize''' <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-run -a whonix-ws-dvm <name of application>}}</ref>

<code> dom0 </code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Run command in VM'</code>

Enter the name of the application. For example. <ref>Other common applications launched from the command line are konsole, dolphin, okular, kgpg and so on.</ref>

{{CodeSelect|code=
torbrowser
}}

{{CodeSelect|code=
libreoffice
}}

'''3. Finalize the DisposableVM-Template'''

Once satisfactory changes have been made, shutdown the DisposableVM-Template. <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-shutdown <vmname>}}</ref>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Shutdown VM'</code>

'''4. Regenerate the DisposableVM-Template'''

Open a dom0 terminal.

<code>Qubes App Launcher (blue/grey "Q")</code> -> <code>System Tools</code> -> <code>Konsole or Xfce Terminal</code>

Regenerate the template.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

All of the changes to <i>/home/user/</i> in the DisposableVM-Template should now persist whenever the template is re-created.

==== Updating a DisposableVM-Template ====
Changes to the underlying TemplateVM (whonix-ws) are detected automatically and the DisposableVM-Template is updated without user intervention. That means package updates that are applied to whonix-ws are also applied to the whonix-ws-dvm.

===== Updating Tor Browser =====
Tor Browser presents a special situation because it is installed in a user's home directory. As a result, the TemplateVM (whonix-ws) never updates existing Tor Browser installations.

'''Non-Customized DisposableVM-Templates Users''' 

To obtain the latest Tor Browser, the simplest method is to use Whonix's built-in Tor Browser downloader functionality. Simply update using [[Tor_Browser#Tor_Browser_Downloader_by_Whonix|Tor Browser Downloader by Whonix (tb-updater)]] in whonix-ws when performing your usual maintenance [https://www.qubes-os.org/doc/whonix/update/ upgrading]. 

Update and upgrade.

{{CodeSelect|code=
sudo apt-get update && sudo apt-get dist-upgrade
}}

Then, create a new DisposableVM to overwrite the existing one.

Open a dom0 terminal.

<code> Qubes App Launcher (blue/grey "Q")</code> -> <code>System Tools</code> -> <code>Konsole or Xfce Terminal</code>

Create a new DisposableVM-Template using the updated whonix-ws TemplateVM.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

'''Customized DisposableVM-Template Users'''

Users have two choices: 

# [[Tor_Browser#Tor_Browser_Downloader_by_Whonix|Tor Browser Downloader by Whonix (tb-updater)]] (update-torbrowser)
# [[Tor_Browser#Tor_Browser_Internal_Updater|Tor Browser's internal updater]].
<br />
'''Option #1: Use {{Code2|update-torbrowser}} to download a new copy of Tor Browser'''

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Run command in VM'</code> -> <code>type 'konsole'</code> <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-run -a whonix-ws-dvm konsole}}</ref>

Launch Tor Browser Downloader by Whonix and follow the instructions. <ref name=hide_gtk_warnings>
Using <i>>/dev/null 2>&1</i> to hide some useless and confusing GTK warnings.
</ref> <ref name=noaskstart>
Using <i>noaskstart="true"</i> to prevent [[Tor_Browser#Running_Tor_Browser_in_Qubes_TemplateVM]].
</ref> <ref name=cli_noaskstart>
Or for command line interface version, simply use.
<br />
<i>noaskstart="true" update-torbrowser</i>
</ref>

{{CodeSelect|code=
noaskstart=true update-torbrowser --input gui >/dev/null 2>&1
}}

Shutdown the DisposableVM-Template. <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-shutdown whonix-ws-dvm}}
or<br />
DisposableVM-Template command line (domU), run. {{CodeSelect|code=sudo poweroff}}
</ref>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Shutdown VM'</code>

Regenerate the DisposableVM-Template.

Open a dom0 terminal.

<code>Qubes App Launcher (blue/grey "Q")</code> -> <code>System Tools</code> -> <code>Konsole or Xfce Terminal</code>

Then run.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

'''Option #2: Use Tor Browser's internal updater and download new updates only'''

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Run command in VM'</code> -> <code>type 'torbrowser'</code> <ref> On the command line (dom0), run. {{CodeSelect|code=qvm-run -a whonix-ws-dvm torbrowser}}</ref>

Use Tor Browser's Internal Updater by clicking TorButton and selecting <code>Check for Tor Browser Update</code>. Close and restart Tor Browser.

Shutdown the DisposableVM-Template. <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-shutdown whonix-ws-dvm}}</ref>

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Shutdown VM'</code>

Regenerate the DisposableVM-Template.

Open a dom0 terminal.

<code>Qubes App Launcher (blue/grey "Q")</code> -> <code>System Tools</code> -> <code>Konsole or Xfce Terminal</code>

Regenerate the template.

{{CodeSelect|code=
qvm-create-default-dvm whonix-ws
}}

----

== Usage ==
DisposableVMs are well-suited for risky and largely independent activities, like web browsing or opening untrusted files. In contrast, AppVMs might be better suited for activities necessitating file persistence, like email clients with local email storage. Qubes' VM integration tools, like secure file copy <ref>Qubes documentation: [https://www.qubes-os.org/doc/copying-files/ Copying and Moving Files Between Domains]</ref> and secure clipboard, <ref>Qubes documentation: [https://www.qubes-os.org/doc/copy-paste Copying and Pasting Text Between Domains]</ref> mean that clean, trusted files and text can be easily and safely transferred to trusted VMs should it be necessary.

==== User Tips ====
* Remember that a DisposableVM is shutdown when the '''first''' user-launched process is terminated. If a new DisposableVM is created by launching Tor Browser and text is then composed in an editor, all of the work will be lost upon closing Tor Browser. To avoid this, it is prudent to launch a DisposableVM via a terminal and launch additional applications from the command line. In this scenario, the DisposableVM is destroyed by simply exiting the terminal.

* In Qubes, it is inadvisable to store valuable information in an untrusted VM. This view is supported by the fact that Tor Browser doesn't remember bookmarks or credentials. A best practice for storing sensitive information is to use an offline vault VM and applications like password managers. @rustybird has announced a new "split-tor-browser" <ref>[https://github.com/rustybird/qubes-split-browser Github: Split Browser]</ref> package that can retrieve urls and credentials from a trusted VM for use in a DisposableVM's web browser. This package has not yet been tested or endorsed by Whonix, but it looks promising.

* Sometimes a non-networked DisposableVM is useful for opening untrusted files that might otherwise try to use the network maliciously. Like all Qubes VMs, the NetVM for a DisposableVM can be changed dynamically while the VM is running. Simply set the NetVM to "none" using the Qubes VM Manager or the command line interface. <ref>On the command line (dom0), run. <pre>qvm-prefs -s disp<1 | 2 | ...> netvm none</pre></ref> '''Warning:''' Use utmost caution if deciding to re-establish network connectivity. There is currently no mechanism in place to prevent connections to a clearnet NetVM.

* DisposableVMs can be created directly by launching programs from the application menu using shortcuts ([[#Adding_shortcuts_to_application_menus.5B28.5D |see below for instructions]]). DisposableVMs can also be spawned by using context-menus or the command line interface in other AppVMs. See [https://www.qubes-os.org/doc/dispvm/ Qubes DisposableVM documentation] for different methods. As a reminder, be sure to heed the [[#Warning:_Use_caution_when_spawning_DisposableVMs_from_other_VMs_.5B3.5D | relevant warning]] in the Warnings section.

----

==== Adding a Desktop Shortcut ====
===== Qubes 3.2 / XFCE4 =====
To create a desktop shortcut that starts Tor Browser inside a DisposableVM, perform the following steps.

<code>Right click anywhere on the free space of the desktop</code> -> <code>Create Launcher</code> ->

* Name: <code>DispTB</code>
* Command: <code>sh -c 'echo torbrowser | /usr/lib/qubes/qfile-daemon-dvm qubes.VMShell dom0 DEFAULT red'</code>
<br />
-> <code>Click Create</code>

Double-click the newly created desktop shortcut to start it. At first start, it is safe to click "Mark Executable".

In order to see the desktop shortcuts, users may prefer to use the XFCE workspace switcher to navigate to another empty virtual desktop so existing windows do not need to be minimized.

----

==== Start Tor Browser in a DisposableVM ====
Tor Browser can be started with a desktop shortcut like in the above example, or via another method. After launch, do not forget to [[Qubes/Disposable_VM#Warning:_Check_your_Tor_Browser_Version|check the Tor Browser version]]!

----
==== Adding Shortcuts to Application Menus ====
<ref>Qubes feature request WIP: [https://github.com/QubesOS/qubes-issues/issues/1339 Have DisposableVMs inherit launcher shortcuts like other TemplateBasedVMs #1339]</ref>
===== Qubes 3.2 / XFCE4 (Untested) =====

Make a <i>.desktop</i> file for every DisposableVM shortcut that will be added to the menu.<ref>Official documentation: [https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html Desktop entry specifications]</ref> These .desktop files must be placed in <i>~/.local/share/applications/</i>.

Open a terminal in the DisposableVM-Template.

<code>dom0</code> -> <code>Qubes VM Manager</code> -> <code>right-click on 'whonix-ws-dvm'</code> -> <code>click 'Run command in VM'</code> -> <code>type 'konsole'</code> <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-run -a whonix-ws-dvm konsole}}</ref>

Create a local applications directory.

{{CodeSelect|code=
mkdir -p ~/.local/share/applications/
}}

Use a text editor to create and open each .desktop file and logically name each one.

{{CodeSelect|code=
kwrite ~/.local/share/applications/dvm-torbrowser.desktop
}}

As appropriate, add the following entries and substitute fields to each .desktop file. In the Exec field, substitute <i>torbrowser</i> with the command used to launch each relevant application matching the shortcut. For example: <i>konsole, kwrite, libreoffice, kgpg, okular, dolphin</i> and so on.

<!-- EDITORS NOTE: '{{!}}' is a magic word for '|'.-->
{{CodeSelect|code=
[Desktop Entry]
Name=Tor Browser
Comment=Launch Tor Browser in DisposableVM
Type=Application
Terminal=false
Exec=sh -c 'echo torbrowser {{!}} /usr/lib/qubes/qfile-daemon-dvm qubes.VMShell dom0 DEFAULT red'
}}

Icon= & Category= are also useful fields. Feel free to research the .desktop specification using the footnote above.

Once the .desktop files have been created, they need to be added to the Applications menu. Use a text editor to edit the following file.

{{CodeSelect|code=
kwrite ~/.config/menus/xfce-applications.menu
}}

Find the menu entry associated with the DisposableVM-Template. (Help!)

{{CodeSelect|code=
<Menu>
    <Name>DisposableVMTemplate</Name>
}}

In the <Include> subsection, add the appropriately named .desktop file.

{{CodeSelect|code=
<Filename>dvm-torbrowser.desktop</Filename>
}}

===== Qubes 3.2 / XFCE4: MenuLibre (Untested) =====

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
This is recommended for testers only! Users should know how to fix the application menu in case it breaks. If interested, click on Expand on the right.
<div class="mw-collapsible-content">
Warning: Testers have previously experienced [https://groups.google.com/forum/m/#!msg/qubes-users/rxI8lNOD7p0/p9Va5Vg9BwAJ removal of the Qubes System Tools start menu entry] when applying these changes! For greater safety, consider using git to manage the home folder so any MenuLibre changes can be reverted.

In dom0, run.

{{CodeSelect|code=
sudo qubes-dom0-update menulibre
}}

The use the menu editor.

<code>Qubes Start Menu</code> -> <code>System Tools</code> -> <code>Menu Editor</code>
</div>
</div>

==== Command Line Interface ====
It is simple to start applications like konsole or Tor Browser in a DisposableVM.

Open a dom0 terminal.

{{CodeSelect|code=
echo konsole {{!}} /usr/lib/qubes/qfile-daemon-dvm qubes.VMShell dom0 DEFAULT red
}}

{{CodeSelect|code=
echo torbrowser {{!}} /usr/lib/qubes/qfile-daemon-dvm qubes.VMShell dom0 DEFAULT red
}}

----

== Qubes R4 ==
Mostly undocumented for now.

* TODO document first startup vs subsequent startup - https://forums.whonix.org/t/whonix-14-starting-a-whonix-14-dispvm-actually-starts-the-templatebasedvm-instead/5579
* TODO document how to start the DVM, how to shut it down, how to start the DVM again (needs to be started from terminal emulator for the second startup, looks like)

<code>whonix-ws-14-dvm</code> is the DVM Template. <ref>
https://www.qubes-os.org/doc/glossary/#dvm-template
</ref>

Do NOT include <code>-dvm</code> into the names of DispVMs! That would result in Tor Browser not being inherited from whonix-ws-14 TemplateVM.

{{CodeSelect|code=
qvm-create -C DispMV -l red --template whonix-ws-14-dvm anon-whonix-disp
}}

{{CodeSelect|code=
qvm-run anon-whonix-disp konsole
}}

== Footnotes ==
{{reflist|close=1}}

{{Footer}}
[[Category:Documentation]]
