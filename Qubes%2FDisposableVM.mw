{{Title|title=Qubes DisposableVMs}}
{{Header}}
{{#seo:
|description=How to use DisposableVMs in [[{{q_project_name_short}}|{{q_project_name}}]].
|image=https://www.whonix.org/w/images/5/55/Qubes-logo-icon.png
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
These DisposableVM (DispVM) instructions <u>only</u> apply to [[{{q_project_name_short}}|{{q_project_name}}]] {{VersionShort}} in Qubes R4. <ref>
DispVMs have significant improvements; see https://github.com/QubesOS/qubes-issues/issues/866#issuecomment-220495485
</ref> <ref>
Qubes R3.2 is unsupported by {{project name}} developers and reached [https://www.qubes-os.org/news/2019/03/28/qubes-3-2-has-reached-eol/ EOL] on 28 March, 2019.
</ref> <ref>
A serious [https://phabricator.whonix.org/T695 privacy bug] is unresolved in Qubes R3.2 / R3.2.1 and below.
</ref>
-----
A [[#Warnings|few usability issues]] in DispVMs affect anonymity. If the risks are unknown to the user, then first carefully read this page.
}}

__TOC__

----

= What are DisposableVMs? =

In the Qubes TemplateVM model, <ref>[https://www.qubes-os.org/getting-started AppVMs (qubes) and TemplateVMs].</ref> any changes made to a [https://github.com/QubesOS/qubes-issues/issues/2489 root filesystem of a TemplateBasedVM] are lost upon reboot. This is advantageous for several reasons: it saves time and disk space, and allows faster, centralized updates for applications that are usually found inside the root filesystem. However, certain directories are designed to persist between reboots in order to store files and settings. These directories are stored in <code>/rw</code>, include <code>/home/user</code> and <code>/usr/local</code> as well as additional directories defined by "bind directory" settings. <ref>[https://www.qubes-os.org/doc/bind-dirs/ How to make any file in a TemplateBasedVM persistent using bind-dirs].</ref>

Qubes does not have a built-in snapshot capability like VirtualBox that can completely revert all changes back to a previous VM state. <ref>
Apart from [https://www.qubes-os.org/doc/dom0-tools/qvm-revert-template-changes/ qvm-revert-template-changes] which can only revert to the state existing before the last shutdown of the TemplateVM.
</ref> <ref>
[https://forums.whonix.org/t/qubes-vm-snapshots-using-git-svn Qubes VM snapshots using git / SVN].
</ref> In other words, no method exists within AppVMs to reverse changes made to the persistent file system  without implementing some type of custom solution. To ensure that ''all'' filesystem changes are discarded after a session, Qubes offers DispVMs. When a DispVM is shutdown, the VM is removed from Qubes and all related VM images are deleted from the host filesystem. This method is [[#Warnings|not yet amnesic]] and should not be relied upon for anti-forensics!

While DispVMs ensure that files do not persist without user intervention, the downside is the user can no longer decide whether or not the current VM state should be kept or destroyed; users must choose beforehand to use a standard AppVM or a DispVM.

{{Qubes persistence}}

== The Layered DisposableVM System ==
Qubes uses a two-layered approach to DispVMs. At the core of the system is a ''TemplateVM'' upon which a ''[https://www.qubes-os.org/doc/glossary/#disposablevm-template DVM Template]'' is based. Every time a new DispVM is launched it is based on the ''DVM Template'' - hence, two layers. In a standard [[{{q_project_name_short}}|{{q_project_name}}]] installation:

* The {{workstation_product_name}} default TemplateVM is <code>{{whonix-ws}}</code>. 
* The {{workstation_product_name}} default DVM Template is called <code>{{whonix-ws-dvm}}</code>.
* Each {{workstation_product_name}} default DispVM (<code>disp1, disp2, ...</code>) is based on <code>{{whonix-ws-dvm}}</code>. 

Once a DVM Template is created, its <i>/home/user/</i> directory can be customized <ref>https://www.qubes-os.org/doc/dispvm-customization/</ref> independently of the TemplateVM. In this special case, the DVM Template will continue to inherit changes from the base TemplateVM's root filesystem (like package updates), but user files in <i>/home/user/</i> will persist independently.

It is possible to have multiple DVM Templates and DispVMs at the same time. <i>Any</i> TemplateBasedVM can be enabled for use as a template for DispVMs, by setting its [https://www.qubes-os.org/doc/disposablevm-customization/ <code>template_for_dispvms</code>] property.

In Qubes R4, [[{{q_project_name_short}}|{{q_project_name}}]] {{VersionShort}}'s default DVM Template (<code>{{whonix-ws-dvm}}</code>) can be easily created [[#Setup|using salt]] and will have this property set.

== DisposableVM Traffic Stream Isolation ==

DispVMs work especially well with {{gateway_product_name}}. <ref>Because each VM is assigned a unique, internal IP address.</ref> All DispVM traffic is [[Stream_Isolation|stream-isolated]] from the traffic of other VMs running in parallel.

= Warnings =

'''Table:''' ''DispVM Warnings''

{| class="wikitable"
|-
! scope="col"| '''Category'''
! scope="col"| '''Warning'''
|-
! scope="row"| Amnesic Capability
| 
* All changes to a DispVM's file system are discarded upon shutdown. However, DispVMs are similar to snapshots insofar as they can leave traces of their activity on storage and in memory. <u>These traces may be later recoverable through data forensics.</u> <br />
* This is further justification for using [[Full_Disk_Encryption|full disk encryption]] on the Qubes host and completely shutting down the system when it is not in use. Laptop users may wish to remove batteries to ensure that power to the RAM is definitely disconnected. <ref>[[Warning#{{project_name}}_is_not_Amnesic|{{project_name}} is not amnesic]].</ref> <ref>[[FAQ#Is_there_a_{{project_name}}_Amnesic_Feature_.2F_Live_CD_.2F_Live_DVD.3F_What_about_Forensics.3F|Is there a substitute for {{project name}} lack of an Amnesic feature?]]</ref> <ref>[https://groups.google.com/d/topic/qubes-devel/QwL5PjqPs-4/discussion DisposableVMs do not run entirely in RAM].</ref> <ref>[https://github.com/QubesOS/qubes-issues/issues/904 DisposableVMs: support for in-RAM execution only (for anti-forensics) #904]</ref> <ref>
[https://github.com/QubesOS/qubes-issues/issues/3037 4.0rc1 dirty shutdown causes dispVMs to remain persistent #3037]
</ref>
|-
! scope="row"| Ephemeral {{gateway_product_name}} ProxyVMs
| Using DispVMs for both the {{project name}} Gateway and Workstation in Qubes R4 <u>does not</u> increase security without any corresponding privacy downside, for the following reasons: <ref>[[#Warnings|DisposableVMs are not Amnesic]].</ref> <ref>https://github.com/QubesOS/qubes-issues/issues/904</ref> <ref>[[Tor_Entry_Guards|Tor Entry Guards]].</ref> <br />
* DispVMs are not amnesic. In practice this means traces of their activity can be left on storage or in memory, making them vulnerable to forensic operations. <ref>This is another reminder of why full disk encryption should always be used on the host.</ref> <br />
* Using a DispVM for the {{gateway_product_name}} results in [[Tor_Entry_Guards#Configure_Non-Persistent_Entry_Guards|non-persistent entry guards]] to the Tor network; behavior unlike the default configurations for {{project_name}}, Tor, and the Tor Browser Bundle. Mathematically speaking, end-to-end correlation attacks are ''more'' likely to succeed when a user chooses many random entry and exit points in the Tor network, rather than semi-permanent entry guards which are only rotated every few months. <ref>https://trac.torproject.org/projects/tor/ticket/8240</ref> <ref>The reason is there are both malicious and benign guards in the Tor network. The more often the user "rolls the dice" (changes guards), the greater the chance of striking out.</ref> <br />
* See additional footnote. <ref>The solution to the first problem is only allowing [https://github.com/QubesOS/qubes-issues/issues/904 in-RAM execution of DisposableVMs], but this is not planned for implementation in the short-term. There is no perfect solution to the second problem. That said, there is an actual unstated security-privacy trade-off by running this configuration. Theoretically, an ephemeral {{gateway_product_name}} ProxyVM is only able to be infected for a single session (via the ''/home'', ''/usr/local'' and ''/rw'' directories), since it is discarded upon shutdown. This provides a counterbalance to the increased threat of malicious guards, as [https://tails.boum.org/blueprint/persistent_Tor_state/ {{project name}} becomes more "Tails-like"].</ref>
|-
! scope="row"| Named DisposableVMs: Manual Shutdown
| Unlike DispVMs spawned from the {{project name}} default DVM Template,<ref>See [[#User_Tips|DispVM Shutdown]] for more on this.</ref> named DispVMs do <u>not</u> automatically shutdown when the first user process is terminated. If a fresh Named DispVM is needed, users must first shutdown the named DispVM and start a new DispVM instance. <ref>This is because named DispVMs are created using a similar method to that which is used to create TemplateBasedAppVMs. This means that named DispVMs -- in <u>some</u> respects -- exhibit behavior similar to that of a TemplateBasedAppVM. For example, behavior such as persistent VM settings across restarts; this includes, but is not limited to settings like --netvm, --autostart and --label to name a few. Before starting a new named DispVM instance, first verify in Qube Manager that the VM is fully shutdown.</ref> Failure to do so could lead to session data from previous activities persisting until the DispVM is properly shutdown.
|-
! scope="row"| Spawning DisposableVMs
| 
* If a DispVM is spawned from within a VM that is not connected to {{gateway_product_name}}, the new DispVM may route its traffic over clearnet. <ref>DispVMs are created in one of two ways: 
<code>Open in DisposableVM</code>. On the command line (domU), run.
{{CodeSelect|code=
qvm-open-in-dvm
}}
</pre><code>Edit/View in DisposableVM</Code>. From the GUI context-menu (domU). 
<code>File</code> &rarr; <code>Actions</code> &rarr; <code>Edit/View in DisposableVM</code></pre>  </ref> <br />
* The reason is because DispVMs inherit their NetVMs from the calling VM, or the calling VM's <code>dispvm_netvm</code> setting (if different). The <code>dispvm_netvm</code> setting can be configured per VM via: <code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>VM Settings</code> &rarr; <code>Advanced</code> &rarr; <code>NetVM for DisposableVM</code> <ref>On the command line (dom0), run. {{CodeSelect|code=qvm-prefs -s vmname dispvm_netvm sys-whonix}} </ref> <br />
* If the calling VM is connected to {{gateway_product_name}}, this step is not necessary and the DispVM's traffic will be routed over Tor. See: [https://github.com/QubesOS/qubes-issues/issues/1954 {{project name}} default NetVM settings fixes].
|-
! scope="row"| Tor Browser in a DVM Template
| Do not start Tor Browser in a DVM Template! For reasons why, see: [[Tor_Browser/Advanced_Users#Running_Tor_Browser_in_Qubes_TemplateVM|Running Tor Browser in Qubes TemplateVM]]. Only start Tor Browser in TemplateBased AppVMs or DispVMs, see: [[#Start_Tor_Browser_in_a_DisposableVM|Start Tor Browser in a DisposableVM]].
|-
! scope="row"| Tor Browser Updater in a DVM Template
| Do not start Tor Browser Updater in a DVM Template! For reasons why, see: [[Tor_Browser/Advanced_Users#tb-updater_in_Qubes_DVM_Template|tb-updater in Qubes DVM Template]]. Instead, run [[#Keep Tor Browser Up-to-date|Tor Browser Downloader]] by {{project name}} developers in {{workstation_product_name}} TemplateVM (<code>{{whonix-ws}}</code>).
|-
! scope="row"| Tor Browser Version
| 
* When using DispVMs, use the [[Tor_Browser#Tor_Browser_Internal_Updater|Tor Browser Internal Updater]] daily to check the browser is up-to-date! <br />
* To learn about recent Tor Browser versions, follow [https://blog.torproject.org The Tor Project blog] or look at raw data for the latest [https://www.torproject.org/projects/torbrowser/RecommendedTBBVersions Recommended TBB Versions]. Tor Browser's version number can also be checked manually: <code>Tor Browser</code> &rarr; <code>Menu</code> &rarr; <code><u>H</u>elp</code> &rarr; <code>About Tor Browser</code>. See [[#Keep Tor Browser Up-to-date|Keep Tor Browser Up-to-date]].
|-
! scope="row"| Verify DisposableVM Status
|
* Use caution when spawning a DispVM for the first time when it is based on a freshly created DVM Template. This [https://github.com/QubesOS/qubes-issues/issues/3574 Qubes bug] can lead to the DVM Template starting instead of the DispVM. <ref>https://forums.whonix.org/t/whonix-14-starting-a-whonix-14-dispvm-actually-starts-the-templatebasedvm-instead/5579</ref> <ref>After creation of a new DVM Template, all VMs spawned from the DVM Template should be DispVMs by design. This includes the first start and all subsequent starts thereafter. While this is expected behavior, it is safest to confirm the DispVM was correctly spawned on each occasion it is used.</ref> There could be serious consequences if an application like Tor Browser was started in a DVM Template and used extensively for web browsing. Compromise of the DVM Template would mean all DispVMs spawned from it would be similarly compromised; see [[Tor_Browser/Advanced_Users#Running_Tor_Browser_in_Qubes_TemplateVM|Running Tor Browser in Qubes TemplateVM]]. <br />
* To check the freshly started VM is a DispVM, verify it is named <i>[disp xxxx]</i> where <i>xxxx</i> is the number assigned to that DispVM. If the DVM Template was started instead, then it should be shut down immediately. If the DVM Template is ever inadvertently used for a dangerous activity like web browsing, then delete it and create a new one.
|-
! scope="row"| {{gateway_product_name}} Linkability
| The Tor Project developer Teor has stated that [[Tor]] caches {{Code|DNS, HS descriptors, pre-emptive circuits, etc.}} <ref>https://lists.torproject.org/pipermail/tor-dev/2016-October/011591.html</ref> which may lead to linkage between AppVMs and DispVMs sharing the same {{gateway_product_name}}. The extent to which this is a threat for {{project name}} users has now been documented; see [[Multiple_{{workstation_product_name_short}}|Multiple {{workstation_product_name}}]].
|}

= Setup =
<u>Note:</u> Examples below reference GUI steps whenever possible, but Qube Manager configuration options in R4 are limited in comparison to earlier releases. <ref>For instance, DispVM networking can no longer be set from Qube Manager.</ref> Where relevant, additional command line commands are listed in the footnotes.

== Create a {{project name}} Default DVM Template based on {{workstation_product_name}} ==

# [[Qubes/Update|Update]] [[{{q_project_name_short}}|{{q_project_name}}]].
# Open a dom0 terminal: <code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>System Tools</code> &rarr; <code>Xfce Terminal</code>
# Create <code>{{whonix-ws-dvm}}</code> DVM Template.

{{CodeSelect|code=
sudo qubesctl state.sls qvm.whonix-ws-dvm
}}

[[{{q_project_name_short}}|{{q_project_name}}]] DispVMs are now ready for use.

== Create a Named {{project name}} DisposableVM based on {{workstation_product_name}} ==

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = Nearly all users can skip this step. A specific use case for DispVM naming conventions has not (yet) been identified. 
}}

Do ''not'' include <code>-dvm</code> when naming DispVMs! Tor Browser will not be inherited from {{workstation_product_name}} TemplateVM (<code>{{whonix-ws}}</code>) if this advice is ignored.

Before creating named DisposableVMs, familiarize yourself with their behavior and read all relevant [[Qubes/DisposableVM#Warnings|warnings]]. Failure to do so could lead to unwanted behavior which occurs without the user's knowledge. 
{{Box|text=
'''1.''' Create a DispVM called <code>anon-whonix-disp</code> based on the <code>{{whonix-ws-dvm}}</code> Template.

In dom0 run.

{{CodeSelect|code=
qvm-create -C DispVM -l red --template {{whonix-ws-dvm}} anon-whonix-disp
}}

'''2.''' Launch Xfce Terminal in the DispVM.

{{CodeSelect|code=
qvm-run -a anon-whonix-disp xfce4-terminal
}}
}}
TODO - Investigate use cases for this procedure:

* A named DisposableVM might be useful for a larger root/private image.
* It might also be useful for activities such as building TemplateVMs in a DispVM.

== Customization ==

=== DVM Templates ===

Extra caution must be exercised when customizing a DVM Template. <ref>Qubes documentation: [https://www.qubes-os.org/doc/disposablevm-customization/ DisposableVM Customization].</ref> From a privacy perspective, it is ideal to have a DVM Template that is indistinguishable from any other {{workstation_product_name}}. If changes are made to the DVM Template, these may link all of the DispVMs via a uniquely generated fingerprint should they be compromised independently. Risky changes include, but are not limited to:

* Installation of obscure programs;
* Uncommon configuration settings; or 
* The placement of unique data files. 

Always keep in mind the DispVM will likely be exposed to the greatest Internet threats.

Tor Browser is specifically designed to prevent website fingerprinting or identification based on the user's browser [[Fingerprint|fingerprint]]. It is safest to run Tor Browser in its stock configuration so the fingerprint is [[Data_Collection_Techniques#Fingerprinting_and_Anonymity|less unique]], due to commonality with the larger Tor Browser user pool. Each individual browser change can significantly worsen the fingerprint because of the associated entropy, <ref>33 bits of entropy will identify one individual out of several billion.</ref> so only make alterations if the impacts are known. See also: [[Tor_Browser/Advanced_Users#tb-updater_in_Qubes_DVM_Template|tb-updater in Qubes DVM Template]].

A decision must be made in advance whether to disable JavaScript by default. There is a [[Tor_Browser#Security_vs_Usability_Trade-off|usability-security trade-off]] to consider: fingerprinting and usability is worsened by disabled JavaScript, but this provides better protection against vulnerabilities. Conversely, enabled JavaScript improves usability and increases the risk of exploitation, but the browser fingerprint is (likely) more common.

=== Tor Browser in DVM Template ===

For most users, Tor Browser customizations in the DVM Template or TemplateVM are discouraged. Advanced users who wish to customize the DVM template despite the risks should follow [[Tor_Browser/Advanced_Users#DVM_Template_Customization|these steps]].

=== Applications other than Torbrowser in DVM Template ===

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = Customization is completely optional. Only files in <i>/home/user</i> (or more generally, in <i>/rw</i>) can be customized in a DVM Template.
}}
{{Box|text=
'''1.''' Launch the application in the DVM template.

Either open dom0 terminal and run.

{{CodeSelect|code=
qvm-run -a {{whonix-ws-dvm}} <app>
}}

Or use Qube Manager:

<code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>right-click '{{whonix-ws-dvm}}'</code> &rarr; <code>Run command in qube</code> &rarr; <code>type name of the <app></code>

'''2.''' Customize application settings.

Customize the application as per normal procedures.

'''3.''' Exit the application.

If required, save application-specific settings, then exit the application so settings are stored on the disk.

'''4.''' Shutdown the DVM template.

Either use a dom0 terminal.

{{CodeSelect|code=
qvm-shutdown {{whonix-ws-dvm}}
}}

Or use Qube Manager:

<code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>right-click '{{whonix-ws-dvm}}'</code> &rarr; <code>left-click 'Shutdown qube'</code>

The changes will be available when the DispVM is restarted.
}}

== Delete a DVM Template ==
If a DVM Template has been customized and it is necessary to revert these changes, a DVM Template can be deleted the same way as any other VM.

Note the DVM Template cannot be deleted while it is the default DispVM of another VM, otherwise an error message appears. In that case, follow tips found [https://github.com/QubesOS/qubes-issues/issues/3993 here] on how to manually change the default DispVM of VMs to another setting, then repeat the procedure.

<code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>right-click '{{whonix-ws-dvm}}'</code> &rarr; <code>left-click 'Delete qube'</code>
<ref>Or on the command line (dom0), run. {{CodeSelect|code=qvm-remove <vmname>}}</ref>

== Keep Tor Browser Up-to-date ==
To obtain the latest Tor Browser, the simplest method is to use {{project name}} built-in Tor Browser downloader functionality. Simply update using [[Tor_Browser#Tor_Browser_Downloader_by_{{project_name}}|Tor Browser Downloader by {{project name}} (tb-updater)]] in {{workstation_product_name}} TemplateVM (<code>{{whonix-ws}}</code>) when performing your usual maintenance [[Qubes/Update|updating]]:

<code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>{{whonix-ws}}</code> &rarr; <code>Xfce Terminal</code> <ref>
<code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>right-click on '{{whonix-ws}}'</code> &rarr; <code>click 'Run command in qube'</code> &rarr; <code>type 'xfce4-terminal'</code>
</ref> <ref>
On the command line (dom0), run.
{{CodeSelect|code=
qvm-run -a {{whonix-ws}} xfce4-terminal
}}</ref>

{{Update}}

{{CodeSelect|code=
sudo apt-get update
}}

Upgrade.

{{CodeSelect|code=
sudo apt-get dist-upgrade
}}

If Tor Browser is not upgraded, use {{Code2|update-torbrowser}} to download a new copy.

Launch Tor Browser Downloader by {{project name}} and follow the instructions. <ref>
{{CodeSelect|code=
update-torbrowser
}}
</ref>

{{CodeSelect|code=
update-torbrowser --input gui
}}

Shutdown the DVM Template: <ref>
On the command line (dom0), run.
{{CodeSelect|code=
qvm-shutdown {{whonix-ws-dvm}}
}}
or<br />
DVM Template command line (domU), run. {{CodeSelect|code=
sudo poweroff
}}
</ref>

<code>dom0</code> &rarr; <code>Qube Manager</code> &rarr; <code>right-click on '{{whonix-ws-dvm}}'</code> &rarr; <code>click 'Shutdown qube'</code>

== Update a DVM Template ==
Changes to the underlying TemplateVM (<code>{{whonix-ws}}</code>) are detected automatically and the DVM Template is updated without user intervention. That means package updates that are applied to <code>{{whonix-ws}}</code> are also applied to the <code>{{whonix-ws-dvm}}</code>.

= Usage =
DispVMs are well-suited for risky and largely independent activities, like web browsing or opening untrusted files. In contrast, AppVMs might be better suited for activities necessitating file persistence, like email clients with local email storage.

With either kind of VM, Qubes' VM integration tools like [https://www.qubes-os.org/doc/copying-files/ secure file copy] and [https://www.qubes-os.org/doc/copy-paste secure clipboard] ensure that clean, trusted files and text can be easily and safely transferred to trusted VMs (if necessary).

== User Tips ==

'''Table:''' ''DispVM User Tips''

{| class="wikitable"
|-
! scope="col"| '''Category'''
! scope="col"| '''Recommendation'''
|-
! scope="row"| Data Storage 
| 
* In Qubes, it is unrecommended to store any valuable data in an untrusted VM. This perspective is reinforced by the Tor Browser design which similarly does not remember bookmarks or credentials. Best practice is to store sensitive data in an offline vault VM; for instance, when accessing passwords with a password manager. <br />
* @rustybird has announced a new "split-tor-browser" <ref>[https://github.com/rustybird/qubes-split-browser Github: Split Browser]</ref> package that can retrieve urls and credentials from a trusted VM for use in a DispVM's browser. This package is yet to be tested or endorsed by {{project_name}}, but it looks promising.
|-
! scope="row"| DispVM Shutdown
| A DispVM automatically shuts down when the <u>first</u> user-launched process is terminated. For example, if a new DispVM is created by launching Tor Browser and a user simultaneously starts typing in an editor later on, all this work will be lost after Tor Browser is closed. To avoid this, first launch a terminal in the DispVM and then launch additional applications from the terminal. This way the DispVM is only destroyed after exiting the terminal.
|-
! scope="row"| Offline DispVMs
| 
* Use utmost caution if deciding to re-establish network connectivity for off-line DispVMs! No mechanism is currently available to prevent connections to a clearnet NetVM. <br />
* Non-networked DispVMs are useful for opening untrusted files that potentially might try to use the network maliciously. Like all Qubes VMs, the NetVM for a DispVM can be changed dynamically while the VM is still running. Simply set the NetVM to "none" using Qube Manager or the command line interface. <ref>On the command line (dom0), run.{{CodeSelect|code=qvm-prefs disp<1 {{!}} 2 {{!}} ...> netvm none}}</ref>
|-
! scope="row"| Shortcuts
| 
* DispVMs can be created directly by launching programs from the application menu using shortcuts; [[#Add_a_Desktop_Shortcut|see below for instructions]]. <br />
* DispVMs can also be spawned by using context-menus or the command line interface in other AppVMs. Refer to the [https://www.qubes-os.org/doc/disposablevm/ Qubes DisposableVM documentation] for instructions on different methods. <br />
* Note the [[#Warnings|relevant warning]] concerning shortcuts in this chapter ("Spawning DisposableVMs").
|-
! scope="row"| Spawning DispVMs from other AppVMs
| 
* There are several ways to spawn DispVMs from TemplateBased AppVMs. In fact, in addition to the dom0 terminal and application menu, users can also spawn DispVMs from the AppVM terminal emulator or context-menu. <ref>See: [https://www.qubes-os.org/doc/disposablevm/ Qubes DispVMs]</ref> These tools provide a safe and convenient way to open files and email attachments that could contain malicious code. There is also an option to convert potentially dangerous [https://en.wikipedia.org/wiki/Portable_Document_Format PDFs] into trusted PDFs and open it in a DispVM. <ref>See Micahflee's blog on [https://micahflee.com/2016/07/how-qubes-makes-handling-pdfs-way-safer/ How Qubes makes handling pdfs way safer].</ref> <br />
* The most commonly used methods to spawn DispVMs from TemplateBased AppVMs are listed below. It is recommended to read the [[#Warnings|"Spawning DisposableVMs" warning]] detailing DispVM network settings before proceeding: <br />
# Context-menu <br />
# Dolphin file manager - open file in DispVM: <code>File</code> &rarr; <code>Actions</code> &rarr; <code>Edit/View in DisposableVM</code> <br />
# Nautilus file manager - open file in DispVM: <code>File</code> &rarr; <code>Edit/View in DisposableVM</code> <br />
# Nautilus file manager- sanitize PDF: <code>PDF</code> &rarr; <code>Convert to Trusted PDF</code> <br />
# [[Encrypted_Email_with_Thunderbird_and_Enigmail|Thunderbird]] E-[[E-Mail|mail]] client - open email attachment in DispVM: <code>Email</code> &rarr; <code>Attachments</code> &rarr; <code>Open in DispVM</code> <br />
# Command line interface - open file in DispVM:{{CodeSelect|code=
qvm-open-in-dvm <file_name>
}}
|}

== Add a Desktop Shortcut ==

# From the Qubes application menu, drag and drop a menu item onto the desktop.
# Double-click the newly created launcher to start it.
# At first start, it is safe to click "Mark Executable".

== Add an XFCE4 Panel Shortcut ==

From the Qubes application menu, drag and drop the menu item onto the panel.

== Start Tor Browser in a DisposableVM ==

Tor Browser can be started via the GUI or on the command line. 

{{Box|text=
<u>If you are using a GUI</u>, complete the following steps.

<code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>Disposable: {{whonix-ws-dvm}}</code> &rarr; <code>Tor Browser (AnonDist)</code>

<u>If you are using a terminal</u>, complete the following steps.

{{CodeSelect|code=
qvm-run --dispvm={{whonix-ws-dvm}} torbrowser
}}
}}

After launch, ''always'' first [[#Warnings|check the Tor Browser version]]!

'''Figure:''' ''Tor Browser in {{q_project_name}} DisposableVM'' 

[[Image:QubesDispVM.png|border]]

== Start Terminal Emulator in a DisposableVM ==

Terminal emulator <code>xfce4-terminal</code> can be started via the GUI or on the command line.

{{Box|text=
<u>If you are using a GUI</u>, complete the following steps.

<code>Qubes App Launcher (blue/grey "Q")</code> &rarr; <code>Disposable: {{whonix-ws-dvm}}</code> &rarr; <code>Xfce Terminal</code>

<u>If you are using a terminal</u>, complete the following steps.

{{CodeSelect|code=
qvm-run --dispvm={{whonix-ws-dvm}} xfce4-terminal
}}
}}

= TODO =
* TODO document how to use multiple DVM Templates - https://forums.whonix.org/t/is-anyone-interested-in-using-multiple-dvm-templates-based-on-whonix-ws-dvm/5757/5

= Footnotes =
{{reflist|close=1}}

{{Footer}}
[[Category:Documentation]]
