{{Title|title=Transport Layer Security (TLS)}}
{{Header}}
{{#seo:
|description={{project_name}} TLS User Documentation and Technical Design Notes
|image=https://www.{{project_clearnet}}/w/images/e/e6/TLS1432.jpg
}}
[[image:TLS1432.jpg|thumb]]

= TLS =
== Introduction ==
Transport Layer Security (TLS) is a cryptographic protocol that is designed to provide secure communications over a computer network. TLS has replaced the deprecated Secure Sockets Layer (SSL) predecessor and is intended to enforce privacy and data integrity between two or more communicating computer applications. <ref>https://en.wikipedia.org/wiki/Transport_Layer_Security</ref> TLS is utilized for a host of online activities, such as web browsing, email, instant messaging and VOIP applications. It ensures the client (like a web browser) is securely communicating with a server (such as whonix.org), meaning the connection is private, authenticated and reliable. For a detailed overview of the TLS design, refer to [https://en.wikipedia.org/wiki/Transport_Layer_Security this Wikipedia entry].

== TLS Attacks ==
A significant number of attacks have been demonstrated against the SSL/TLS protocol in the recent past, including: <ref>https://en.wikipedia.org/wiki/Transport_Layer_Security#Attacks_against_TLS/SSL</ref>
* <u>BEAST attack</u>: violation of same origin policy constraints.
* <u>[https://en.wikipedia.org/wiki/CVE-2014-0224 ChangeCipherSpec injection attack]</u>: a specially crafted handshake forces the use of weak keyring material, allowing decryption and modification of traffic in transit.
* <u>Cross protocol attacks</u>: servers are attacked by exploiting their support of obsolete, insecure SSL protocols to leverage attacks on connections using up-to-date protocols.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#Heartbleed Heartbleed]</u>: private keys are stolen from servers, allowing anyone to read the memory of protected systems.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#POODLE_attack POODLE attack]</u>: padding attacks which reveal the contents of encrypted messages.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#Protocol_downgrade_attacks Protocol downgrade]</u>: web servers are tricked into negotiating connections with earlier versions of TLS that are insecure.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#RC4_attacks RC4 attack]</u>: recovery of plain text relying on the RC4 cipher suite.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#Renegotiation_attack Renegotiation attack]</u>: plaintext injection attacks via the hijacking of the https connection.
* <u>[https://en.wikipedia.org/wiki/Transport_Layer_Security#CRIME_attack TLS Compression (CRIME attack)]</u>: session hijacking of web sessions via recovery of secret authentication cookies.
* <u>Truncation attack</u>: victim logout requests are blocked so the user remains logged into a web service.
* <u>Unholy PAC attack</u>: URLs are exposed when a user attempts to reach a TLS-enabled web link.

In addition, little trust should be placed in the public TLS certificate authority (CA) system, since it relies on a third-party correctly establishing the authenticity of certificates. If/once the CA is subverted, then the security of the entire system is lost, and potentially all entities relying on the trust of the compromised CA are affected. <ref>https://en.wikipedia.org/wiki/Certificate_authority#CA_compromise</ref>

The Snowden leaks confirmed that CAs were a weakpoint targeted by the IC, allowing for [[Warning#Man-in-the-middle_attacks|Man-in-the-middle attacks]] if the CAs were either compromised or cooperative. Examples of CA security breaches include [https://en.wikipedia.org/wiki/DigiNotar DigiNotar], [http://www.scmagazine.com/two-more-comodo-resellers-owned-in-ssl-hack/article/199620/ Comodo] and [http://www.wired.com/threatlevel/2013/01/google-fraudulent-certificate/ Turktrust].

== {{project name}} Technical Design ==
TLS certificates, especially for https://check.torproject.org (check.tpo) are not yet pinned in {{project_name}}; this is a future goal that requires further discussion. How pinning could be technically achieved is documented under [[Dev/SSL Certificate Pinning]]. At present this is a low priority for {{project_name}}, since:

* Not even the Tor Browser Bundle pins the check.tpo TLS certificate (which is a much bigger issue). <ref>
{{project name}} developer Patrick Schleizer does not agree with the "low priority" assigned to this issue in TBB. See [https://gitlab.torproject.org/legacy/trac/-/issues/3555 TBB: hardcode SSL cert check to prevent MITM] for further information.
</ref>
* It is only used when [[systemcheck]] is run with command line parameter <code>--leak-tests</code> which does not happen by default.

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]] [[Category:Design]]
