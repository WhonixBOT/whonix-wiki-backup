{{Header}}
<!--
Copyright:

   Whonix TimeSync wiki page Copyright (C) Amnesia <amnesia at boum dot org>
   Whonix TimeSync wiki page Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.
The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in Whonix virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
This wiki page is a fork of the Tails Tor Bridge Mode page, from this exact source <https://git-tails.immerda.ch/tails/commit/wiki/src/contribute/design/Time_syncing.mdwn?id=b27209b3673a0ea2d31b54b163aefd3025c8b39c>.
-->
{{#seo:
|description=Design Documentation of Whonix's Time Synchronization Mechanism
}}
[[Image:timesync_gui.png|TimeSync (Whonix) done|thumb]]

= Basic Knowledge =
== Introduction ==
The Post Install Advice is part of this design, therefore read [[Post Install Advice#Network Time Syncing|Network Time Syncing]] first. Also read the Advanced Security Guide chapter [[Advanced Security Guide#Network Time Synchronization|Network Time Synchronization]] as well.

== VirtualBox's time synchronization features ==
For understanding Whonix's Time Synchronization Mechanism, it is required to know VirtualBox's time synchronization features:

* VirtualBox uses the host's time if it needs to correct the time for guests.
* (Some of VirtualBox's time synchronization features depend on guest additions.)
* By default VirtualBox corrects Virtual Machine guests' virtual hardware system clock,
** when they get powered on,
** when they resume from suspension and
** when their clock is more than X minutes off.

== Facts ==
People have been using:

* Tor Browser and Mozilla Firefox in parallel
* Tails inside VMs and Firefox on the host
* Tor Browser inside Whonix-Workstation and Mozilla Firefox on the host

== Other Facts ==
* Almost no one and no operating system is using Secure Network Time Synchronization or External Clocks by default. Most systems synchronize the system clock using unauthenticated NTP. An adversary tampering with NTP replies or malicious NTP server makes things even worse. Even if there was authenticated NTP, there is a requirement for a distributed trust model.
* A system not using NTP or using authenticated NTP stands out from most other users.

== Definitions ==
* Time Sanity Check in context of Whonix: Is an init.d script, which checks if the system clock is between build timestamp and expiration date (17 MAY 2033 10:00:00).

== NTP authentication (autokey) is insecure ==
* https://tools.ietf.org/html/draft-ietf-ntp-network-time-security-00
* http://www.innovationslab.net/~brian/NTP/autokey-analysis.pdf

== curl timeout ==
[https://mailman.boum.org/pipermail/tails-dev/2013-February/002635.html Tails-dev Endless Data Attack and Defense]

= Attacks =
A correct system clock is crucial for many reasons (see footnotes for more):

* '''Attack 1:''' Replay attacks <ref>Replay old Tor consensus, see [https://tails.boum.org/contribute/design/Time_syncing/ Tails: Time syncing] for detailed explanation.</ref>
* '''Attack 2:''' Feeding old/outdated/known vulnerable updates and (https) certificates <ref>Cryptographic verification depends on system clock, i.e. a clock two years in past will accept certificates/updates, which have been expired/revoked for two years.</ref>
* '''Attack 3:''' Deanonymizing <ref>Javascript is enabled in Tor Button by default and it can be used to read the client's clock, see http://ip-check.info for demonstration. Also other applications do leak the client's clock, such as Thunderbird (patch has been proposed by TorBirdy developers) and https. Imagine the user connects to an adversary controlled web-server with Mozilla Firefox and connects to another web-server controlled by the same adversary with Tor Browser. As long as TBB upstream [https://trac.torproject.org/projects/tor/ticket/3059 Bug #3059: Find some way to deal with time-based fingerprints] is open, the adversary can link the anonymous and non-anonymous session, thus deanonymizing.</ref>
* '''Attack 4:''' Linking all sessions to the same pseudonym <ref>If the clock is too much off, it's also easy for an adversary's web-server to detect "Oh, that's the Tor Browser user who's clock is X in past/future.", thus allowing the adversary to link all sessions to the same pseudonym. See Tor Browser upstream bug #3059: [https://trac.torproject.org/projects/tor/ticket/3059 Find some way to deal with time-based fingerprints].</ref>
* '''Attack 5:''' Locating hidden services. <ref>
For hidden services a correct clock is crucial, see:
* [http://www.cl.cam.ac.uk/~sjm217/papers/ccs06hotornot.pdf Hot or Not: Revealing Hidden Services by their Clock Skew]
* [http://caia.swin.edu.au/talks/CAIA-TALK-080728A.pdf An improved clock-skew measurement technique for revealing hidden services]
* [http://people.cs.umass.edu/~elisha/Papers/SkewMask%20-%20final%20version.pdf SkewMask: Frustrating Clock Skew Fingerprinting Attempts]
</ref>

= Whonix's Time Synchronization Mechanism =
== Overview ==
* Whonix leaves the host's system clock or time synchronization mechanism untouched.
* Whonix-Gateway and Whonix-Workstation are based on VirtualBox and therefore have their own virtual hardware system clocks.
* Most VirtualBox time synchronization features get disabled by Whonix.
** Guest additions time synchronization gets disabled in ''/etc/init.d/sdwdate'' at run time. See VirtualBox bug report [https://www.virtualbox.org/ticket/10828 VBoxService --disable-timesync broken]. They say it's actually not a bug. It's a missing feature, that running instances of VBoxService can not be modified in their settings. Whonix would need to edit ''/etc/init.d/vboxadd-service'' by adding ''--disable-timesync'' <ref>[https://www.virtualbox.org/ticket/2928 source]</ref>. Whonix developer Patrick Schleizer does not see a reliable way to do so. If the guest additions get automatically updated in future the option would get overwritten. That's why Whonix added a line in ''/etc/init.d/sdwdate'' to turn it off completely. Guest additions time synchronization gets disabled, but the rest of the guest additions continue to work fine. Unless you have a better idea, it's an acceptable workaround.
** built in time synchronization features get disabled by ''VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled" "1"'' at build time.
* Whonix-Gateway and Whonix-Workstation
** When get powered on, they still get their time from the host. The user is advised to modify the biossystemtimeoffset in Advanced Security Guide, chapter [[Advanced Security Guide#Network Time Synchronization|Network Time Synchronization]]. <ref>Developer information: If we needed or wanted to render the hardware clock unusable, we could set VirtualBox ''--biossystemtimeoffset'' several decades in past or future.</ref>
** Time Sanity Check before sdwdate will be executed, this ensures, that the host clock is sane and not slow in 1980. User gets advised to fix its host clock in such cases.
** After they are connected to the Tor network, they use sdwdate (inspired by [https://tails.boum.org/contribute/design/Time_syncing/ tails_htp]) to set the system clock. <ref>Stream isolation has been added, for Whonix's sdwdate implementation i.e. people using Tor Browser prevent notifying their exit relay, that they are sdwdate or Whonix users.</ref>
** Time Sanity Check after sdwdate was executed. This should catch eventual bigger bugs and attacks. User gets informed if it fails.
* On Whonix-Workstation,
** Using Boot Clock Randomization, i.e. after boot, the clock is set randomly between 5 and 180 seconds into the past or future. This is useful to enforce the design goal, that the host clock and Whonix-Workstation clock should always slightly differ. It's also useful to obfuscate the clock when sdwdate itself is running, because naturally at this time, sdwdate hasn't finished.
** Every hour, at a random time, sdwdate will set the clock again. This is useful for machines running for long time periods without reboot.
** An adversary could guess if someone is running a hidden service with constant clock adjustments, that it's hosted inside a Whonix-Workstation. It's unknown if the clock adjustments by sdwdate are big enough to enable an adversary to guess that.
*** '''TODO''': Open question... "''ntpd adjusts the clock in small steps so that the timescale is effectively continuous and without discontinuities''" - is that possible with a sdwdate like approach as well? -> Working on [https://github.com/Whonix/Whonix/issues/169 sclockadj].
* Whonix-Gateway
** Doesn't use Boot Clock Randomization. If the assumption is correct, that the ISP can detect clock jumps by observing Tor's TLS client hello <ref name=tlsleakone />; <ref name=tlsleaktwo />, clock jumps should be avoided to prevent fingerprinting Whonix users.
** Uses sdwdate after booting.
** Using it at all is better against Attack (1) when using a bridge.
** Running sdwdate also every \[1440 minutes + random(0-1440)\]. Not running this every hour at a random time, because Tor does not like clock jumps. When testing this, there were cases where the clock jumped about 800 seconds, which caused Tor to expire circuits, which caused connection interrupts.
** '''TODO''': Open question... How often should sdwdate run on Whonix-Gateway? Every hour is a bad idea, as we see above. Not running it again when some people may run Whonix-Gateway for days or weeks is not good either, since the clock can drift. Maybe it should run wait 24 hours and then wait a random amount of minutes within 24 hours? -> Will be solved when [https://github.com/Whonix/Whonix/issues/169 sclockadj] gets finished.
*** The entry guard or bridge can see the time through TCP timestamp. <ref name=tlsleakone>
See [https://trac.torproject.org/projects/tor/ticket/7277 torproject.org #7277: timestamp leaked in TLS client hello]. The ticket says fixed. However, [https://packages.debian.org/de/wheezy/openssl Debian wheezy (currently: stable) (which Whonix 8 is based on) is using OpenSSL 1.0.1e] but Nick's [https://trac.torproject.org/projects/tor/ticket/7277#comment:15 patch will appear first in 1.0.1e]. It will be solved when Whonix is based on Debian jessie, because that contains [https://packages.debian.org/de/jessie/openssl a more recent version of OpenSSL].
</ref>; <ref name=tlsleaktwo>
See [https://trac.torproject.org/projects/tor/ticket/4852 torproject.org #4852: Clients send NETINFO with time]. The ticket says fixed. However, [https://packages.debian.org/de/wheezy/tor Debian wheezy (currently: stable) (which Whonix 8 is based on) is using Tor 0.2.3] but Nick's [https://trac.torproject.org/projects/tor/ticket/4852#comment:20 patch will appear first in 0.2.4]. It will be solved when Whonix is based on Debian jessie, because that contains [https://packages.debian.org/de/jessie/tor a more recent version of Tor].
</ref>
*** Continuous clock jumps could help the entry guard or bridge guessing, that a Whonix-Gateway is connected.
*** '''TODO''': Open question... "''ntpd adjusts the clock in small steps so that the timescale is effectively continuous and without discontinuities''" - is that possible with a sdwdate like approach as well? -> Will be solved when [https://github.com/Whonix/Whonix/issues/169 sclockadj] gets finished.
* Hardware Clock:
** Whonix-Gateway: set to UTC. OpenSSL (used by Tor) leaks it <ref name=tlsleakone />; <ref name=tlsleaktwo />, but that is of no concern. Tor is running on Linux and Linux is expected to be run in UTC. Therefore there is no point to set it to the local time zone of the user.
** Whonix-Workstation: set to UTC
* sdwdate runs at non-predictable times to prevent the ISP or Tor guard/bridge node to guess, that the user is running Whonix.
* Implementation details are in Design-Shared, chapter [[Dev/Design-Shared#timesync|TimeSync]]
* That will reach the design goal, that all clocks, the host's, Whonix-Gateway's and Whonix-Workstation's slightly differ.

==== How Secure is it? ====
It is designed to be as secure as TLS (RFC 2246) but of course the security of TLS is often reduced to whichever CA racket you believe is trustworthy. By default, sdwdate uses curl that by default trusts your local CA root store - so when any of these companies assist in a MITM attack, malicious time information could be feed into your system.

== sdwdate ==
=== Authentication of Servers ===
The custom /usr/bin/sdwdate we use only connects to HTTPS servers, and delegates TLS X.509 certificate verification to curl. It also uses several different pools of time sources, and if there are too many that fail for any given pool, e.g. because of failed certificate checking or being unreachable, the pool is considered to be potentially compromised and sdwdate aborts.

curl is also directed to only use TLSv1 as a "secure" protocol.

=== sdwdate source pools ===
What sources should be trusted? This is of course also a problem with NTP.

The sdwdate pools used by Whonix are based on stable and reliable webservers that get great amounts of traffic. They are categorized into three different pools according to their members' relationship to the members in the other pools; any member in a one pool should be unlikely to share logs (or other identifying data), or to agree to send fake time information, with a member from the other pools. The pools are as follows:

* The "pal" pool are run by groups that are likely to take great care of their visitors' privacy.
* The "foe" pool are managed by adversaries of the "pal" pool.
* The "neutral" pool members have a neutral raltionship to both the "pal" and "foe" pool.

The pools are listed in {{Code2|whonix_shared/etc/sdwdate.d/30_sdwdate_default}}.

Basically, sdwdate picks three random servers - one from each pool, and then builds the [average (Whonix 8 bug)] [mediate (Whonix 9)] of the three advertised dates.

== timesync ==
=== gui actions ===
* (1) Whonix startup -> sdwdate starts -> sdwdate in startup mode -> X starts -> when sdwdate in progress -> sdwdate-plugin-timesync shows progress bar
* (2) Whonix startup -> sdwdate starts -> sdwdate in startup mode -> X starts -> when sdwdate failed -> sdwdate-plugin-timesync shows active error popup
* (3) Whonix startup -> sdwdate starts -> sdwdate in startup mode -> X starts -> when sdwdate crashed -> sdwdate-plugin-timesync shows active error popup
* (4) Whonix startup -> sdwdate starts -> sdwdate in startup mode -> X starts -> when sdwdate succeeded -> sdwdate-plugin-timesync shows passive success popup


* (5) Whonix after startup -> sdwdate in daemon mode -> when sdwdate in progress -> sdwdate-plugin-timesync do nothing
* (6) Whonix after startup -> sdwdate in daemon mode -> when sdwdate failed -> sdwdate-plugin-timesync shows active error popup
* (7) Whonix after startup -> sdwdate in daemon mode -> when sdwdate crashed -> sdwdate-plugin-timesync shows active error popup
* (8) Whonix after startup -> sdwdate in daemon mode -> when sdwdate succeeded -> sdwdate-plugin-timesync do nothing


* (9) Whonix after startup -> sdwdate in daemon mode -> when user runs "sudo service sdwdate restart" or apt-get upgrades sdwdate ->
** Whonix 9: same as (1)
** Whonix 10: same as (5) (6) (7) (8) as per https://github.com/Whonix/Whonix/issues/264


* (10) Whonix after startup -> user runs timesync -> timesync works like a monitor -> timesync restarts sdwdate -> sdwdate in startup mode -> timesync shows progress bar and monitors sdwdate -> show active popup (with result, either: crash / failed / succeeded)

= Conclusions =
* <span style="background-color: {{Red}}">'''Attack 1'''</span> is a general Tor problem. It is impossible to solve for Whonix. It is unsolved in other projects as well.
* <span style="background-color: {{Yellow}}">'''Attack 2'''</span> gets partially defeated.
** Whonix-Gateway and Whonix-Workstation are immune.
** This problem is unsolved in other projects as well.
*** This is a general problem with all operating systems.
*** The host is still at risk.
*** [http://brainstorm.ubuntu.com/idea/30050/ Ubuntu Brainstorm Idea #30050: Secure Network Time Synchronization]
*** [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=%23687166 Debian Bug Report ntp: NTP security vulnerability because not using authentication by default]
*** [https://bugs.launchpad.net/ubuntu/+source/ntp/+bug/1039420 Ubuntu Bug Report NTP security vulnerability because not using authentication by default]
** Manual workaround: Check your clock manually and read [[Other Operating Systems#About_Ubuntu|About Ubuntu]] (stale mirror attack). ([https://bugs.launchpad.net/launchpad/+bug/716535 Bug #716535: Please support Valid-Until in release files for security.ubuntu.com])
* <span style="background-color: {{Green}}">'''Attack 3'''</span> gets defeated, Whonix adds additional security.
* <span style="background-color: {{Green}}">'''Attack 4'''</span> gets defeated, Whonix adds additional security.
* <span style="background-color: {{Red}}">'''Attack 5'''</span> is a general Tor problem, which can not be solved by Whonix and which is unsolved in other projects as well. Since host, Whonix-Gateway and Whonix-Workstation time all differ, at least this attack becomes harder against Whonix.

When the user powers on Whonix-Gateway and the host time is too much off, it will not be able to connect to the Tor network. It is advised, when powering on Whonix-Gateway, to check that the host time is no more than 1 hour in past or more than 3 hour in future. Otherwise Tor will be unable to connect.<ref>https://lists.torproject.org/pipermail/tor-talk/2012-February/023264.html</ref>

An adversary tampering with the user's clock, while the user doesn't recognize that, can't do any more damage to Whonix than he could do to the Tor Browser Bundle. Worst case is a denial of service for Tor. On the other hand, an adversary capable of actively tampering with the traffic between the user and its entry guard or bridge poses much bigger risks to Tor in general. <ref>General Tor problems, Tor is known to be broken against many active attacks. This can not be solved by Whonix. When an adversary is capable of running active attacks, tampering with the time leading into a denial of service is the least of the worries. The adversary could also disrupt the service easier. And as for active attacking in general, there are other attacks which are easier to deploy and which pose a greater danger. Not a Whonix specific problem.</ref> 

The reason for running TimeSync on Whonix-Gateway, is that hidden services can only be accessed if the clock is no more than 30 minutes slow or fast.<ref>https://trac.torproject.org/projects/tor/ticket/3582#comment:3</ref> Running TimeSync ensures, that Whonix-Gateway's clock is reasonably accurate.

= External Clock =
This topic is still under research. Help is welcome.

It might make sense to add an external clock, such as a GPS, or even better an atomic clock. (Can we get an atomic USB clock?) This clock should be added to the host and/or Whonix-Gateway and/or Whonix-Workstation?

Open question: would the GPS/atomic clock be too accurate and would that make Whonix more fingerprintable?

= See Also =
== Previous Discussion ==
* [https://lists.torproject.org/pipermail/tor-talk/2011-January/008551.html System time in anonymity oriented LiveCDs]
* [https://mailman.boum.org/pipermail/tails-dev/2014-August/006821.html Tails-dev mailing list - Tails htpdate - why use time information from neutral and foe pools?]

== Other Projects ==
* [https://tails.boum.org/contribute/design/Time_syncing/ Tails Design: Time syncing]
* https://docs.google.com/a/chromium.org/document/d/1ylaCHabUIHoKRJQWhBxqQ5Vck270fX7XCWBdiJofHbU/edit

== Comparison with Others ==
[[Comparison with Others#Network Time related|Network Time related]]

== Tickets ==
* [https://trac.torproject.org/projects/tor/ticket/6894 torproject.org #6894 answer network time requests]
* [https://tails.boum.org/todo/robust_time_syncing/ Tails Todo: robust time syncing]
* [https://tails.boum.org/todo/safer_tordate_parameters/ Tails Todo: safer tordate parameters (always use tordate)]
* [https://tails.boum.org/todo/bridge_mode_vs_tordate_timeouts/ Tails Todo: bridge mode vs tordate timeouts]
* [https://tails.boum.org/todo/when_htp_fails_the_user_should_be_prompted/ Tails Todo: when htp fails the user should be prompted]

== Footnotes ==
<references />

= License =
<pre>Whonix TimeSync wiki page Copyright (C) Amnesia <amnesia at boum dot org>
Whonix TimeSync wiki page Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>

This program comes with ABSOLUTELY NO WARRANTY; for details see the wiki source code.
This is free software, and you are welcome to redistribute it
under certain conditions; see the wiki source code for details.</pre>

{{Footer}}

[[Category:Design]]
