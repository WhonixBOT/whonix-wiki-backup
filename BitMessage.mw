{{Header}}
{{#seo:
|description=Bitmessage email alternative. Asynchronous, decentralized, encrypted communication. 
}}
{{Maintainer|
|status=stable
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=easy
|maintainer=[https://forums.whonix.org/users/0brand 0brand]
|support=[[Support]]
}}

= Introduction =
[https://bitmessage.org BitMessage] is a P2P asynchronous communications protocol used to send encrypted messages to another person or to many subscribers. The PyBitmessage client is written in Python with a Qt GUI. BitMessage is decentralized and trustless, meaning that users do not need to place faith in entities like root certificate authorities. The design employs strong, self-authenticating, Bitcoin-style addresses which prevents adversaries from spoofing messages so they appear to be legitimate.

For a comparison of BitMessage with other open source communications software, refer to the [https://bitmessage.org/wiki/FAQ#How_does_Bitmessage_compare_to_other_messaging_methods FAQ].

== Design ==

The BitMessage protocol is quite flexible and robust: <ref>The development of Android clients has unfortunately stalled. Connecting with a mobile client also requires a full node running on the user's PC.</ref>

* Messages for offline recipients are stored for up to 28 days before being deleted. 
* Proof-of-Work is relied upon to prevent spamming.
* Sender and recipient metadata is hidden by broadcasting all messages to everyone, thereby acting as a simple private information retrieval (PIR) system.
* Bridging services between the BitMessage network and  legacy / regular email exist. 
** The most popular service is [https://bitmessage.ch/ bitmessage.ch], which is also available as an [http://bitmailendavkbec.onion/ onion service].
* Additional features include subscription support and Chans (Decentralized Mailing Lists). <ref>https://bitmessage.org/wiki/Decentralized_Mailing_List</ref>
* Stronger anonymity is possible by running BitMessage in Whonix, since it works reliably.

For other use cases, refer to the [https://wiki.archlinux.org/index.php/Bitmessage Arch BitMessage wiki]. 

BitMessage has not yet been independently audited by professionals to verify its security claims. That said, miscreants did use it to run a ransomware operation (over Tor) without being caught, demonstrating that it is somewhat "battle-tested." <ref>https://www.bleepingcomputer.com/news/security/chimera-ransomware-uses-a-peer-to-peer-decryption-service/</ref> While the Whonix Project will never condone criminal abuse of technology, it is hoped that dissidents in oppressive states can profit from the protocol's underlying strength.

== Account Registration ==
Follow the [https://bitmessage.ch/setup.html instructions] to set up an account, then [https://bitmessage.ch/register register] ([http://bitmailendavkbec.onion v2 onion]). 

Note that for confidentiality, GPG must be used when communicating with email users. It is also possible to configure Thunderbird with Enigmail so it uses the [https://bitmessage.ch/faq.html BitMessage service] (optionally over Tor) for seamless GPG support.

= BitMessage Installation and Operations =
== Installation ==
The following instructions perform steps to compile and verify the BitMessage source code. Once the verification process is complete, BitMessage can be started and the networking appropriately configured.

Bitmessage developers use [https://git-scm.com/git git] to sign their source code. <ref>https://github.com/Bitmessage/PyBitmessage/issues/108]</ref> Git is a distributed version control system ([https://en.wikipedia.org/wiki/Version_control VCS]) that has the ability to tag specific points in history -- such as version release points -- as being important. These (git) tags can be signed and verified with GNU Privacy Guard (GPG). For a basic overview of Tagging please read: [https://git-scm.com/book/en/v2/Git-Basics-Tagging Git Basics - Tagging].

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = While git is cryptographically secure, it is <u>not</u> foolproof. See [https://en.wikipedia.org/wiki/Web_of_trust Web of Trust] for further information.
}} 


'''1.''' Compile the source code.

Install package dependencies.

{{CodeSelect|code=
sudo apt-get install git python openssl libssl-dev python-msgpack python-qt4 
}}

Download the source code from GitHub.

{{CodeSelect|code=
git clone https://github.com/Bitmessage/PyBitmessage $HOME/PyBitmessage
}}

'''2.''' Download the GPG public key of Pete Å urda, BitMessage core developer.

{{CodeSelect|code=
gpg --recv-keys 52C97EBC095A2C0863C098C80C5F50C0B5F37D87
}}

When finished, the output should appear similar to the following screenshot.

'''Figure:''' GPG Key Importation

[[File:Bitmessage_import_gpg_key.png]]

'''3.''' Verify the public key fingerprint.

{{CodeSelect|code=
gpg --fingerprint 52C97EBC095A2C0863C098C80C5F50C0B5F37D87
}}

At the time of writing, the output will appear like the following screenshot.

'''Figure:''' GPG Key Verification

[[File:Bitmessage_gpg_key_fingerprint.png]]

'''4.''' List tags.

Navigate to any Bitmessage directory.

{{CodeSelect|code=
cd ~/PyBitmessage
}}

List all git tags.

{{CodeSelect|code=
git tag 
}}

Tags will be preceded by a "v". 

<pre>0.5.5
v0.5.6
v0.5.7
v0.5.8
v0.6.0
v0.6.1
v0.6.2
v0.6.3
</pre>

Note: The output has been truncated.

'''5.''' Verify the git tag(s). 

At the time of writing, v0.6.3 was the most current tag. 

{{CodeSelect|code=
git tag --verify v0.6.3
}}

When the tag has been verified the output should show a "Good signature" similar to the screenshot below.

'''Figure:''' Successful Verification

[[File:Bitmessage_verify_git_tag.png]]

The above "gpg: WARNING" can be ignored since it does not alter the validity of the signature related to the downloaded key. Rather, this warning refers to the level of trust placed in the developers signing key and the web of trust. To remove this warning, the developers signing key must be personally signed with your own key.

If the following "gpg: BAD signature" message appears the source code has been corrupted or altered during the download process.

<pre>gpg: BAD signature from "Peter Surda <admin@mailchuck.com>" [unknown]</pre>

In this event, delete the source code and either wait 10-15 minutes for the Tor circuits to change, or open up the [[Arm]] Tor Controller in Whonix-Gateway (<code>sys-whonix</code> [[Qubes-Whonix]]) and type "n" to create new Tor circuits. Wait for a random period of time before repeating the steps to download the source code and verify the git tag(s). 

== Start BitMessage ==
Start BitMessage by running the following command.

{{CodeSelect|code=
~/PyBitmessage/src/bitmessagemain.py
}}

When BitMessage starts for the first time, this prompt will appear: <i>"Bitmessage won't connect unless you let it."</i> Choose: <i>"Let me configure special network setting first"</i>  -> press <<i>OK</i>>.

'''Figure:''' BitMessage Network Settings

[[File:Bitmessage_enable_networking.png]]

Change Proxy setting to <code>SOCKS5</code> with hostname: 127.0.0.1 and Port: 9050. Press <<i>OK</i>> and the application should be fully functional.

'''Figure:''' SOCKS5 Proxy Configuration

[[File:Bitmessage_configure_networking.png]]

== Upgrade BitMessage ==
To upgrade BitMessage run the following command.

<pre>
cd $HOME/PyBitmessage
git pull
</pre>

== Send Attachments ==
While explicitly attaching files is not supported, technically any file can be sent within the message body. <ref>https://tedjonesweb.blogspot.fr/2013/06/how-to-send-files-like-e-mail.html</ref>

First convert the file with base64 and then copy and paste the contents of the text file.

<pre>
base64 < binary.file > text.file
</pre>

Do not forget to include receiver instructions on how to decode it. In order to decode the file, the recipient can copy and paste the code into a file and convert it with the following command.

<pre>
base64 -d < text.file > binary.file
</pre>

It is not very practical to send large files with BitMessage. Alternatively, a file or archive containing a collection can be GPG-encrypted and uploaded to untrusted cloud storage, with a link sent to the intended recipient(s). Two methods of encryption are possible: relying on a contact's public key or using symmetric encryption and sending the password in BitMessage. For GPG symmetric encryption, follow this example:

<pre>
gpg -vv -c --cipher-algo AES256 your-file.tar.gz
</pre>

Note that the extended output of <code>pwgen</code> (pre-installed in Whonix 14+) can be used for secure passwords.

== Backup User Data ==
To backup the BitMessage profile and all user-generated program data:

* Copy the folder under this path to your shared folder: ''/home/user/.config/PyBitmessage''
** Private keys are stored in the <code>keys.dat</code> database file. <ref>https://bitmessage.org/wiki/Keys.dat</ref>
** Other data like inbox contents, contacts and black / white-list info is stored in the <code>messages.dat</code> <ref>https://bitmessage.org/wiki/Messages.dat</ref> database file. 
* Copy the folder to this location to restore BitMessage data for new installs.

It is recommended to use [[Multiple_Whonix-Workstations|Multiple Whonix-Workstations]] to safely separate BitMessage identities and running instances. For the highest security, do not run separate BitMessage instances concurrently in this configuration.

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
