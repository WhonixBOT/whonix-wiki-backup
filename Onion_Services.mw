{{Header}}
{{#seo:
|description=Anonymously host any server with Whonix and Tor onion services
|image=https://www.whonix.org/w/images/1/12/Fly-agaric808110640.jpg
}}

= Tor Onion Services - EASY =
== Introduction ==
Be sure to read and understand [https://www.torproject.org/docs/hidden-services.html.en Tor: Onion Service Protocol] (general information) and [https://www.torproject.org/docs/tor-onion-service Configuring Onion Services for Tor] (standard setup, no isolated proxy) first. Note that onion services are always only reachable using Tor or tunnel services, such as tor2web, ([https://trac.torproject.org/projects/tor/wiki/doc/tor2web be careful]). Also review Riseup's [https://riseup.net/en/security/network-security/tor/onionservices-best-practices Tor Hidden (Onion) Services Best Practices guide].

You do not need SSL <ref>https://en.wikipedia.org/wiki/Secure_Sockets_Layer</ref>, because connections to Tor onion services are end-to-end encrypted by default. <ref>To be exact, only tor-to-tor, see [[Onion_Services#Notes_about_End-to-end_security_of_Onion_Services|Notes about End-to-end security of Onion Services]].</ref><ref>http://www.quora.com/Is-there-an-SSL-equivalent-for-Tor-Hidden-Services</ref> This is handy, as you do not have to bother with self signed certificates or certificate authorities.

Another interesting property is they can serve as a drop-in Global Server Load Balancing and Layer 3 DDoS-resistance solution.<ref>https://archive.is/Aaqsz</ref> This raises the bar to withstanding attacks that the entire Tor network can tolerate. Same with [[I2P|I2P Eepsties]]. Tor can be also considered a very simple to configure encrypted transport alternative to IPSec.<ref>https://lists.torproject.org/pipermail/tor-talk/2016-October/042360.html
</ref>

An adversary can see whether the service (and presumably Tor) is up and running or not.

Below on this page is an ''example'' for a Hidden Webserver. On the [[VoIP]] page is an example for a Hidden VoIP Mumble Server.

Even if someone hacks your hidden server software (lighttpd, thttpd, apache, etc.), the attacker can not steal your onion service key or bypass Tor, see [[Comparison with Others#Attacks|Attack on Whonix]]. The key is stored on the Whonix-Gateway. Once you cleaned your Whonix-Workstation, no one can impersonate your onion service anymore.

While using Whonix we're quite confident that there are no IP/DNS leaks, but hardening the server software is still left to the user. In the [[Security Guide]] and in the [[Advanced Security Guide]] you'll find pointers for hardening.

Beware of application level leaks. See [[Protocol-Leak-Protection and Fingerprinting-Protection]] for definition. Some of these instructions are paraphrased from Sarah Jamie Lewis' write-up after running OnionScan<ref>https://mascherari.press/why-onionscan-should-worry-you/</ref> on the Onion web. All credit goes to her.<ref>https://mascherari.press/thwarting-identity-correlation-attacks/</ref> OnionScan<ref>https://github.com/s-rah/onionscan</ref> is an open source pen-testing suite that exposes misconfiguration errors that expose Hidden Servers. '''Do''' run it before your service goes live. 

* Avoid Apache. It has much more functionality, leak potential and attack surface than smaller and lighter alternatives. Nginx is a recommended alternative, its good practice to setup access to your site through reverse proxies to mitigate layer 7 DoS attacks and information leaks about your setup.

* Disable banners for SSH, FTP, SMTP and HTTP servers which leak info about the a daemon's name and version. If your SSH instance is for private use, use it with an Authenticated Onion Service to protect your server from brute-force and remote exploitation.

* As a rule, each service you host should get its own dedicated onion address to prevent correlation between multiple instances running in the same VM.

* ALPaCA is an advanced website fingerprinting client/server mitigation in development that applies server-side padding to requests sent out to Tor Browser. Once ts ready, service operators can run it to protect against this class of correlation attacks.<ref>https://github.com/camelids/</ref><ref>[https://petsymposium.org/2017/papers/issue2/paper54-2017-2-source.pdf Website Fingerprinting Defenses at the
Application Layer]</ref><ref>https://www.esat.kuleuven.be/cosic/?p=6743</ref>

* If you are using the Apache web server, it is advised to install [https://packages.debian.org/de/jessie/libapache2-mod-removeip libapache2-mod-removeip]<ref>
{{CodeSelect|code=
sudo apt-get install libapache2-mod-removeip
}}
</ref> as well. A combination of Apache and mediawiki without libapache2-mod-removeip being installed, wouldn't be the optimal case, since mediawiki by default puts IPs of anonymous editors in the public accessible editor logs. The IP would be 10.152.152.10. That could not be used to identify you, because that is not your real external IP address, but it would identify the server as an onion service behind a Whonix-Gateway.<ref>Since it is easy to know that the internal LAN IP 10.152.152.10 is usually used by Whonix-Gateway.</ref>

Therefore any instructions on how to hide the IP address for your specific server software should be applied. Also other hardening instructions are recommended to apply. For example,

* If you are using the Apache web server, see the following footnotes. <ref>
(Source: [http://sourceforge.net/p/whonix/discussion/general/thread/407fce8f/?limit=25#478a old forum])

Stop Apache.

In {{Code|ports.conf}}:

<pre>
NameVirtualHost 127.0.0.1:80
Listen 127.0.0.1:80
ServerName localhost
</pre>

In {{Code|sites-available/default}}:
<pre>
</pre>

Start Apache.

Now Apache is not listening on {{Code|10.152.152.10}}, but only on {{Code|127.0.0.1}}. So now we somehow need to redirect {{Code|10.152.152.10:80}} to {{Code|127.0.0.1:80}}.

It can be done with a firewall rule or netcat:

{{CodeSelect|code=
sudo ncat -l 10.152.152.10 80 -c 'ncat 127.0.0.1 80'
}}
</ref>

{{mbox
| type      = critical
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       =
You are better off not using Apache! We do not have a suggestion for a privacy friendly web server yet. That is still TODO. See ticket, [https://phabricator.whonix.org/T523 document identity correlation attacks and defenses / Removing Apache Recommendation]. Help welcome!
}}

== Hidden Webserver ==
==== Whonix-Gateway ====
On your Whonix-Gateway:

====== Step 1: open Tor config ======
{{Open_/usr/local/etc/torrc.d/50_user.conf}}

====== Step 2: edit Tor config ======
(all Whonix platforms)

You need to add two settings to {{Code2|/usr/local/etc/torrc.d/50_user.conf}}.

* A {{Code2|HiddenServiceDir}} configuration directive declaring where onion services files (hostname file and private key file) should be stored.
* A {{Code2|HiddenServicePort}} configuration directive declaring,
** the virtual port and
** the IP and port of the Whonix-Workstation that will run a server service that processing incoming onion service connections.
<br />
To do that, add the following two lines.

[[Qubes|Qubes-Whonix]]: 

{{IP-of-Qubes-Whonix-Workstation-AppVM}}

{{CodeSelect|code=
HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 IP-of-Qubes-Whonix-Workstation-AppVM:80
}}

[[Non-Qubes-Whonix]]:

{{CodeSelect|code=
HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 10.152.152.11:80
}}

(all Whonix platforms) 

Save.

====== Step 3: make changes to Tor config take effect ======
{{Reload Tor}}

====== Step 4: get your onion hostname ======
To get your Tor onion service url.

{{CodeSelect|code=
sudo cat /var/lib/tor/hidden_service/hostname
}}

====== Step 5: backup your Tor onion service private key ======
{{
Backups_Tor_Onion_Service_private_key
|private_key_file=/var/lib/tor/hidden_service/private_key
}}

==== Whonix-Workstation ====
On your Whonix-Workstation:
===== Step 1: Install Server Software =====

Run the following commands to install lighttpd.

{{CodeSelect|code=
sudo apt-get update
}}
{{CodeSelect|code=
sudo apt-get install lighttpd
}}

===== Step 2: Open Whonix-Workstation Firewall Port =====
{{Firewall Settings Workstation}}

Add.

{{CodeSelect|code=
EXTERNAL_OPEN_PORTS+=" 80 "
}}

Save.

{{Reload_Firewall_Whonix-Workstation}}

===== Step 3: Final Notes =====
Done.

<u>Note</u>, that it may take up to 30 minutes (or so?) until a fresh .onion domain gets reachable.

<u>Note</u>, accessing 127.0.0.1 {{Tor_Browser_Local_Connections}}.

=== Debugging ===
On Whonix-Gateway.

Check permissions.

{{CodeSelect|code=
sudo ls -la /var/lib/tor/hidden_service/
}}

In case you manually restored your hidden_service keys as root, Tor will fail to start. The folder must be owned by debian-tor. In that case, fix the permissions.

{{CodeSelect|code=
sudo chown debian-tor:debian-tor /var/lib/tor/hidden_service/
}}

In Whonix-Workstation. 

Check if the service is available on 127.0.0.1:80.

{{CodeSelect|code=
## Circumventing Whonix curl stream isolation wrapper.
{{Curl_Plain}} 127.0.0.1:80
}}

[[Qubes|Qubes-Whonix]]: In Qubes-Whonix-Workstation, check if the service is available on Qubes-Whonix-Workstation IP, port 80.

{{CodeSelect|code=
## Circumventing Whonix curl stream isolation wrapper.
{{Curl_Plain}} $(qubesdb-read /qubes-ip):80
}}

[[Non-Qubes-Whonix]]: In Whonix-Workstation, check if the service is available on 10.152.152.11:80.

{{CodeSelect|code=
## Circumventing Whonix curl stream isolation wrapper.
{{Curl_Plain}} 10.152.152.11:80
}}

Note: Tor Browser will allow connections to ''127.0.0.1:80'' but not to ''10.152.152.11:80''.

== Tips settings up any onion service ==
Please test the example Hidden Webserver above first. It helps understanding this in general and will ease debugging.

Quoted from the Tor manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServiceDir DIRECTORY

Store data files for an onion service in DIRECTORY. Every onion service must have a separate
directory. You may use this option multiple times to specify multiple services. DIRECTORY
must be an existing directory.</pre>
Quoted from the Tor manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServicePort VIRTPORT [TARGET]

Configure a virtual port VIRTPORT for an onion service. You may use this option multiple
times; each time applies to the service using the most recent hiddenservicedir. By default,
this option maps the virtual port to the same port on 127.0.0.1 over TCP. You may override
the target port, address, or both by specifying a target of addr, port, or addr:port. You
may also have multiple lines with the same VIRTPORT: when a user connects to that VIRTPORT,
one of the TARGETs from those lines will be chosen at random.</pre>
Read the [[Security Guide]].

== Important Upstream Bugs ==
Connectivity bugs:

* [https://trac.torproject.org/projects/tor/ticket/3825 HS intro points overloaded with CREATE cells cause connectivity failures]
* [https://trac.torproject.org/projects/tor/ticket/8940#comment:15 Possible bug, if too many people try to access the same onion service]

= Tor Onion Services - ADVANCED =
== How Onion Services Connections Work ==
{{Template:Onion_Services_Technical}}

== Onion Services Security ==
'''Not Whonix specific! Talking about Tor in general.'''

How safe are Tor Onion Services?

This is a difficult question. Therefore state relevant facts, quotes and links here.

* At time of writing there are no known attacks used in the wild constantly deanonymizing Tor onion services.
* 80 bit name hash and RSA-1024 sized keys
* Quote Mike Perry {{Code|Tor core people}}<ref>https://www.torproject.org/about/corepeople.html.en</ref>): http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05418.html
* Quote Mike Perry: http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05462.html
* Also see, [https://blog.torproject.org/blog/hidden-services-need-some-love The Tor Project Blog: Onion Services need some love].
* [https://conference.hitb.org/hitbsecconf2015ams/sessions/non-hidden-hidden-services-considered-harmful-attacks-and-detection Non-Hidden Onion Services Considered Harmful: Attacks and Detection] <ref>
https://forums.whonix.org/t/cryptolog-for-whonix-website/3369/12
</ref>

{{Anchor|Hidden Service Authentication}}
== Onion Service Authentication ==
=== Introduction ===
By default Onion Service names are known to the public as they are broadcast to Onion Service directories. This information becomes sequestered in search crawlers allowing anyone to try and connect and probe your Hidden Server even if this wasn't your intention.

To set up a Hidden service in a private mode, only accessible by just you or additionally your trusted associates, there is a little known feature in Tor feature known as Onion Services Authentication. <ref>http://tor.stackexchange.com/questions/219/how-to-use-hidden-service-authentication How to use Onion Service Authentication?</ref><ref>https://gitweb.torproject.org/torspec.git/tree/proposals/121-hidden-service-authentication.txt</ref> When activated, no one (not even the Onion Service Directories) can derive your .onion address from the descriptors nor can they know the introduction points to your server and consequently will not be able to connect to you.

This feature allows the HS operator to generate multiple shared secrets - giving access to different parties which is revocable. Configurable with the "stealth" auth type used with HiddenServiceAuthorizeClient. Meaning that clients who are banned will no longer know about the HS' introduction points anymore.

[https://www.torproject.org/docs/tor-manual.html.en Tor manual]

=== Server Setup ===
On Whonix-Gateway.

{{Open /etc/tor/torrc}}

See the following example. Adjust it for your purposes and add it.

{{CodeSelect|code=
HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 22 127.0.0.1:22
HiddenServicePort 5900 127.0.0.1:5900
## syntax:
## HiddenServiceAuthorizeClient auth-type client-name,client-name,…
## The auth-type can either be 'basic' for a general-purpose authorization protocol or 'stealth' for a less scalable protocol that also hides service activity from unauthorized clients.
## Valid client names are 1 to 16 characters long and only use characters in A-Za-z0-9+-_ (no spaces). 
HiddenServiceAuthorizeClient stealth 1234567890123456
}}

Save.

{{Reload Tor}}

To get your Tor onion service url and password, run.

{{CodeSelect|code=
sudo cat /var/lib/tor/hidden_service/hostname
}}

Should show something like this.

<pre>
xxxxxxxxxxxxxxxx.onion 0123456789012345678901 # client: 1234567890123456
</pre>

This is the authentication cookie that was generated by Tor that should be shared with the one supposed being allowed to connect,

* preferably face-to-face or,
* or via OpenPGP encrypted e-mail or OTR encrypted chat over Tor involving both parties.

Note that you can generate a unique authentication cookie for every individual or group you grant access to. This gives you the ability to revoke access if the need arises. It is an all or none rule for granting access to an onion service. If you want to limit that on a subdomain level you are advised to implement it by compartmentalizing your services under different onion service addresses running on a Multiple Workstation setup.

=== Client Setup ===


{{Open /etc/tor/torrc}}

{{CodeSelect|code=
HidServAuth <onion-address> <auth-cookie>
}}

{{Reload Tor}}

Done.

== Notes about End-to-end security of Onion Services ==
Hidden services are not really "end-to-end" encrypted, they encrypted only Tor to End. (or "Tor to Tor") The communication between the browser or server and Tor is sent in clear text. This doesn't really constitute a security issue, as localhost (or Workstation to Gateway on an isolated network), is supposed to be secure. But it has some security implications:

With onion services alone, without TLS enabled, the adversary only needs to compromise Whonix-Gateway to get knowledge of the content of the connection and the clients identity/location. To compromise the content of the connection, the adversary only needs to compromise either the gateway or the workstation.

With onion services, and TLS enabled, an adversary needs to compromise Whonix-Workstation to gain knowledge of the content of the connection. The adversary would have to compromise Whonix-Gateway as well, to gain knowledge of the client's identity/location.

It is possible to use onion services and TLS at the same time, i.e. https://****************.onion. There are only a very few onion services reachable over TLS. For example https://pad.riseup.net/ can be reached over https://5jp7xtmox6jyoqd5.onion/. But since this only offers benefits to users of Whonix (and other Tor gateway implementations), there is no demand. It would provide some nice defense in depth as it eliminates a single point of failure.

It would open the question, how would the certificate be verified?

That's simple for private sites, where server and clients know each other. They simply verify it over preshared secure channel, for example, a meeting.

And public onion services? It is unlikely, that certificate authorities will give out certificates for .onion sites. Startssl.com declined, because .onion is no .gTLD, see [https://trac.torproject.org/projects/tor/ticket/6116 Bug #6116: apply for .onion gTLD at IANA]. Although you could try asking other certificate authorities, if they offer SSL certificates for people who can prove that they own a .onion domain. You can prove, that you have control over the domain by editing its contents on their request.

But CAs should not be relied on anyway. See chapter [[SSL]].

Onion Services with Whonix are still safer than running Tor and the server software on the same host, because even when misconfigured, there can be, by design, no IP or DNS leaks.

== See Also ==
* [[Hosting_Location_Hidden_Services|Hosting Location Hidden Services]]
* [[Onion_Services_Guides|Onion Services Guides]]

= References =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
