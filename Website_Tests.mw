{{Title|title=
Website Tests / Server Tests
}}
{{Header}}
{{#seo:
|description=hardenize.com / securityheaders.com / Mozilla Observatory / SSL Labs / hstspreload.org
}}

{{stub}}

= Introduction =
Security is not a checklist. Security is not about making websites show a lot green and no red at all. The context is important. This is a bit similar to [[Browser Tests]]. There are many false positives.

SSL certificate, HSTS, (CAA) Policy, Expect-CT header, DNSSEC, <u>C</u>ontent <u>S</u>ecurity <u>P</u>olicy (CSP), Feature-Policy, MTA-STS, TLS-RPT, DANE, SPF, DKIM, DMARC, Frame Options, XSS Protection, Content Type Options are all nice sounding and nice to have website or server security features.

While website test websites such as hardenize.com are amazing tools for website owners helping to check security features, these tests say little about the security of the server. Such tests cannot check if kernel, operating system and web app upgrades are up to date or neglect, if SSH is configured for public key authentication only, if the server is [[Kicksecure]] hardened, backups are being made and so forth.

For example at time of writing the Microsoft website did not have a CSP, neither DNSSEC, nor DANE and a C level securityheaders.com rating. Does this mean that the Microsoft website gets hacked every year and spreads malicious software uploaded by unauthorized third parties? No. <ref>
* https://web.archive.org/web/20201213150857/https://www.hardenize.com/report/microsoft.com/1607820284
* https://web.archive.org/web/20201213145224/https://securityheaders.com/?q=microsoft.com&followRedirects=on
</ref>

See also [[Privacy Policy Technical Details]], [[Privacy Policy Technical Details#website|Privacy on the {{project_name}} Website]], 
[[Trust#Trusting_the_{{project_name}}_.E2.84.A2_Website|Trusting the {{project_name}} Website]] and [[Trust#Distrusting_Infrastructure|Distrusting Infrastructure]].

= hardenize.com =
https://www.hardenize.com/report/whonix.org/1607868311

https://forums.whonix.org/t/no-clean-hsts-preload-dnssec/10255

https://forums.whonix.org/t/expect-ct-security-header-for-whonix-org/10286

= SSL Labs =
https://www.ssllabs.com/ssltest/analyze.html?d={{project_clearnet}}

= hstspreload.org =
https://hstspreload.org/?domain={{project_clearnet}}

= Email DANE =
<blockquote>Email DANE (SMTP)

DNS-based Authentication of Named Entities (DANE) is a bridge between DNSSEC and TLS. In one possible scenario, DANE can be used for public key pinning, building on an existing publicly-trusted certificate. In another approach, it can be used to completely bypass the CA ecosystem and establish trust using DNSSEC alone.
Feature not implemented or disabled
Your server doesn't support this feature.</blockquote>

The <code>{{project_clearnet}}</code> website doesn't offer free or paid e-mail accounts. The extend in which <code>{{project_clearnet}}</code> uses e-mail:

* Sends e-mails to wiki editors who signed up to be notified about changes.
* Forum e-mail sign-up and notifications.
* [[Mailing Lists]]
* Developer accounts.

Even if e-mail security was "perfected", even if the DANE test would pass on website tests, it should not be relied on DANE. Better use end-to-end encryption such as [[OpenPGP]] or even better such as [[codecrypt]].

= Website DANE =
See [[Dev/About_Infrastructure#DANE_TLSA|DANE TLSA References]]. Quote [https://forums.whonix.org/t/dane-tlsa-dns-based-authentication-of-named-entities-for-whonix-org/10218 DANE TLSA (DNS-based Authentication of Named Entities) for whonix.org]:

<blockquote>For now decided not to implement it due to:

* low adaption
* no support in major browsers
* complex, maintenance demanding setup</blockquote>

= Content-Security-Policy CSP =
== Threat Model ==
So what is a CSP? CSP stands for <u>C</u>ontent <u>S</u>ecurity <u>P</u>olicy. "Something about server security." More detailed below. It follows a [https://owasp.org/www-community/attacks/Content_Security_Policy Quote from OWASP] which sounds accurate but too abstract to make head or tail of it.

<blockquote>Is a W3C specification offering the possibility to instruct the client browser from which location and/or which type of resources are allowed to be loaded. To define a loading behavior, the CSP specification use “directive” where a directive defines a loading behavior for a target resource type.

Directives can be specified using HTTP response header (a server may send more than one CSP HTTP header field with a given resource representation and a server may send different CSP header field values with different representations of the same resource or with different resources) or HTML Meta tag, the HTTP headers below are defined by the specs:</blockquote>

One use of a CSP is for a web server software (such as nginx) to tell the visitor's browser (such as Mozilla Firefox) what resources (speak HTML, JavaScript, images) to load from which authorized sources. This is an interesting, nuanced threat model. How can the CSP, something running on the web server software, provide additional security for the very web server software it is running on? At first sight, this seems impossible. However, there is a point. Webapps nowadays are very complex, speak prone to software bugs and security vulnerabilities. It might be the case that a webapps is functioning unexpected due to a bug or even compromised because an attacker exploited a vulnerability in the webapp. However, a compromised webapp doesn't necessarily equal web server software (such as nginx) compromise, let alone whole server (root) compromise. The webapp might be functioning unexpected or be compromised, but the web server software might still be functioning according to specifications. Under such conditions, the CSP can limit what the webapp (or rather the results of the output of the webapp processed by the visitor's browser) can do. For example the CSP as enforced by the web server software can prohibit<ref>
The CSP is actually a recommendation for the browser. However, writing the following would be confusing.
<blockquote>For example the CSP as enforced by the web server software can recommend the browser to not load content from external websites and the browser would honor this advice.</blockquote>
</ref> the browser from loading content from third party websites. In some cases, some webapp vulnerabilities might be made less useful or even be rendered useless. A CSP aims to contain faulty or compromised webapps.

You see how nuanced the threat model is. A faulty or compromised webapp being contained. Wouldn't it be better to avoid faulty or web app compromise to being with? Of course.

Forum discussion: [https://forums.whonix.org/t/content-security-policy-now-deployed-on-whonix-websites/5494 Content-Security-Policy now deployed on Whonix websites]

== {{project_name_short}} ==
<code>{{project_clearnet}}</code> has an essential CSP. It is useful for <code>{{project_clearnet}}</code> onion domain to avoid loading resources from <code>{{project_clearnet}}</code> clearnet domain to avoid browser mixed content warnings. It is helpful to avoid clearnet connections for visitors who prefer using the onion version of {{project name}} website because modern webapps are not designed for being used on multiple domain names with the same database backend and/or use for with onion domains generally.

<code>{{project_clearnet}}</code> however doesn't have yet a CSP without 'unsafe-inline', 'unsafe-eval' eval for all webapps yet.

<blockquote>
* This policy contains 'unsafe-inline' which is dangerous in the script-src directive.
* This policy contains 'unsafe-eval' which is dangerous in the script-src directive.
* This policy contains 'unsafe-inline' which is dangerous in the style-src directive.
</blockquote>

Users who have NoScript in their browser enabled are unaffected.

== Homepage ==
[https://securityheaders.com/?q=whonix.org&followRedirects=on Quote securityheaders.com] for {{project name}} website component, homepage.

== Forums ==
[https://securityheaders.com/?q=forums.whonix.org&followRedirects=on Quote securityheaders.com for {{project name}} website component, discourse forums].

CSP is implemented by the developers of the webapp, discourse. (Feature request for [https://meta.discourse.org/t/mitigate-xss-attacks-with-content-security-policy/104243/24 Discourse Forums Permissions-Policy].)

([https://securityheaders.com/?q=meta.discourse.org&followRedirects=on Quote securityheaders.com for upstream meta.discourse.org])

== Phabricator ==
[https://securityheaders.com/?q=https%3A%2F%2Fphabricator.whonix.org%2F&followRedirects=on phabricator]

([https://securityheaders.com/?q=https%3A%2F%2Fsecure.phabricator.com%2F&followRedirects=on Quote securityheaders.com for upstream phabricator])

== Wiki ==
[https://securityheaders.com/?q=https%3A%2F%2Fwww.whonix.org%2Fwiki%2FMain_Page&followRedirects=on {{project name}} website component, wiki]

([https://securityheaders.com/?q=mediawiki.org&followRedirects=on Quote securityheaders.com for upstream mediawiki.org] / ([https://securityheaders.com/?q=wikipedia.org&followRedirects=on Quote securityheaders.com for wikipedia.org])

= gzip =
Not security relevant. Performance only.

https://onionheaders.website shows gzip is disabled but checking with <code>curl</code> shows it is actually enabled. As per [https://davidwalsh.name/check-gzip curl gzip test instructions].

{{CodeSelect|code=
torsocks curl -H "Accept-Encoding: gzip" --head http://dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion/wiki/Documentation
}}

Output includes.

<blockquote>Content-Encoding: gzip</blockquote>

= Comparison with Others =
Before demanding what <code>{{project_clearnet}}</code> website ought to implement, and might not do yet due to lack of resources, please compare with much better funded organizations for a fair comparison.

* [https://www.hardenize.com/report/microsoft.com/1607820284 multi billion company, Microsoft, hardenize.com]
* [https://securityheaders.com/?q=microsoft.com&followRedirects=on multi billion company, Microsoft, securityheaders.com]
* [https://www.hardenize.com/report/torproject.org/1607868814#www_hsts The Tor Project, hardenize.com]
* [https://securityheaders.com/?q=wikipedia.org&followRedirects=on Wikipedia, securityheaders.com]
* [https://securityheaders.com/?q=mediawiki.org&followRedirects=on mediawiki.org, securityheaders.com]
* [https://securityheaders.com/?q=https%3A%2F%2Fmeta.discourse.org&followRedirects=on Discourse, securityheaders.com]

= See Also =
* [[Privacy Policy Technical Details]]
* [[Trust#Trusting_the_{{project_name}}_.E2.84.A2_Website|Trusting the {{project_name}} Website]]
* [[Trust#Distrusting_Infrastructure|Distrusting Infrastructure]]

= Footnotes  =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
