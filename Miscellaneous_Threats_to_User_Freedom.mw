{{Header}}
{{#seo:
|description=Tivoization, malicious features, antifeature, tyrant software, treacherous computing, digital restrictions management (DRM), non-root enforcement
|image=https://www.{{project_clearnet}}/w/images/7/70/Threats123123.jpg
}}
{{title|title=
Miscellaneous Threats to User Freedom
}}
[[image:Threats123123.jpg|thumb]]
= User Freedom Threats =

Since the inception of the four original essential software freedoms provided by [https://forums.whonix.org/t/lets-call-it-freedom-software-rather-than-free-software-or-open-source/6961 Freedom Software], other issues have emerged such as:

* [https://en.wikipedia.org/wiki/Tivoization tivoization] <ref><blockquote>Tivoization is the creation of a system that incorporates software under the terms of a copyleft software license (like the GPL), but uses hardware restrictions or digital rights management to prevent users from running modified versions of the software on that hardware. Richard Stallman coined the term in reference to TiVo's use of GNU GPL licensed software on the TiVo brand digital video recorders (DVR), which actively blocks users from running modified software on its hardware by design.</blockquote></ref>
* malicious features (examples: [https://www.gnu.org/proprietary/malware-apple.html macOS] and [https://www.gnu.org/proprietary/malware-microsoft.html Windows])
* [https://directory.fsf.org/wiki/Free_Software_Directory:Antifeatures antifeatures] <ref>
<blockquote>Antifeatures are flags applied to applications to warn of issues that may be undesirable from the user's perspective. Frequently it is behavior that benefits the developer, but that the end user of the software would prefer not to be there.</blockquote>
</ref> <ref>
https://f-droid.org/en/docs/Anti-Features/ 
</ref>
* [https://www.gnu.org/proprietary/proprietary-tyrants.html tyrant software]
* [https://www.fsf.org/campaigns/drm.html treacherous computing] a.k.a. [https://en.wikipedia.org/wiki/Digital_rights_management digital rights management (DRM)] <ref><blockquote>Digital rights management (DRM) tools or technological protection measures (TPM) are a set of access control technologies for restricting the use of proprietary hardware and copyrighted works. DRM technologies try to control the use, modification, and distribution of copyrighted works (such as software and multimedia content), as well as systems within devices that enforce these policies.</blockquote></ref>
* compilation toolchain issues ([[Dev/VirtualBox#VirtualBox_Unavailable_in_Debian_stable_and_backports_due_to_Debian_Stable_Security_Maintenance_Issues|example]])
* non-root enforcement
* Freedom Software clients requiring the use of non-freedom servers / APIs
* centralization being encouraged instead of federation and decentralization (such as Signal)
* insistence upon the provision of a mobile number for sign-up ([[Phone_Number_Validation|Phone Number Validation vs User Privacy]])

The {{Project name}} project does not currently have a policy prohibiting discussion of any applications with these traits.

== Beyond Licensing ==
It is important to examine the objectives of the entities backing up a software project even if the code is apparently released under an open license. The impact on users' freedom in the future is at stake as a captive market is a winner takes all scenario. Examples:

* Mono (Microsoft's .NET implementation for Linux) was released under dubious language concerning patent assertion, allowing Microsoft to arbitrarily enforce them if advantageous. Had there been high adoption of Mono, it would have given Microsoft enormous leverage over the language's ecosystem. The libre community did not take the bait and shunned the framework. Even though the patent situation changed recently, the well had been poisoned.<ref>https://en.wikipedia.org/wiki/Mono_%28software%29#Mono_and_Microsoft's_patents</ref> The SCO patent trolling used by Microsoft as an attempt to kill off Linux in the 2000s, was not forgotten.

* GCC vs Clang-LLVM: LLVM was initially heavily funded by Apple in retaliation for GCC re-licensing under GPLv3. The permissive licensing, while technically libre, allows companies to close up forks or mandate non-free plugins, locking users in on hardware platforms which would usher a new dark age for libre software development and porting along with the security and trust issues that that would also cause. Industry players couldn't pull off these shenanigans for the longest time because re-inventing another compiler with the same feature-set and architecture support as GCC was cost prohibitive. The widely cited consensus is that the competition has had a healthy outcome for GCC, leading to improved error codes, performance and features like plugin support - albeit carefully, to prevent closed plugins from piggy-backing on the compiler. However another aspect is that compiler specific quirks act as a "network effect" where if one component of a project only works with LLVM, the rest of the project follows with no interest from the developers to fix bugs or work on compatibility with GCC, for example Libreoffice (on Windows) is switching to Clang because the the Skia renderer will only compile with it.<ref>https://www.phoronix.com/scan.php?page=news_item&px=LibreOffice-Needs-Windows-Clang</ref> Over time, this could drain resources from the copyleft GCC as corporations and distros conclude it is not cost effective to contribute to a compiler with shrinking market share.

{{Anchor|chromium}}
* Chromium greatly amplifies Google's influence and ability to impose their custom standards and protocols, web standards and freedom be damned.<ref> http://robert.ocallahan.org/2014/08/choose-firefox-now-or-later-you-wont.html</ref> They repeatedly snub and bypass the W3C standard body especially when improvements to user privacy are proposed.<ref>https://www.bloomberg.com/news/articles/2019-09-24/google-blocks-privacy-push-at-the-group-that-sets-web-standards</ref> The features they design makes performance notably worse in competing browsers.<ref>https://arstechnica.com/gadgets/2018/12/the-web-now-belongs-to-google-and-that-should-worry-us-all/</ref> As currently planned, when released, new API limitations will prevent current and even possible future rewrites of adblockers. No attempt to address these concerns have been made by the Chromium devs.<ref>https://mspoweruser.com/google-may-make-adblocking-impossible-on-edge-and-chrome/</ref><ref>https://bugs.chromium.org/p/chromium/issues/detail?id=896897&desc=2#c23</ref> Every Firefox install gives Mozilla a bit more leverage and ad money from Google. The less people use Firefox, the less website creators will care to invest into developing websites for compatibility, thus killing it off indirectly. If Mozilla's revenue dies and they close shop, Tor Browser goes with it, destroying a key component of the privacy ecosystem. The Chromium engine as is now, is not usable by privacy projects to give equivalent protections as Firefox nor are they willing to change their design to accommodate such initiatives.

== Tyrant Security vs Freedom Security ==
* Freedom Security:
** Freedom Software / Open Source.
** These are security features which do not intentionally restrict user customization.

* Tyrant Security:
** Many popular device operating systems utilize security technologies which undermine the security of the user against meddling and surveillance by the vendor while suppressing user freedom. Most Android phones and iPhone devices are a great example. For the sake of simplification of this argument, users of forks based on Android AOSP and security/privacy focused Android forks, such as GrapheneOS, are exempt from this chapter. This is about the 99% of phones which most laymen use. These operating systems include many security features to keep users safe from unauthorized third parties outside the ecosystem of the vendor.
** These devices have privacy intrusive default settings which users are often unaware off nor can be disabled. In most cases the user cannot choose from which vendor the user wishes to install (security) upgrades from. Customization of these devices is also limited. For example many pre-installed applications often called bloatware cannot be uninstalled or at least hidden from view.
** By restricting freedom to modify the underlying operating system, vendors leave users who want to take control of their system no other options than running exploits or jail-breaking suites from untrusted origins which endangers the integrity of their personal devices. While security from unauthorized third parties might be good, security from the vendor itself is low. This is elaborated in chapter [[Dev/mobile#Android_Privacy_Issues_and_User_Freedom_Restrictions|Android Privacy Issues and User Freedom Restrictions]].
** Word definitions:
*** tyrant: The Free Software Foundation (FSF) used the word "tyrant" and defined it in [https://www.gnu.org/proprietary/proprietary-tyrants.html this article] to refer to devices that refuse to allow the user to modify the software or run what they please. It approximates the definition in which the word tyrant is used context of usage here.
*** anti-features: A feature that a fully aware user would rather not have. The F-Droid project has a nice [https://f-droid.org/en/docs/Anti-Features/ catalog of undesirable software behaviors] (however a few items might be pushing the definition of anti-feature).

= See Also =
* [[Policy On Nonfreedom Software|Policy on Non-Freedom Software]]
* [[Warning#Unsubstantiated_Conclusions|Unsubstantiated Conclusions]]
* [[Avoid_nonfreedom_software|Avoid Non-Freedom Software]]
* [[Why_{{project_name_short}}_is_Freedom_Software|Why {{project name}} is Freedom Software]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
