{{Header}}
{{#seo:
|description=Tivoization, malicious features, antifeature, tyrant software, treacherous computing, digital restrictions management (DRM), Software as a Service (SaaS), Service as a Software Substitute (SaaSS), non-root enforcement
|image=https://www.{{project_clearnet}}/w/images/7/70/Threats123123.jpg
}}
{{title|title=
General Threats to User Freedom
}}
[[image:Threats123123.jpg|thumb]]
= User Freedom Threats =

Since the inception of the four original essential software freedoms provided by [https://forums.whonix.org/t/lets-call-it-freedom-software-rather-than-free-software-or-open-source/6961 Freedom Software], other issues have emerged such as:

<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* <u>Locked bootloaders</u>: Devices prohibiting the user from installing alternative operating systems which are not certified by the hardware vendor.
* <u>Non-root enforcement</u>: Denying root access to users.
* [https://en.wikipedia.org/wiki/Tivoization <u>Tivoization</u>] <ref>
<blockquote>Tivoization is the creation of a system that incorporates software under the terms of a copyleft software license (like the GPL), but uses hardware restrictions or digital rights management to prevent users from running modified versions of the software on that hardware. Richard Stallman coined the term in reference to TiVo's use of GNU GPL licensed software on the TiVo brand digital video recorders (DVR), which actively blocks users from running modified software on its hardware by design.</blockquote>
</ref>
* <u>Malicious features</u>: examples include [[Host_Operating_System_Selection#macOS_Hosts|macOS]] and [[Windows_Hosts|Windows]]
* [https://directory.fsf.org/wiki/Free_Software_Directory:Antifeatures <u>antifeatures</u>]; <ref>
<blockquote>Antifeatures are flags applied to applications to warn of issues that may be undesirable from the user's perspective. Frequently it is behavior that benefits the developer, but that the end user of the software would prefer not to be there.</blockquote>
</ref> <ref>
https://f-droid.org/en/docs/Anti-Features/ 
</ref>
* [https://www.gnu.org/proprietary/proprietary-tyrants.html <u>Tyrant software</u>]
* [https://www.fsf.org/campaigns/drm.html <u>Treacherous computing</u>]: a.k.a. [https://en.wikipedia.org/wiki/Digital_rights_management <u>D</u>igital <u>R</u>ights <u>M</u>anagement (DRM)] <ref>
<blockquote>Digital rights management (DRM) tools or technological protection measures (TPM) are a set of access control technologies for restricting the use of proprietary hardware and copyrighted works. DRM technologies try to control the use, modification, and distribution of copyrighted works (such as software and multimedia content), as well as systems within devices that enforce these policies.</blockquote>
</ref> ([https://www.defectivebydesign.org/ <u>D</u>igital <u>R</u>estrictions <u>M</u>anagement])
* <u>Compilation toolchain issues</u>: [[Dev/VirtualBox#VirtualBox_Unavailable_in_Debian_stable_and_backports_due_to_Debian_Stable_Security_Maintenance_Issues|example]]
* <u>SaaS</u>: (<u>S</u>oftware <u>a</u>s <u>a</u> <u>S</u>ervice) / SaaSS (<u>S</u>ervice <u>a</u>s <u>a</u> <u>S</u>oftware <u>S</u>ubstitute)
** [https://www.gnu.org/philosophy/network-services-arent-free-or-nonfree.en.html Network Services Aren't Free(dom) or Nonfree(dom); They Raise Other Issues]
** [https://www.gnu.org/philosophy/who-does-that-server-really-serve.en.html Who does that server really serve?]
* <u>Non-freedom servers / APIs</u>: Freedom Software clients requiring the use of non-freedom servers / APIs
* <u>Enforced centralization</u>: centralization being encouraged instead of federation and decentralization (for example Signal Private Messenger)
* <u>Mobile number requirement</u>: insistence upon the provision of a mobile number for sign-up ([[Phone_Number_Validation|Phone Number Validation vs User Privacy]])
</div>

The {{Project name}} project does not currently have a policy prohibiting discussion of any applications with these traits.

= Beyond Licensing =

It is important to examine the objectives of the entities backing up a software project even if the code is apparently released under an open license. The impact on users' freedom in the future is at stake as a captive market is a winner takes all scenario. Consider the examples below.

== Mono: Microsoft's .NET Implementation for Linux ==

Mono was released under dubious language concerning patent assertion, allowing Microsoft to arbitrarily enforce them if advantageous. If there had been high adoption of Mono, it would have given Microsoft enormous leverage over the language's ecosystem. Fortunately, the libre community did not take the bait and shunned the framework. Even though the patent situation changed recently, the well had been poisoned. <ref>https://en.wikipedia.org/wiki/Mono_%28software%29#Mono_and_Microsoft's_patents</ref> The SCO patent trolling used by Microsoft as an attempt to kill off Linux in the 2000s was not forgotten.

== GCC vs Clang-LLVM == 

[https://llvm.org/ LLVM] <ref>The LLVM compiler infrastructure project is a collection of modular, reusable compiler and toolchain technologies.</ref> was initially heavily funded by Apple in retaliation for the [https://gcc.gnu.org/ GNU Compiler Collection (GCC)] re-licensing under [https://www.gnu.org/licenses/gpl-3.0.en.html GPLv3]. While the permissive licensing is technically libre, it allows companies to close up forks or mandate non-free plugins. This locks in users on hardware platforms which would usher in a new dark age for libre software development and porting, and also lead to significant security and trust issues. 

This unscrupulous conduct by industry players was not possible for the longest time because re-inventing another compiler with the same feature-set and architecture support as GCC was cost prohibitive. The widely cited consensus is that the competition has had a healthy outcome for GCC, leading to improved error codes, performance and features like plugin support - albeit carefully, to prevent closed plugins from piggy-backing on the compiler. However, another aspect is that compiler-specific quirks act as a "network effect" whereby if one component of a project only works with LLVM, the rest of the project follows with no interest from the developers to fix bugs or work on compatibility with GCC. For example, Libreoffice (on Windows) is switching to Clang because the the Skia renderer will only compile with it. <ref>https://www.phoronix.com/scan.php?page=news_item&px=LibreOffice-Needs-Windows-Clang</ref> Over time, this could drain resources from the copyleft GCC as corporations and distributions conclude it is not cost effective to contribute to a compiler with shrinking market share.

= Chromium =
{{Anchor|chromium}}
Chromium greatly amplifies Google's influence and ability to impose their custom standards and protocols, including on web standards; the impacts on freedom are unconsidered. <ref>http://robert.ocallahan.org/2014/08/choose-firefox-now-or-later-you-wont.html</ref> Google repeatedly snub and bypass the W3C standard body especially when improvements to user privacy are proposed. <ref>https://www.bloomberg.com/news/articles/2019-09-24/google-blocks-privacy-push-at-the-group-that-sets-web-standards</ref> The features they design also make performance notably worse in competing browsers. <ref>https://arstechnica.com/gadgets/2018/12/the-web-now-belongs-to-google-and-that-should-worry-us-all/</ref> When released, the existing plan for new API limitations will prevent current and even possible future rewrites of adblockers. 

No attempt to address these concerns have been made by the Chromium developers. <ref>https://mspoweruser.com/google-may-make-adblocking-impossible-on-edge-and-chrome/</ref><ref>https://bugs.chromium.org/p/chromium/issues/detail?id=896897&desc=2#c23</ref> Every Firefox installation provides Mozilla with a bit more leverage and diverts advertisement money from Google. The less people use Firefox, the less website creators will care to invest into developing websites for compatibility, thus killing it off indirectly. If Mozilla's revenue dies and they cease to exist, Tor Browser will also disappear - destroying a key component of the privacy ecosystem. The present Chromium engine is unsuitable for privacy projects because it cannot provide equivalent Firefox protections, and there is no willingness to change the design to accommodate such initiatives.

= War on General Purpose Computing =
There is a war on general purpose computing. More and more electronic devices sold nowadays are actually general purpose computers, but by default come with artificial restrictions that impede user control over the devices, deny the ability to observe/modify what the vendor's code is doing and to perpetuate privacy violations from the said code or force users to buy more expensive models to get features they could have obtained had they been able to unleash the the full potential of the cheaper device.

Examples:

* TVs:
** [https://www.theguardian.com/technology/2015/feb/11/samsung-admits-smart-tvs-forcing-pop-up-ads-into-video-apps The Guardian: Samsung admits its smart TVs are forcing pop-up ads into video apps] (underline added):
*** <blockquote>The admission comes in a week that Samsung was forced to change its smart TV privacy policy, <u>which indicated the TV could be recording conversations and sending them to third parties</u>, provoking “Orwellian” complaints from critics.</blockquote>
** Almost 100,000 upvotes on reddit post [https://www.reddit.com/r/assholedesign/comments/co5aw4/unremovable_ads_on_my_2500_samsung_smart_tv/ Unremovable ads on my $2,500 Samsung Smart TV].
** Since TVs are in most people's living rooms and even bedrooms and the newer generation of nowadays smart TVs come with built-in cameras, microphones and are internet connected, it is crucial what software is running on them and if it serves the user or the producer. See also [https://www.washingtonpost.com/news/the-switch/wp/2017/03/07/why-the-cia-is-using-your-tvs-smartphones-and-cars-for-spying/ The Washington Post: WikiLeaks: The CIA is using popular TVs, smartphones and cars to spy on their owners] / [https://wikileaks.org/ciav7p1/ Vault 7: CIA Hacking Tools Revealed].
* PlayStation is actually a fully functional computer that could in theory run any program but in practice which programs or games can be run on it is solely decided by Sony, its producer.
* Restrictions in Mobile Devices:
** An unreasonable restriction is all the bloatware (unwanted default installed applications) which is running on most people's phones nowadays which cannot many users would like to uninstall but lack the technical skill to do so due to great artificially introduced technically difficulties in doing so.
** Another unreasonable restriction is for example is Google's ban in Android Play Store of YouTube downloaders such as TubeMate.
** Most iPhone / Android phones restrict the freedom of the user to choose which programs can run on these devices. Most phones that are sold by mobile carriers or manufacturers have locked bootloaders. These phones are often packaged with spyware installed by default, which cannot be removed.
** [https://qz.com/1169760/phone-data/ QZ: Google can still use Bluetooth to track your Android phone when Bluetooth is turned off]
** [https://www.zdnet.com/article/how-google-and-everyone-else-gets-wi-fi-location-data/ How Google--and everyone else--gets Wi-Fi location data]
*** <blockquote>How it works, according to Google, is that the Android Location Services periodically checks on your location using GPS, Cell-ID, and Wi-Fi to locate your device. When it does this, your Android phone will send back publicly broadcast Wi-Fi access points' Service set identifier (SSID) and Media Access Control (MAC) data. Again, this isn't just how Google does it; it's how everyone does it. It's Industry practice for location database vendors.</blockquote>
** [https://apnews.com/828aefab64d4411bac257a07c1af0ecb/AP-Exclusive:-Google-tracks-your-movements,-like-it-or-not AP Exclusive: Google tracks your movements, like it or not]
*** <blockquote>Google wants to know where you go so badly that it records your movements even when you explicitly tell it not to. An Associated Press investigation found that many Google services on Android devices and iPhones store your location data even if you’ve used a privacy setting that says it will prevent Google from doing so. Computer-science researchers at Princeton confirmed these findings at the AP’s request.</blockquote>
** There may be rare exceptions to this rule, hence "most" and not "all". These exceptions are not the point which shall be made in this comparison. See also [[Dev/mobile#Android_Privacy_Issues_and_User_Freedom_Restrictions|Android Privacy Issues and User Freedom Restrictions]].
** In summary, both, restrictions on applications which can/cannot be installed as well as which can/cannot be uninstalled are imposed. People are conditioned into more software freedom restrictions.
* UEFI SecureBoot is another stumbling stone which makes installation of Freedom Software operating systems as a replacement for Microsoft Windows more difficult on the Intel / AMD64 ("PC") computers.
* [[Out-of-band Management Technology]]
* Sophisticated civil drones run software which decides for the user where it can fly and where it cannot. For example it would refuse commands to fly into an airport area, which in this case is a reasonable restrictions but serves as an example how restricting general computers to serve limited purposes more and more.

Consumers own the hardware but they somehow do at the same time now own the hardware because they cannot control and/or audit what the software running on the devices is actually doing due to artificial restrictions imposed by the hardware vendor. Chapter [[#User Freedom Threats|User Freedom Threats]] lists some technologies used to restrict user freedom.

The fact, that highly technical people are often capable of circumventing some of these technical restrictions, if sufficiently motivated, is besides the point as the censor has succeeded in accomplishing their objective of blocking the majority of the population who do not have a sophisticated knowledge of technology.

The trend is clearly going into the direction of the general population of loosing access to general computing rather than more freedom. It won't be happening today, tomorrow or next year. It's a long term trend.

See also the presentation [https://longnow.org/seminars/02012/jul/31/coming-century-war-against-your-computer/ The Coming Century of War Against Your Computer] by Cory Doctorow hosted by Stewart Brand (EFF founding member) <ref>
[https://www.eff.org/history-protecting-freedom-where-law-and-technology-collide Quote eff.org]: <blockquote>The initial Board of Directors included John Perry, Mitch, John, Steve and Stewart Brand.</blockquote>
</ref>, [https://longnow.org/ The Long Now Foundation] / [https://www.youtube.com/watch?v=HUEvRyemKSg 28c3: The coming war on general computation].

= Conflict of Interest =
There is a conflict of interest between operating system vendors (stock ROM), custom operating system developers (custom ROM), application developers and users. This is a non-comprehensive list of interest of various parties.

Many application developers want:

* <u>Copyright protection</u>: Allow the user to stream/watch media (such as Netflix) but prohibit the user from retaining a copy or sharing the media with others.
* <u>Data collection</u>: As many information as possible (location, call history, browsing history, watch history and much more) for the purpose of market research, advertising, better prediction of user behavior and profit maximization.
* <u>Secrecy</u>: Prevent the user from learning details on what exactly the application is doing.
* <u>Integrity</u>: Prevent the user from making modifications to the application. Examples include
** Google Android enforcement of its YouTube app for free users to be unable to background play audio while the devices's screen locker is enabled.
** Freemium games want to prevent users getting items or playing levels which would otherwise only be accessible to paying customers.
** Multi-player games want to to prevent [https://en.wikipedia.org/wiki/Cheating_in_online_games cheating in online games].
** Banking apps want to confirm that the security model is intact to prevent fraud. It desires to check that no other installed applications can read to or write from the banking app's dedicated storage folder as well as that no malicious kernel module or other malware is running that could steal the user's login credentials or make unauthorized transactions.

Most operating system vendors for mobile devices (stock ROM) want:

* <u>Adoption</u>: Many users as possible to increase profit.
* <u>Attractiveness for application developers</u>: Many application developers to provide applications for their platform to attract more users.
* <u>Security</u>: Prevent any malicious and unapproved party from establishing a foothold in their ecosystem.

Some custom operating system vendors for mobile devices (custom ROM) want:

* Similar to most operating system vendors.
* <u>Hardware deals</u>: Getting recognition by a hardware producer that would pay for continued development and adjustment for their hardware.

Many users want:

* <u>Privacy</u>:
** Knowledge, control and minimization of data collection and sharing by applications.
** Prevent applications camera and/or voice recording them without their knowledge and consent, collecting their location history, exfiltration of contacts, media, messages and documents.
* <u>Control</u>: Have a basic understanding of and control what their devices are doing and limit applications to their purposes.
* <u>Audit</u>: Verify that applications are only doing what they say and what is expected from them.
* <u>Customization</u>: Application modifications such as for example patching the YouTube application on Google Android to enable background play.

= Sigstore =
Sigstore <ref>
https://www.sigstore.dev
</ref> <ref>
https://martinheinz.dev/blog/55
</ref> <ref>
https://martinheinz.dev/blog/56
</ref> <ref>
https://forums.whonix.org/t/sigstore-for-improving-verification-of-downloads/11536
</ref> is an industry-led initiative to create a chain of trust for software with the objective of accomplishing something similar to what Let's Encrypt had done for website TLS certificates. On face value, having a curated transparency log for all Linux software and enforcing that only digital signature signed processes run (as part of [[Verified Boot]]) seems good, but the devil is in the details. A developer would need to authenticate with an OpenID Connect (OIDC) provider such as Google or GitHub to verify ownership of their email address and possession of previously generated keys. This centralizes trust and would make it trivial for these corporations to censor publishing code they find disagreeable as they are the self-appointed gatekeepers of verification.

An example of software banned by github includes [[youtube-dl|<code>youtube-dl</code>]], a [[YouTube]] video download utility ([https://youtube-dl.org/ homepage], [https://en.wikipedia.org/wiki/Youtube-dl wikipedia]). As torrentfreak reported, [https://torrentfreak.com/github-warns-users-reposting-youtube-dl-they-could-be-banned-201102/ GitHub Warns Users Reposting YouTube-DL They Could Be Banned]. As [https://en.wikipedia.org/wiki/Youtube-dl#RIAA_takedown_request mentioned] in Wikipedia, this was due to a request by the Recording Industry Association of America (RIAA). Fast forward, <code>youtube-dl</code> is now available again on github but this just one of many examples that there are issues.

Publisher anonymity may become impossible as most of the aforementioned entities require invasive proof of identity to allow signing up to their services. While the governance structure allows for multiple developers from different companies to play key roles in a rotating fashion, it is questionable how independent they can really be if pressure comes to bear on following certain orders or risk losing employment or promotion.

Hence it is reasonable to conclude that Sigstore will play a role in the [[#War on General Purpose Computing|War on General Purpose Computing]] and further limit which devices laymen users can run programs on without restrictions imposed by the operating system vendor. It might result in as a subversive attempt by corporate interests to create a walled garden that allows only certain "approved code" to run on Freedom Software systems as opposed to the decentralized distribution repository system that all Linux desktop distributions are using nowadays.

Such a design also raises questions about the integrity of the transparency log should one of the OpenID providers become compromised. Freedom Software developers and operating system maintainers would do well to steer clear from Sigstore.

= Freedom vs Tyrant Security =

'''Table:''' ''Freedom vs Tyrant Security'' 

{| class="wikitable"
|-

! scope="col"| '''Category'''
! scope="col"| '''Description'''
|-

! scope="row"| '''Freedom (Open Source) Security''' <ref>[https://forums.whonix.org/t/lets-call-it-freedom-software-rather-than-free-software-or-open-source/6961 Freedom Software] / Open Source.</ref>
| 

|-

! scope="row"| Disk Encryption
| Disk encryption keys are under the sole control of the user.

|-

! scope="row"| End-to-end (E2E) Encryption
| End-to-end encryption keys are under the sole control of the user.

|-

! scope="row"| Security Features
| Security features are available which do not intentionally restrict user customization.

|-

! scope="row"| User Freedoms
| User freedom restrictions are intentionally minimized.

|-

! scope="row"| '''Tyrant Security''' 
| 
|-

! scope="row"| Default Privacy, Security and Customization Settings
| 
* These devices have privacy-intrusive default settings that most users are unaware of and which cannot be disabled. 
* In most cases the user cannot choose the vendor they wish to install (security) upgrades from. 
* Customization of these devices is also limited. For example, many pre-installed applications (often referred to as "bloatware") cannot be uninstalled or at least be hidden from view.

|-

! scope="row"| Definitions
| 
* Tyrant: The Free Software Foundation (FSF) uses the word "tyrant" and has defined it in [https://www.gnu.org/proprietary/proprietary-tyrants.html this article]. It refers to devices that refuse to allow the user to modify the software or run what they please. This definition approximates the way it is used in this entry.
* Anti-features: A feature that a fully aware user would rather not have. The F-Droid project has a nice [https://f-droid.org/en/docs/Anti-Features/ catalog of undesirable software behaviors], however a few items might be pushing the boundaries of a true anti-feature.

|-

! scope="row"| Operating System Selection
| 
* The freedom to modify the underlying operating system is restricted.
* Vendors force users who want greater system control to run exploits or jail-breaking suites from untrusted origins, which endangers the integrity of personal devices. 
* While the security provided by unauthorized third parties might be good, security from the vendor itself is poor. This is further elaborated here: [[Dev/mobile#Android_Privacy_Issues_and_User_Freedom_Restrictions|Android Privacy Issues and User Freedom Restrictions]].

|-

! scope="row"| Security Technologies
| 
* Many popular device operating systems utilize security technologies which undermine the security of the user against meddling and surveillance by the vendor, while suppressing user freedoms. A classic example is most Android phones and iPhone devices. 
* Although an over-simplified argument, users of forks based on the Android Open Source Project ([https://source.android.com/ AOSP]) and security/privacy-focused Android forks (like [https://grapheneos.org/ GrapheneOS]), are exempt from the criticisms in this section. <ref>Unfortunately, perhaps 99% of laymen utilize stock operating systems with their phone.</ref> These operating systems include many security features to keep users safe from unauthorized third parties outside the ecosystem of the vendor.

|-

|}

= See Also =
* [[Policy On Nonfreedom Software|Policy on Non-Freedom Software]]
* [[Warning#Unsubstantiated_Conclusions|Unsubstantiated Conclusions]]
* [[Avoid_nonfreedom_software|Avoid Non-Freedom Software]]
* [[Reasons for Freedom Software|Why {{project name}} is Freedom Software]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
