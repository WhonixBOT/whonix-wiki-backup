{{Header}}
{{#seo:
|description=Tivoization, malicious features, antifeature, tyrant software, treacherous computing, digital restrictions management (DRM), Software as a Service (SaaS), Service as a Software Substitute (SaaSS), non-root enforcement
|image=https://www.{{project_clearnet}}/w/images/7/70/Threats123123.jpg
}}
{{title|title=
General Threats to User Freedom
}}
[[image:Threats123123.jpg|thumb]]
= User Freedom Threats =

Since the inception of the four original essential software freedoms provided by [https://forums.whonix.org/t/lets-call-it-freedom-software-rather-than-free-software-or-open-source/6961 Freedom Software], other issues have emerged such as:
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* [https://en.wikipedia.org/wiki/Tivoization tivoization] <ref>
<blockquote>Tivoization is the creation of a system that incorporates software under the terms of a copyleft software license (like the GPL), but uses hardware restrictions or digital rights management to prevent users from running modified versions of the software on that hardware. Richard Stallman coined the term in reference to TiVo's use of GNU GPL licensed software on the TiVo brand digital video recorders (DVR), which actively blocks users from running modified software on its hardware by design.</blockquote>
</ref>
* malicious features (examples: [[Host_Operating_System_Selection#macOS_Hosts|macOS]] and [[Windows_Hosts|Windows]])
* [https://directory.fsf.org/wiki/Free_Software_Directory:Antifeatures antifeatures] <ref>
<blockquote>Antifeatures are flags applied to applications to warn of issues that may be undesirable from the user's perspective. Frequently it is behavior that benefits the developer, but that the end user of the software would prefer not to be there.</blockquote>
</ref> <ref>
https://f-droid.org/en/docs/Anti-Features/ 
</ref>
* [https://www.gnu.org/proprietary/proprietary-tyrants.html tyrant software]
* [https://www.fsf.org/campaigns/drm.html treacherous computing], a.k.a. [https://en.wikipedia.org/wiki/Digital_rights_management <u>D</u>igital <u>R</u>ights <u>M</u>anagement (DRM)] <ref>
<blockquote>Digital rights management (DRM) tools or technological protection measures (TPM) are a set of access control technologies for restricting the use of proprietary hardware and copyrighted works. DRM technologies try to control the use, modification, and distribution of copyrighted works (such as software and multimedia content), as well as systems within devices that enforce these policies.</blockquote>
</ref> ([https://www.defectivebydesign.org/ <u>D</u>igital <u>R</u>estrictions <u>M</u>anagement])
* compilation toolchain issues ([[Dev/VirtualBox#VirtualBox_Unavailable_in_Debian_stable_and_backports_due_to_Debian_Stable_Security_Maintenance_Issues|example]])
* SaaS (<u>S</u>oftware <u>a</u>s <u>a</u> <u>S</u>ervice) / SaaSS (<u>S</u>ervice <u>a</u>s <u>a</u> <u>S</u>oftware <u>S</u>ubstitute)
** [https://www.gnu.org/philosophy/network-services-arent-free-or-nonfree.en.html Network Services Aren't Free(dom) or Nonfree(dom); They Raise Other Issues]
** [https://www.gnu.org/philosophy/who-does-that-server-really-serve.en.html Who does that server really serve?]
* Freedom Software clients requiring the use of non-freedom servers / APIs
* non-root enforcement
* centralization being encouraged instead of federation and decentralization (such as Signal)
* insistence upon the provision of a mobile number for sign-up ([[Phone_Number_Validation|Phone Number Validation vs User Privacy]])
</div>
The {{Project name}} project does not currently have a policy prohibiting discussion of any applications with these traits.

== Beyond Licensing ==

It is important to examine the objectives of the entities backing up a software project even if the code is apparently released under an open license. The impact on users' freedom in the future is at stake as a captive market is a winner takes all scenario. Consider the examples below.

=== Mono: Microsoft's .NET Implementation for Linux ===

Mono was released under dubious language concerning patent assertion, allowing Microsoft to arbitrarily enforce them if advantageous. If there had been high adoption of Mono, it would have given Microsoft enormous leverage over the language's ecosystem. Fortunately, the libre community did not take the bait and shunned the framework. Even though the patent situation changed recently, the well had been poisoned. <ref>https://en.wikipedia.org/wiki/Mono_%28software%29#Mono_and_Microsoft's_patents</ref> The SCO patent trolling used by Microsoft as an attempt to kill off Linux in the 2000s was not forgotten.

=== GCC vs Clang-LLVM === 

[https://llvm.org/ LLVM] <ref>The LLVM compiler infrastructure project is a collection of modular, reusable compiler and toolchain technologies.</ref> was initially heavily funded by Apple in retaliation for the [https://gcc.gnu.org/ GNU Compiler Collection (GCC)] re-licensing under [https://www.gnu.org/licenses/gpl-3.0.en.html GPLv3]. While the permissive licensing is technically libre, it allows companies to close up forks or mandate non-free plugins. This locks in users on hardware platforms which would usher in a new dark age for libre software development and porting, and also lead to significant security and trust issues. 

This unscrupulous conduct by industry players was not possible for the longest time because re-inventing another compiler with the same feature-set and architecture support as GCC was cost prohibitive. The widely cited consensus is that the competition has had a healthy outcome for GCC, leading to improved error codes, performance and features like plugin support - albeit carefully, to prevent closed plugins from piggy-backing on the compiler. However, another aspect is that compiler-specific quirks act as a "network effect" whereby if one component of a project only works with LLVM, the rest of the project follows with no interest from the developers to fix bugs or work on compatibility with GCC. For example, Libreoffice (on Windows) is switching to Clang because the the Skia renderer will only compile with it. <ref>https://www.phoronix.com/scan.php?page=news_item&px=LibreOffice-Needs-Windows-Clang</ref> Over time, this could drain resources from the copyleft GCC as corporations and distributions conclude it is not cost effective to contribute to a compiler with shrinking market share.

=== Chromium ===
{{Anchor|chromium}}
Chromium greatly amplifies Google's influence and ability to impose their custom standards and protocols, including on web standards; the impacts on freedom are unconsidered. <ref>http://robert.ocallahan.org/2014/08/choose-firefox-now-or-later-you-wont.html</ref> Google repeatedly snub and bypass the W3C standard body especially when improvements to user privacy are proposed. <ref>https://www.bloomberg.com/news/articles/2019-09-24/google-blocks-privacy-push-at-the-group-that-sets-web-standards</ref> The features they design also make performance notably worse in competing browsers. <ref>https://arstechnica.com/gadgets/2018/12/the-web-now-belongs-to-google-and-that-should-worry-us-all/</ref> When released, the existing plan for new API limitations will prevent current and even possible future rewrites of adblockers. 

No attempt to address these concerns have been made by the Chromium developers. <ref>https://mspoweruser.com/google-may-make-adblocking-impossible-on-edge-and-chrome/</ref><ref>https://bugs.chromium.org/p/chromium/issues/detail?id=896897&desc=2#c23</ref> Every Firefox installation provides Mozilla with a bit more leverage and diverts advertisement money from Google. The less people use Firefox, the less website creators will care to invest into developing websites for compatibility, thus killing it off indirectly. If Mozilla's revenue dies and they cease to exist, Tor Browser will also disappear - destroying a key component of the privacy ecosystem. The present Chromium engine is unsuitable for privacy projects because it cannot provide equivalent Firefox protections, and there is no willingness to change the design to accommodate such initiatives.

=== Sigstore ===

Sigstore <ref>
https://www.sigstore.dev
</ref> <ref>
https://martinheinz.dev/blog/55
</ref> <ref>
https://martinheinz.dev/blog/56
</ref> is an industry-led initiative to create a chain of trust for software with the objective of accomplishing something similar to what Let's Encrypt had done for website TLS certificate. On face value, having a curated transparency log for all Linux software seems good, but the devil is in the details. A developer would need to authenticate with an OpenID Connect (OIDC) provider such as Google or GitHub to verify ownership of their email address and possession of previously generated keys. This centralizes trust and would make it trivial for these corporations to censor publishing code they find disagreeable as they are the self-appointed gatekeepers of verification.

An example of software software banned by github includes <code>youtube-dl</code>, a YouTube video download utility ([https://youtube-dl.org/ homepage], [https://en.wikipedia.org/wiki/Youtube-dl wikipedia]). As torrentfreak reported, [https://torrentfreak.com/github-warns-users-reposting-youtube-dl-they-could-be-banned-201102/ GitHub Warns Users Reposting YouTube-DL They Could Be Banned]. As [https://en.wikipedia.org/wiki/Youtube-dl#RIAA_takedown_request mentioned] in wikipedia, this was due to a request by the Recording Industry Association of America (RIAA). Fast forward, <code>youtube-dl</code> is now available again on github but this just one of many examples that there are issues.

Publisher anonymity may become impossible as most of the aforementioned entities require invasive proof of identity to allow signing up to their services. While the governance structure allows for multiple developers from different companies to play key roles in a rotating fashion, it is questionable how independent they can really be if pressure comes to bear on following certain orders or risk losing employment or promotion.

Hence it is reasonable to conclude that Sigstore is a subversive attempt by corporate interests to create a walled garden that allows only certain "approved code" to run on FLOSS systems as opposed to the decentralized distro repo system we have in place now. Such a design also raises questions about the integrity of the transparency log should one of the OpenID providers becomes compromised. FLOSS devs and distro maintainers would do well to steer clear from Sigstore.

== Freedom vs Tyrant Security ==

'''Table:''' ''Freedom vs Tyrant Security'' 

{| class="wikitable"
|-

! scope="col"| '''Category'''
! scope="col"| '''Description'''
|-

! scope="row"| '''Freedom (Open Source) Security''' <ref>[https://forums.whonix.org/t/lets-call-it-freedom-software-rather-than-free-software-or-open-source/6961 Freedom Software] / Open Source.</ref>
| 

|-

! scope="row"| Disk Encryption
| Disk encryption keys are under the sole control of the user.

|-

! scope="row"| End-to-end (E2E) Encryption
| End-to-end encryption keys are under the sole control of the user.

|-

! scope="row"| Security Features
| Security features are available which do not intentionally restrict user customization.

|-

! scope="row"| User Freedoms
| User freedom restrictions are intentionally minimized.

|-

! scope="row"| '''Tyrant Security''' 
| 
|-

! scope="row"| Default Privacy, Security and Customization Settings
| 
* These devices have privacy-intrusive default settings that most users are unaware of and which cannot be disabled. 
* In most cases the user cannot choose the vendor they wish to install (security) upgrades from. 
* Customization of these devices is also limited. For example, many pre-installed applications (often referred to as "bloatware") cannot be uninstalled or at least be hidden from view.

|-

! scope="row"| Definitions
| 
* Tyrant: The Free Software Foundation (FSF) uses the word "tyrant" and has defined it in [https://www.gnu.org/proprietary/proprietary-tyrants.html this article]. It refers to devices that refuse to allow the user to modify the software or run what they please. This definition approximates the way it is used in this entry.
* Anti-features: A feature that a fully aware user would rather not have. The F-Droid project has a nice [https://f-droid.org/en/docs/Anti-Features/ catalog of undesirable software behaviors], however a few items might be pushing the boundaries of a true anti-feature.

|-

! scope="row"| Operating System Selection
| 
* The freedom to modify the underlying operating system is restricted.
* Vendors force users who want greater system control to run exploits or jail-breaking suites from untrusted origins, which endangers the integrity of personal devices. 
* While the security provided by unauthorized third parties might be good, security from the vendor itself is poor. This is further elaborated here: [[Dev/mobile#Android_Privacy_Issues_and_User_Freedom_Restrictions|Android Privacy Issues and User Freedom Restrictions]].

|-

! scope="row"| Security Technologies
| 
* Many popular device operating systems utilize security technologies which undermine the security of the user against meddling and surveillance by the vendor, while suppressing user freedoms. A classic example is most Android phones and iPhone devices. 
* Although an over-simplified argument, users of forks based on the Android Open Source Project ([https://source.android.com/ AOSP]) and security/privacy-focused Android forks (like [https://grapheneos.org/ GrapheneOS]), are exempt from the criticisms in this section. <ref>Unfortunately, perhaps 99% of laymen utilize stock operating systems with their phone.</ref> These operating systems include many security features to keep users safe from unauthorized third parties outside the ecosystem of the vendor.

|-

|}

= See Also =
* [[Policy On Nonfreedom Software|Policy on Non-Freedom Software]]
* [[Warning#Unsubstantiated_Conclusions|Unsubstantiated Conclusions]]
* [[Avoid_nonfreedom_software|Avoid Non-Freedom Software]]
* [[Why_{{project_name_short}}_is_Freedom_Software|Why {{project name}} is Freedom Software]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
