

{{Header}}
{{#seo:
|description=In ~10 years Quantum Computers will break todays common asymmetric public-key cryptography algorithms used for web encryption (https), e-mail encryption (gnupg...), ssh and others.
|image=https://www.whonix.org/w/images/2/21/Quantum-869533640.jpg
}}
{{Title|title=
Post-Quantum Cryptography (PQCrypto)
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = In ~10 years Quantum Computers will break todays common asymmetric public-key cryptography algorithms used for web encryption (https), e-mail encryption (gnupg...), ssh and others.
}}

== Quantum Computers ==

[https://en.wikipedia.org/wiki/Quantum_computer Quantum computers] are based on the phenomena of [https://en.wikipedia.org/wiki/Quantum_mechanics quantum mechanics], as opposed to familiar classical computers based on transistors which encode data into binary digits (bits). In traditional computing, this process always leads to one of two possible states (0 or 1). <ref>https://en.wikipedia.org/wiki/Quantum_computer</ref> However, quantum computation relies on [https://en.wikipedia.org/wiki/Qubit qubits] that can express many different states simultaneously ("superpositions"), meaning that when/if this technology is fully developed, it will be capable of solving some types of mathematical problems virtually instantaneously. <ref>In 2018, the technology is still reported to be in its infancy and only capable of solving basic problems, but it is developing rapidly. No problems have ''yet'' been solved faster than with a classical computer.</ref> <ref>For instance, a single qubit can represent a 0, 1, or [https://en.wikipedia.org/wiki/Quantum_superposition quantum superposition] of those two qubit states. A qubit pair can be in a superposition of 4 states, three qubits can be in a superposition of 8 states and so on. Quantum computers with ''n'' qubits can be in a superposition of 2^{n} different states simultaneously.</ref>

Assembling a quantum computer is now an engineering problem rather than one impeded by laws of physics -- a theoretically imperfect machine can still yield useful results. Military and government agencies have invested heavily in this area because of the implications for today's widely used public-key cryptography. <ref>Also explaining why the NSA shifted to [https://www.deepdotweb.com/2016/02/08/nsa-switches-to-quantum-resistant-cryptography/ quantum-resistant cryptography] in 2016.</ref> Ciphertext that is invulnerable to classical computing will be shredded into ribbons by a large-scale quantum computer. Similarly, all Tor traffic will be vulnerable until quantum-resistant cryptography is implemented. 

The Snowden documents reveal that all encrypted data traversing the internet is intercepted and stored indefinitely for cryptanalysis should there be a scientific breakthrough. A global arms race has ensued between the United States, EU, Russia, China, Israel and other global powers due to the immense geo-political, economic, intelligence and military advantages this technology would confer. 

In 2018, the academic and corporate consensus is that a large quantum computer will be built in around 10-15 years. It is safe to assume that well-funded intelligence communities are capable of greatly reducing this development period.

== Broken and Impacted Cryptographic Algorithms ==
The US National Institute of Standards and Technology has recently summarized the [http://csrc.nist.gov/publications/drafts/nistir-8105/nistir_8105_draft.pdf impact of quantum computing] on common cryptographic algorithms. 

'''Table:''' ''Cryptographic Impacts of Quantum Computing''

{| class="wikitable"
|-
! scope="col"| Cryptographic Algorithm
! scope="col"| Type
! scope="col"| Purpose
! scope="col"| Quantum Computer Impact
|-
! scope="row"| AES-256
| Symmetric Key
| Encryption
| Larger Key Sizes Needed
|-
! scope="row"| SHA-256. SHA-3
| -
| Hash Functions
| Larger Output Needed
|-
! scope="row" | RSA
| Public Key
| Signatures, Key Establishment
| No Longer Secure
|-
! scope="row" | ECDSA, ECDH <ref>Elliptic Curve Cryptography.</ref>
| Public Key
| Signatures, Key Exchange
| No Longer Secure
|-
! scope="row" | DSA <ref>Finite Field Cryptography.</ref>
| Public Key
| Signatures, Key Exchange
| No Longer Secure
|-
|}

The emergence of quantum computers would break all asymmetric public-key cryptography and signature algorithms used today -- the type of cryptography that protects communications over the internet. The size of symmetric keys is also halved, meaning the strength of 256-bit keys would be equivalent to 128-bit keys. This is the type of cryptography used for Full Disk Encryption, when data is encrypted with a passphrase.

All current generation symmetric cryptographic authenticated modes such as CBC-MAC, PMAC, GMAC, GCM, and OCB are completely broken. This also applies to many CAESAR competition candidates: CLOC, AEZ, COPA, OTR, POET, OMD, and Minalpher. <ref>[https://arxiv.org/pdf/1602.05973v3.pdf Breaking Symmetric Cryptosystems using Quantum Period Finding]</ref>

For more details visit https://pqcrypto.org/

== Post-quantum Cryptography ==

The solution to this threat is Post-quantum (PQ) Cryptography ("PQ Crypto"). This provides a drop-in replacement for cryptographic libraries already deployed, except different types of "quantum-hard" mathematical problems are used so cryptanalysis is difficult for ''both'' classical and quantum computers.

Competent cryptographers are gradually improving the performance of PQ Crypto and designing cipher-suites that are efficient for everyday use. For instance:

* [http://pqcrypto.eu.org/docs/initial-recommendations.pdf Initial recommendations] for PQ Crypto algorithms were published in September 2015.
* The Tor Project is planning to [https://trac.torproject.org/projects/tor/ticket/17286 migrate to quantum-resistant ciphers] by version 0.3.X. To follow Tor child tickets related to this transition, see [https://trac.torproject.org/projects/tor/ticket/24985 here].

== Software ==

This is a listing of Free Software known to known to resist quantum computers and not an endorsement for any particular tool. You are better off setting up arbitrary protocols over Tor [[Onion_Services|Onion Services]] once PQ crypto is deployed to mitigate exposure in case of unknown implementation failures in each and every other tool (with the exception of one-time pads that are information theoretically secure).<ref>https://en.wikipedia.org/wiki/Information_theoretic_security</ref>

* [https://github.com/exaexa/codecrypt Codecrypt]
* [https://tinyssh.org/ TinySSH (PQC planned)]
* [https://www.cyph.com/ Cyph]
* [http://red-bean.com/onetime/ OneTime]


Informal adoption checklist:<ref>https://forums.whonix.org/t/post-quantum-cryptography-pqc/2011/17</ref>

* Quantum-resistant algorithms have withstood susbstantial cryptanalytic efforts.
* Crypto libraries written by competent cryptographers and audited for correct implementation.
* Widely adopted for better blending in.


=== Setup Guides ===

==== Codecrypt ====

This is a GnuPG-like unix program for encryption and signing that uses only quantum-computer-resistant algorithms:<ref>https://github.com/exaexa/codecrypt</ref><ref>http://e-x-a.org/codecrypt/</ref>

* McEliece cryptosystem (compact QC-MDPC variant) for encryption
* Hash-based Merkle tree algorithm (FMTSeq variant) for digital signatures

Codecrypt is free software. The code is licensed under terms of LGPL3 in a good hope that it will make combinations with other tools easier.

===== Use Instructions =====

Codecrypt is now included by default within Whonix 14. See the [http://e-x-a.org/codecrypt/ccr.1.html manual page] for common use-cases. 


Common commands for basic usage:


Generate strong(er) asymmetric encryption key:
<pre>
ccr -g ENC-256 -N adrelanos@riseup.net
</pre>


Export own private key:
<pre>
ccr -aP > myprivatekey
</pre>


Export public key for sharing with contacts:
<pre>
ccr -ap > adrelanos@riseup.net
</pre>


Import key:
<pre>
ccr -i < keyfilename
</pre>


Encrypt plaintext message file to contact key (assuming it's imported) while also making a copy for yourself:
<pre>
ccr -aer adrelanos@riseup.net -R plaintext > ciphertext && ccr -aer johndoe@example.com -R plaintext >> ciphertext
</pre>


Encrypt plaintext message file only to contact key (assuming it's imported):
<pre>
ccr -aer johndoe@example.com -R plaintext > ciphertext
</pre>


Decrypt ciphertext message creating plaintext output:
<pre>
ccr -adR ciphertext > plaintext
</pre>

===== Message Formatting =====

It is still possible to format your messages to account for replies without direct Thunderbird support. However pay attention to prevent mistakenly sending unencrypted replies. TorBirdy disables syncing drafts with your e-mail host's server however its advised to disable your internet connection temporarily in case you hit send without encrypting the message in Codecrypt. 

Steps: 

* Click reply in Thunderbird and copy the string "John Doe:"

* Format what your correspondent said as a reply by pasting it like so: <code>Edit</code> -> <code>Paste As Quotation</code> 

* Copy the result to the text editor window and continue composing your message with your replies interspersed between the quotes then save and encrypt 

* Paste the ciphertext into the Thunderbird reply window, completely replacing what was there 

* Re-enable internet then send.

==== OneTime ====

[http://red-bean.com/onetime/ OneTime]<ref>https://github.com/kfogel/OneTime</ref> is a program that sets up a one-time pad on your computer and protects from reusing pads and shooting yourself in the foot. OneTime is available in Debian.<ref>https://packages.debian.org/search?searchon=names&keywords=onetime</ref> One-time pads are the only provably unbreakable encryption scheme ever invented (assuming a  functional/non-backdoored RNG).<ref>https://en.wikipedia.org/wiki/One-time_pad</ref><ref>http://users.telenet.be/d.rijmenants/en/onetimepad.htm</ref>

OneTime can encrypt any kind of file -- it doesn't matter if the file's contents are Base64-encoded or not, because OneTime is not interpreting the contents of the file. It just treats the file as a string of bits. (The same is true of just about all encryption software, by the way; OneTime is not unique in this regard.)

One-time pads should be secure against cryptographic attacks by quantum computers for the same reason they're secure against any other kind of attack: if the encryption key is truly random, and the key is as long as the message, then all possible plaintexts are equally likely. Quantum computers are not telepathic, so there shouldn't be any way they can attack a message properly encrypted with a one-time pad. Indeed, there really is no possible cryptographic attack against such a message. (Of course, using the system in practice can be difficult, due to the logistics of key exchange, but quantum computing won't affect that.)<ref>https://github.com/kfogel/OneTime/issues/14#issuecomment-218038898</ref>

Limitations:

* The message and the key are identical in size - but with large hard-disks these days this is not a problem.
* There is no way to securely contact someone you don't know - you must exchange the pad file in person or by other trustworthy peers. Sending the pad online makes it as strong as the asymmetric crypto you are using.
* No message integrity. There is no way for the recipient to discover if the ciphertext has been tampered with during transit.
* You must never ever reuse the pad to encrypt another message. Doing so breaks the the encryption.<ref>https://en.wikipedia.org/wiki/Venona_project#Decryption</ref>

= Misc =
* [https://forums.whonix.org/t/post-quantum-cryptography-pqc Forum discussion about this wiki page]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
