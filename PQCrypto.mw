

{{Header}}
{{#seo:
|description=In ~10 years Quantum Computers will break todays common asymmetric public-key cryptography algorithms used for web encryption (https), e-mail encryption (gnupg...), ssh and others.
|image=https://www.whonix.org/w/images/2/21/Quantum-869533640.jpg
}}
{{Title|title=
Post-Quantum Cryptography (PQCrypto)
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = In ~10 years Quantum Computers will break todays common asymmetric public-key cryptography algorithms used for web encryption (https), e-mail encryption (gnupg...), ssh and others.
}}

== Quantum Computers ==

Quantum computers are based on the phenomena of quantum mechanics as opposed to classical computers familiar to everyone today. They are made up of qubits that can express many different states simultaneously, solving some types of mathematical problems in near instant time. Assembling a quantum computer is now an engineering problem rather than one impeded by laws of physics - a theoretically imperfect machine can still yield useful results. Such a computer is sought after by every heavy-weight adversary because of implications for public-key cryptography systems widely used today. Ciphertext unbreakable by today's classical computers will be shredded into ribbons by a large quantum computer. The Snowden documents reveal that every piece of encrypted data traversing the internet is intercepted and stored indefinitely for decryption should there be a breakthrough. A global arms race by the United States, EU, Russia, China and Israel has ensued. 

The academic and corporate world estimate that a large quantum computer will be built in 10-15 years from now (as of 2016). It is safe to assume the time is even less for intelligence communities.

== Broken and Impacted Cryptographic Algorithms ==
The US National Institute of Standards and Technology has recently summarized the [http://csrc.nist.gov/publications/drafts/nistir-8105/nistir_8105_draft.pdf impact of quantum computing] on common cryptographic algorithms. The table below summarizes these findings.

{| class="wikitable"
|-
! scope="col"| Cryptographic Algorithm
! scope="col"| Type
! scope="col"| Purpose
! scope="col"| Quantum Computer Impact
|-
! scope="row"| AES-256
| Symmetric Key
| Encryption
| Larger Key Sizes Needed
|-
! scope="row"| SHA-256. SHA-3
| -
| Hash Functions
| Larger Output Needed
|-
! scope="row" | RSA
| Public Key
| Signatures, Key Establishment
| No Longer Secure
|-
! scope="row" | ECDSA, ECDH <ref>Elliptic Curve Cryptography.</ref>
| Public Key
| Signatures, Key Exchange
| No Longer Secure
|-
! scope="row" | DSA <ref>Finite Field Cryptography.</ref>
| Public Key
| Signatures, Key Exchange
| No Longer Secure
|-
|}

The emergence of quantum computers would break all asymmetric public-key cryptography and signature algorithms used today - the type of cryptography that protects communications over the internet. The size (strength) of symmetric keys is also halved, meaning 256-bit keys drop down to 128-bit. This is the type of cryptography used for Full Disk Encryption (encrypting data with a passphrase).

All current generation symmetric cryptographic authenticated modes such as CBC-MAC, PMAC, GMAC, GCM, and OCB are completely broken and this also applies to many CAESAR competition candidates: CLOC, AEZ, COPA, OTR, POET,OMD, and Minalpher. <ref>[https://arxiv.org/pdf/1602.05973v3.pdf Breaking Symmetric Cryptosystems using Quantum Period Finding]</ref>

For more details visit https://pqcrypto.org/

== What now? ==

The answer is Post-Quantum (PQ) Cryptography. It is a drop in replacement for crypto libraries deployed now except it uses different types of math problems known to be "quantum hard" meaning it is just as difficult for a Quantum Computer to solve as it is for Classical ones.

Competent cryptographers are in the process of improving performance of PQ Crypto and designing cipher-suites efficient for everyday use. The Tor Project are [https://trac.torproject.org/projects/tor/ticket/17286 planning] to migrate to quantum resistant ciphers by version 0.2.9.x.

Tor dev meeting: http://meetbot.debian.net/tor-dev/2016/tor-dev.2016-02-04-13.28.html

[http://pqcrypto.eu.org/docs/initial-recommendations.pdf Initial recommendations] for PQ Crypto algorithms were published September 2015.

== Software ==

This is a listing of Free Software known to known to resist quantum computers and not an endorsement for any particular tool. You are better off setting up arbitrary protocols over Tor [https://www.whonix.org/wiki/Hidden_Services Hidden Services] once PQ crypto is deployed to mitigate exposure in case of unknown implementation failures in each and every other tool (with the exception of one-time pads that are information theoretically secure).<ref>https://en.wikipedia.org/wiki/Information_theoretic_security</ref>

* [https://github.com/exaexa/codecrypt Codecrypt]
* [https://tinyssh.org/ TinySSH (PQC planned)]
* [https://www.cyph.com/ Cyph]
* [http://red-bean.com/onetime/ OneTime]


Informal adoption checklist:<ref>https://forums.whonix.org/t/post-quantum-cryptography-pqc/2011/17</ref>

* Quantum-resistant algorithms have withstood susbstantial cryptanalytic efforts.
* Crypto libraries written by competent cryptographers and audited for correct implementation.
* Widely adopted for better blending in.


=== Setup Guides ===

==== Codecrypt ====

This is a GnuPG-like unix program for encryption and signing that uses only quantum-computer-resistant algorithms:<ref>https://github.com/exaexa/codecrypt</ref><ref>http://e-x-a.org/codecrypt/</ref>

* McEliece cryptosystem (compact QC-MDPC variant) for encryption
* Hash-based Merkle tree algorithm (FMTSeq variant) for digital signatures

Codecrypt is free software. The code is licensed under terms of LGPL3 in a good hope that it will make combinations with other tools easier.

===== Installation =====

Unfortunately not possible to install on Jessie even with apt pinning as it will mix core packages between stable and unstable causing Whonix to break.<ref>https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=839178#38</ref> A supported version has already landed in Stretch however.

===== Message Formatting =====

Alternatively it is still possible to format your messages to account for replies without AnnealMail (see below). However pay attention to prevent mistakenly sending unencrypted replies. TorBirdy disables syncing drafts with your e-mail host's server however its advised to disable your internet connection temporarily in case you hit send without encrypting the message in Codecrypt. Steps: 1. Click reply in Thunderbird and copy the string "John Doe:" 2. Format what your correspondent said as a reply by pasting it like so: <code>Edit</code> -> <code>Paste As Quotation</code> 3. Copy the result to the Codecrypt message window and continue composing your message with your replies interspersed between the quotes then encrypt 4.Encrypt the end result and paste the ciphertext into the reply window, completely replacing the plaintext that was there 5. Re-enable internet then send.


====== AnnealMail ======

AnnealMail is a modified [https://en.wikipedia.org/wiki/Enigmail Enigmail] implementation built around the Codecrypt PQ-crypto suite. Some interesting features include encrypted subject lines. Until it is packaged for Debian<ref>https://github.com/annealmail/annealmail/issues/10</ref><ref>https://bugs.debian.org/849321</ref> it can be easily built from source.

1. Download the build dependencies and execute the commands<ref>https://github.com/annealmail/annealmail/blob/master/COMPILING
</ref> then install the resulting addon file from Thunderbird's extension tab.

2. Follow the instructions for setting up AnnealMail with Codecrypt<ref>https://github.com/annealmail/annealmail/blob/master/README.md</ref>

==== OneTime ====

[http://red-bean.com/onetime/ OneTime]<ref>https://github.com/kfogel/OneTime</ref> is a program that sets up a one-time pad on your computer and protects from reusing pads and shooting yourself in the foot. OneTime is available in Debian.<ref>https://packages.debian.org/search?searchon=names&keywords=onetime</ref> One-time pads are the only provably unbreakable encryption scheme ever invented (assuming a  functional/non-backdoored RNG).<ref>https://en.wikipedia.org/wiki/One-time_pad</ref><ref>http://users.telenet.be/d.rijmenants/en/onetimepad.htm</ref>

OneTime can encrypt any kind of file -- it doesn't matter if the file's contents are Base64-encoded or not, because OneTime is not interpreting the contents of the file. It just treats the file as a string of bits. (The same is true of just about all encryption software, by the way; OneTime is not unique in this regard.)

One-time pads should be secure against cryptographic attacks by quantum computers for the same reason they're secure against any other kind of attack: if the encryption key is truly random, and the key is as long as the message, then all possible plaintexts are equally likely. Quantum computers are not telepathic, so there shouldn't be any way they can attack a message properly encrypted with a one-time pad. Indeed, there really is no possible cryptographic attack against such a message. (Of course, using the system in practice can be difficult, due to the logistics of key exchange, but quantum computing won't affect that.)<ref>https://github.com/kfogel/OneTime/issues/14#issuecomment-218038898</ref>

Limitations:

* The message and the key are identical in size - but with large hard-disks these days this is not a problem.
* There is no way to securely contact someone you don't know - you must exchange the pad file in person or by other trustworthy peers. Sending the pad online makes it as strong as the asymmetric crypto you are using.
* No message integrity. There is no way for the recipient to discover if the ciphertext has been tampered with during transit.
* You must never ever reuse the pad to encrypt another message. Doing so breaks the the encryption.<ref>https://en.wikipedia.org/wiki/Venona_project#Decryption</ref>

= Misc =
* [https://forums.whonix.org/t/post-quantum-cryptography-pqc Forum discussion about this wiki page]

= Footnotes =
<references />

{{Footer}}

[[Category:Documentation]]
