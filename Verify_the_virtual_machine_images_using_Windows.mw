{{Title|title=Verify Virtual Machine Images in Windows}}
{{Header}}
{{#seo:
|description=Instructions for OpenPGP Verification of {{project_name}} using Windows
|image=https://www.whonix.org/w/images/7/75/Approved-29149640.png
}}

{{Contributor|
|status=stable
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=easy
|contributor=[https://forums.whonix.org/users/0brand 0brand]
|support=[[Support]]
}}

= Verify Whonix Images in Windows using Gpg4win =
{{always verify signatures reminder}}

[https://gnupg.org/ GnuPG] is a complete and free implementation of [[OpenPGP]] that allows users to encrypt and sign data and communications. [http://www.gpg4win.org/ Gpg4win] is a graphical front end for GnuPG that is used for file and email encryption in Windows. The verification process for the Whonix images begins with securely downloading and verifying the <code>gpg4win</code> package. Once completed users can use GPG from the command-line to verify the {{project_name}} images.

== Overview ==
The following guide provides steps to: 
# Import the Intevation CA certificate.
# Install SignTool.
# Download and verify GPG4win.
# Download the Whonix signing key.
# Verify the Whonix images.

{{Download_and_Verify_GPG4win_in_Windows}}

== Download the {{project_name}} Signing Key ==
{{Box|text=
Since all {{project_name}} releases are signed with the same key, it is unnecessary to verify the key every time a new release is announced. Trust in the key might gradually increase over time, but cryptographic signatures must still be verified every time a new release is downloaded. 
<br></br>
This page is strongly related to the [[Trust|Placing Trust in {{project_name}}]] page.

Note: With the exception of step 1 all commands should be run from C:\Users\<user_name\Downloads

'''1.''' If not already completed, have GnuPG initialize your user data folder.

{{CodeSelect|code=
gpg --fingerprint
}}

'''2.''' Download [[Patrick Schleizer]]'s (adrelanos') [[OpenPGP]] key. <ref>
{{CodeSelect|code=
curl --tlsv1.2 --proto =https --max-time 180 --output ~/patrick.asc https://www.whonix.org/patrick.asc
}}
</ref><br />
{{Code2|<u>'''{{#widget:Key_Patrick}}'''</u>}}

'''3.''' Store the key as C:\Users\<user_name>\Downloads\patrick.asc

'''4.''' Check fingerprints/owners without importing anything.

{{CodeSelect|code=
gpg --keyid-format long --with-fingerprint patrick.asc
}}

'''5.''' Verify the output.
The output should be identical to the following.
<pre>
pub  4096R/8D66066A2EEACCDA 2014-01-16 Patrick Schleizer <adrelanos@riseup.net>
      Key fingerprint = 916B 8D99 C38E AF5E 8ADC  7A2A 8D66 066A 2EEA CCDA
sub  4096R/3B1E6942CE998547 2014-01-16 [expires: 2021-04-17]
sub  4096R/10FDAC53119B3FD6 2014-01-16 [expires: 2021-04-17]
sub  4096R/CB8D50BB77BB3C48 2014-01-16 [expires: 2021-04-17]
</pre>

'''6.''' Import the key.

{{CodeSelect|code=
gpg --import patrick.asc
}}

The output should confirm the key was imported.

<pre>
gpg: key 8D66066A2EEACCDA: 86 signatures not checked due to missing keys
gpg: key 8D66066A2EEACCDA: public key "Patrick Schleizer <adrelanos@riseup.net>" imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg: no ultimately trusted keys found
</pre>
<u>Output 86 signatures.</u>

The above <i>"86 signatures not checked due to missing keys"</i> can be safely ignored since it does not relate to the signing key itself.

<u>Output already imported.</u>

If the {{project_name}} signing key was already imported in the past'', the output should confirm the key is unchanged.
<pre>
gpg: key 2EEACCDA: "Patrick Schleizer <adrelanos@riseup.net>" not changed
gpg: Total number processed: 1
gpg:              unchanged: 1
</pre>

<u>Output trusted keys.</u>

If the following message appears at the end of the output.
<pre>
gpg: no ultimately trusted keys found
</pre>

Analyze the other messages as usual. This extra message does not relate to the {{project_name}} signing key itself, but instead usually means the user has not created an OpenPGP key yet, which is of no importance when verifying virtual machine images.
}}

== Verify the {{project_name}} Images ==
{{Box|text=
If <i>not</i> already completed download both Whonix.ova image and the corresponding OpenGPG signature which will be used to verify the image. Both the signature and .ova image should be downloaded into the same directory. 

* Download the {{project_name}} VM image and signature from [[VirtualBox/XFCE|VirtualBox/XFCE Table]].
 
* Download the {{project_name}} VM Image and Signature from [[VirtualBox/CLI|VirtualBox/CLI Table]].

Then, start the cryptographic verification, it can take several minutes. 

In Windows command prompt, change to the directory with the Whonix.ova and corresponding signature file.

{{CodeSelect|code=
cd C:\Users\<user_name>\<directory_name>
}}

Next, verify the Whonix.ova image.

{{CodeSelect|code=
gpg --verify-options show-notations --verify Whonix*.ova.asc Whonix*.ova
}}

If the Virtual Machine image is correct the output will tell you that the signature is good.

{{CodeSelect|code=
gpg: Signature made Mon 19 Jan 2015 11:45:41 PM CET using RSA key ID 77BB3C48
gpg: Good signature from "Patrick Schleizer <adrelanos@riseup.net>" [unknown]
gpg: Signature notation: issuer-fpr@notations.openpgp.fifthhorseman.net=6E979B28A6F37C43BE30AFA1CB8D50BB77BB3C48
gpg: Signature notation: file@name=Whonix-Gateway-{{VersionNew}}.ova
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 916B 8D99 C38E AF5E 8ADC  7A2A 8D66 066A 2EEA CCDA
     Subkey fingerprint: 6E97 9B28 A6F3 7C43 BE30  AFA1 CB8D 50BB 77BB 3C48
}}

This might be followed by a warning saying:
{{Template:GnuPG-Warning}}

{{gpg_signature_timestamp}}
The first line includes the signature creation timestamp. Example.

<pre>
gpg: Signature made Mon 19 Jan 2015 11:45:41 PM CET using RSA key ID 77BB3C48
</pre>

{{GnuPG_file_names}}

To help you check, that the file name has not been tampered with, beginning from {{project_name}} version 9.6 and above, by convention, the {{Code2|file@name}} OpenPGP notation includes the file name.
}}

==== When {{project_name}} verification is completed, continue with [[VirtualBox/XFCE|VirtualBox]] installation ====

== Troubleshooting ==
{{Box|text=
==== SignTool is not recognized as an internal or external command, operable program or batch file ====

This error means the SignTool executable is not accessible through <code>cmd.exe</code>.A common cause for this error is SignTool was not installed in the users [https://john-dugan.com/path-variable-in-windows/?PageSpeed=noscript PATH]. To fix this issue add <code>signtool.exe</code> to your system PATH.<ref> [https://www.godaddy.com/help/windows-cmd-signtool-is-not-recognized-as-an-internal-or-external-command-operable-program-or-batch-file-19987 https://www.godaddy.com/help/windows-cmd-signtool-is-not-recognized-as-an-internal-or-external-command-operable-program-or-batch-file-19987]</ref> 

Note: This solution is temporary and works only until you close the command prompt. When the command prompt is restarted <code>signtool.exe</code> must be added to the system PATH again.

'''1.''' Open a command prompt.

In the Windows Start menu, run.

{{CodeSelect|code=
 cmd.exe
}}
    
'''2.''' Add the path to <code>signtool.exe</code> to your system PATH. 

The default installation path for <code>signtool.exe</code> .

<pre>
x86 systems:  C:\Program Files (x86)\Windows Kits\<windows_version>\bin\x86 
x64 systems:  C:\Program Files (x86)\Windows Kits\<windows_version>\bin\x64
</pre>

Run following command to add "path\to\signtool.exe" to your system PATH. Also be sure to add the Windows version to the path. 
 
{{CodeSelect|code=  
set PATH="path to signtool.ext";%PATH%
}}

For example, the following command adds the path for a x64 system.

{{CodeSelect|code=
set PATH="C:\Program Files (x86)\Windows Kits\<windows_version>\bin\x64";%PATH%
}}

'''Figure:''' ''SignTool not recognized''

[[image:signtool_command_not_recognized.png]]

==== 'SignTool' A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider ====

This error message will be received if the <code>/pa</code> switch is not used with SignTool. This is because the default SignTool verify <code>some_file.exe</code> command uses the Windows Driver Verification Policy. <ref> See stackoverflow for more on this. [https://stackoverflow.com/questions/11230091/whys-my-root-certificate-not-trusted]</ref> In order for the file to verify properly the <code>/pa</code> switch must be used so SignTool uses the Default Authentication Verification Policy.

'''Figure:''' ''Root certificate error''

[[image:signtool_error_root_certificate_not_trusted.png]] 

==== Encountering GPG Errors ====
When a GPG error is encountered, first try a web search for the relevant error. The [https://security.stackexchange.com security stackexchange website] can also help to resolve GPG problems. Describe the problem thoroughly, but be sure it is GPG-related and not specific to {{project_name}}. 

More help resources are available on the [[Support]] page.
}}

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
