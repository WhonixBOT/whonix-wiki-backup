{{Header}}
{{Title|
title=Connecting to Tor before a VPN
}}
{{#seo:
|description=Instructions on how to connect to Tor before a VPN (User -> Tor -> VPN -> Internet)
|og:image=https://www.whonix.org/w/images/1/15/Ball-443853640.jpg
}}

{{Tunnels_Introduction}}

'''User -> Tor -> VPN -> Internet'''

= Increased Threat of Identity Correlation =
By design, a VPN routes all your applications - those without any proxy settings - through the VPN. You may not want this, as explained below. To circumvent that, you should use this Whonix-Workstation only for the particular application you want to route through the tunnel-link. You are advised to use [[Multiple Whonix-Workstations]].

= Prevent Bypassing the Tunnel-Link =
{{Prevent_Bypassing_the_Tunnel-Link}}

= Setup Tor before a VPN (User -> Tor -> VPN -> Internet) =
Connect to your VPN using your preferred software *inside* the (Whonix-)Workstation. Note that UDP-style VPN connections will not work with Tor. Therefore, use TCP. For examples, see [[Tunnels/Examples]].

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
For Whonix 13 (not yet released!), please press on expand on the right.
<div class="mw-collapsible-content">
User -> Tor -> VPN -> Internet

===== Preparation =====
Since setting up OpenVPN on Whonix including a secure, leak preventing [[VPN-Firewall|Fail Closed Mechanism]] is challenging, it is highly recommend to learn how to set up OpenVPN on Debian stable (currently: jessie). Get a Debian stable VM. Install the Debian openvpn package. (sudo apt-get install openvpn) Figure out how to set up your VPN using OpenVPN in the command line. Only proceed if you succeeded setting that up. Do not post support requests regarding these instructions before you succeeded with that basic exercise. You find some help with general VPN setup in the [[#VPN Setup]] chapter or on the [[TestVPN]] page. There however are ways to get [[Support|help]] from various sources for that basic exercise, also your VPN provider may be of assistance.

Whonix 12 users may remember variable VPN_SERVERS. Don't wonder. That variable was abolished for better security. <ref>https://phabricator.whonix.org/T460</ref>

===== Qubes specific =====
When using a TemplateBasedVM, to persist these changes use the Qubes bind dirs mechanism.

<pre>
sudo mkdir /rw/config/qubes-bind-dirs.d
</pre>

{{Open with root rights|filename=
/rw/config/qubes-bind-dirs.d/50_user.conf
}}

<pre>
## TODO: use /rw/config/whonix_firewall.d/ after changing Whonix firewall wiki template after Whonix 13 release
binds+=( '/etc/whonix_firewall.d/50_user.conf' )

binds+=( '/etc/sudoers.d/tunnel_unpriv' )
binds+=( '/etc/openvpn' )
binds+=( '/lib/systemd/system/openvpn@openvpn.service' )

## TODO: openvpn@openvpn.service systemd file that stores, that is got enabled.
</pre>

<pre>
/usr/lib/qubes/bind-dirs.sh umount
</pre>

<pre>
/usr/lib/qubes/bind-dirs.sh
</pre>

===== Firewall Settings =====
{{Open with root rights|filename=
/etc/whonix_firewall.d/50_user.conf
}}

Add the following settings. You can skip comments (starting with {{Code|#}}). Don't use {{Code|;}} for comments. <ref>That config file is a bash fragment.</ref> Likely you do not need to either uncomment (removing the {{Code|#}} in front) or modify {{Code|VPN_INTERFACE}} / {{Code|LOCAL_NET}}.

<pre>
WORKSTATION_FIREWALL=1
TUNNEL_FIREWALL_ENABLE=true
</pre>

Save.

===== Reload Firewall =====
{{Reload Firewall}}

===== sudoers configuration =====
{{Open with root rights|filename=
/etc/sudoers.d/tunnel_unpriv
}}

Comment in. (Remove the single hashes ({{Code2|#}} in front of all lines, but do not remove the double hashes ({{Code2|##}}). So it looks like this.

<pre>
tunnel ALL=(ALL) NOPASSWD: /bin/ip
tunnel ALL=(ALL) NOPASSWD: /usr/sbin/openvpn *
Defaults:tunnel !requiretty
</pre>

Save.

===== VPN Setup =====
====== Introduction ======
In the following example we are using the free Riseup VPN, because it is known to support TCP, UDP, SSL. You can use any VPN you like.

Update: Riseup "legacy" VPN may have been discontinued. It did not work anymore for the author of these instructions. The riseup replacement service bitmask has not been tested.

====== Get VPN Certificate ======
Look inside the [https://help.riseup.net/vpn riseup VPN help page] for [https://help.riseup.net/en/riseup-ca <code>RiseupCA.pem</code>] and (right click) [https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem download] it. Store it in {{Code2|/etc/openvpn/RiseupCA.pem}}.

<pre>
scurl https://help.riseup.net/security/network-security/riseup-ca/RiseupCA.pem | sudo tee /etc/openvpn/RiseupCA.pem
</pre>

====== VPN Credentials ======
You need a riseup.net account. You need to know your riseup account name. Go to https://user.riseup.net/users/riseupusername/vpn to obtain your VPN secret. (VPN password) (Replace "riseupusername" with your actual riseup user name.) (Or just got to https://user.riseup.net, login and click on "VPN".) 

{{Open with root rights|filename=
/etc/openvpn/auth.txt 
}}

Add. (Add your actual user name and password.)

<pre>
riseupusername
vpnsecret
</pre>

Save.

====== VPN IP Address ======
Note, you must use IP addresses. You cannot use DNS hostnames. For example, you could not use {{Code2|vpn.riseup.net}}. You have to use IP addresses such as for example {{Code2|198.252.153.226}}. You find out the IP from your provider or by using nslookup on the host. Example. (You need to use your actual DNS hostname, not {{Code2|vpn.riseup.net}}.)

<pre>
nslookup vpn.riseup.net
</pre>

====== VPN Configuration File ======
{{Open with root rights|filename=
/etc/openvpn/openvpn.conf
}}

Add.

Note: make sure to adjust the {{Code|remote 198.252.153.226 80}} variable in your config (unless you are using {{Code|nyc.vpn.riseup.net}} as your VPN service). Replace the IP ({{Code|198.252.153.226}}) and port ({{Code|80}}) to match your VPN service.

<pre>
client

auth-user-pass auth.txt

## using nyc.vpn.riseup.net 80
remote 198.252.153.226 80

ca RiseupCA.pem
remote-cert-tls server
script-security 1

user tunnel
iproute /usr/bin/ip_unpriv

dev tun0
persist-tun
persist-key

proto tcp
</pre>

<ref>
The [https://github.com/Whonix/usability-misc/blob/master/usr/bin/ip_unpriv /usr/bin/ip_unpriv] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.

The [https://github.com/Whonix/usability-misc/blob/master/etc/sudoers.d/tunnel_unpriv /etc/sudoers.d/tunnel_unpriv] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.

The [https://github.com/Whonix/usability-misc/blob/master/lib/systemd/system/openvpn%40openvpn.service.d/50_unpriv.conf /lib/systemd/system/openvpn@openvpn.service.d/50_unpriv.conf] wrapper script is being provided by the [https://github.com/Whonix/usability-misc usabilty-misc] package.
</ref> <ref>We must run OpenVPN as user 'tunnel', because that is the only user besides user {{Code2|clearnet}} that will be allowed to establish external connections when using Whonix Firewall setting VPN_FIREWALL=1.</ref>

Save.

====== DNS Configuration ======
TODO: Should just work?

====== Configuration Folder Permissions ======
Since we will be running OpenVPN under user tunnel, that user requires read access to folder /etc/openvpn.

<pre>
sudo chown -R tunnel:tunnel /etc/openvpn
</pre>

===== systemd setup =====
Create the OpenVPN systemd service file.

<pre>
sudo cp /lib/systemd/system/openvpn@.service /lib/systemd/system/openvpn@openvpn.service
</pre>

Enable the OpenVPN systemd service file.

<pre>
sudo systemctl enable openvpn@openvpn
</pre>

Start the OpenVPN systemd service.

<pre>
sudo service openvpn@openvpn start
</pre>

Check the OpenVPN systemd service status.

<pre>
sudo service openvpn@openvpn status
</pre>

TODO:

Make sure /var/run/openvpn is writable by user tunnel.

===== Troubleshooting =====
Permission issue.
<pre>
Options error: --status fails with '/run/openvpn/openvpn.status': Permission denied
</pre>

Do not start openvpn as root. Do not use "sudo openvpn". This would lead to permission issues. Files in /run/openvpn folder owned by root. So they cannot be overwritten by user tunnel.

Debug start in command line.

<pre>
cd /etc/openvpn/
sudo -u tunnel openvpn /etc/openvpn/openvpn.conf
</pre>

Ip link set issue.

<pre>
Linux ip link set failed: external program exited with error status: 2
</pre>

Use ip_unpriv as documented above.

Dev tun missmatch.

In openvpn.conf do not use.

<pre>
dev tun
</pre>

Use.

<pre>
dev tun0
</pre>
</div>
</div>

= Use a Fail Closed Mechanism =
{{Fail_Closed_Mechanism}}

If you want to enforce, that the VPN always gets used, try [https://github.com/adrelanos/VPN-Firewall VPN-Firewall].

= Leak Tests =
== Introduction ==
We want to verify, that the traffic always goes {{Code2|User -> Tor -> VPN -> Internet}} and not only {{Code2|User -> Tor -> Internet}}. Therefore we should test the Tor Browser, a uwt wrapper deactivated application as well as a regular application.

== Browser IP Test ==
You can skip this test if you do not care about using Tor Browser through the VPN.

If you did correctly configure everything, test your setup. Open https://check.torproject.org in Tor Browser. It will tell you then "{{Code2|You are not using Tor.}}" and you'll see your VPN's IP. In fact your VPN was tunneled through Tor first. (Because Whonix-Workstation can not make any non-Tor connections by design, everything is tunneled over Tor.)

== uwt wrapped application test ==
Connect to check.tpo.

<!-- Cannot use CodeSelect becuase it does not like the pipe |. -->
<pre>
curl --silent --tlsv1 --proto =https -H 'Host: check.torproject.org' -k https://38.229.72.22 | grep IP
</pre>

Should show something along the lines: {{Code2|Your IP address appears to be: xxx.xxx.xxx.xxx}}<br />
Should show the IP of your VPN.

== regular application test ==
Same test as above, but use {{Code2|curl.anondist-orig}} <ref>Real {{Code2|curl}} binary.</ref> rather than {{Code2|curl}} <ref>{{Code2|uwt}} wrapped version of {{Code2|curl}}.</ref>.

<!-- Cannot use CodeSelect becuase it does not like the pipe |. -->
<pre>
curl.anondist-orig --silent --tlsv1 --proto =https -H 'Host: check.torproject.org' -k https://38.229.72.22 | grep IP
</pre>

= Footnotes =
<references />

{{Footer}}

[[Category:Documentation]]
