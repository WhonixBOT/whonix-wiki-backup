{{Header}}

'''UNFINISHED!'''

= Introduction =
The high level overview of this concept is as follows:

# Shut down your every day operating system. Boot your air gapped operating system.
# Create a regular GPG keypair. This will become our master key. By default GPG creates one signing subkey (your identity) and one encryption subkey (how you receive messages intended for you).
# Use GPG to add an additional signing subkey to your keypair. This new subkey is linked to the first signing key. Now we have three subkeys. Store it in a protected place. Your master keypair is the one whose loss would be truly catastrophic.
# Then create a slave key which won't contain your master key.
# Copy your slave key to your every day operating system.

= Prerequisites =
You should know how to boot other operating systems than your primary every day operating system from Live DVD and/or other external media such as USB.

Optionally, if your storage medium could get accessed or stolen by an adversary, it is also recommended to learn how to use disk encryption software. As a precaution, it's wise to do this anyway.

Additionally to protect yourself against mistakes it may make sense to manage your gpg master key folder with a version revision system such as git.

= Creating your Air Gapped OpenPGP Key =
== Preparation ==
Boot your air gapped system.

<pre>
mkdir ~/gpg-master
mkdir ~/gpg-slave
chmod 700 ~/gpg-master
chmod 700 ~/gpg-slave
</pre>

== Creating your Initial Keypair ==
Use the {{Code2|gpg ‐‐gen-key}} command to create a new GPG keypair.

When you create your new keypair, use the highest possible values for key length. As computers get more powerful and storage gets cheaper, it’s conceivable that a nasty person could archive a message that’s unbreakable today, then in the future break it using a more powerful computer. Using the highest possible value for key length helps protect you from that scenario. Don’t use GPG’s default of 2048!

You may want your key to expire; it’s up to you. When prompted for a passphrase, make sure to pick a long and unique one. If your key gets stolen, this passphrase is the only thing protecting it!

<pre>
gpg --homedir ~/gpg-master --gen-key
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and  redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
Your selection? 1
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
    0 = key does not expire
    <n>  = key expires in n days
    <n>w = key expires in n weeks
    <n>m = key expires in n months
    <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and E-mail Address in this form:
    "Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>"

Real name: Bilbo Baggins
E-mail address: bilbo@shire.org
Comment: 
You selected this USER-ID:
    "Bilbo Baggins <bilbo@shire.org>"

Change (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o
You need a Passphrase to protect your secret key.
<passphrase>

gpg: key 488BA441 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   4096R/488BA441 2013-03-13
      Key fingerprint = B878 1FB6 B187 B94C 3E52  2AFA EB1D B79A 488B A441
uid                  Bilbo Baggins <bilbo@shire.org>
sub   4096R/69B0EA85 2013-03-13
</pre>

== Strengthening Hash Preferences ==
Now we set our key to prefer stronger hashes. Use the {{Code2|gpg ‐‐edit-key}} command. At the gpg> prompt, enter the command {{Code2|setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed}}, then save.

<pre>
gpg --homedir ~/gpg-master --edit-key bilbo@shire.org
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
Set preference list to:
     Cypher: AES256, AES192, AES, CAST5, 3DES
     Digest: SHA512, SHA384, SHA256, SHA224, SHA1
     Compression: ZLIB, BZIP2, ZIP, Uncompressed
     Features: MDC, Keyserver no-modify
Really update the preferences? (y/N) y

You need a passphrase to unlock the secret key for
user: "Bilbo Baggins <bilbo@shire.org>"
4096-bit RSA key, ID 488BA441, created 2013-03-13
<passphrase>

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> save
</pre>

== Adding a new Signing Subkey ==
Now for the special sauce: let’s add our new signing subkey.

Use the {{Code2|gpg ‐‐edit-key}} command. At the gpg> prompt, enter the command addkey. Select RSA (sign only) and 4096 for the keysize. Don’t forget to save at the last gpg> prompt:

<pre>
gpg --homedir ~/gpg-master --edit-key bilbo@shire.org
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> addkey
Key is protected.

You need a passphrase to unlock the secret key for
user: "Bilbo Baggins <bilbo@shire.org>"
4096-bit RSA key, ID 488BA441, created 2013-03-13
<passphrase>

Please select what kind of key you want:
    (3) DSA (sign only)
    (4) RSA (sign only)
    (5) Elgamal (encrypt only)
    (6) RSA (encrypt only)
Your selection? 4
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
    0 = key does not expire
    <n>  = key expires in n days
    <n>w = key expires in n weeks
    <n>m = key expires in n months
    <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
Really create? (y/N) y

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
sub  4096R/C24C2CDA  created: 2013-03-13  expires: never       usage: S   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> save
</pre>

== Creating a Revocation Certificate ==
Now we generate a revocation certificate file. If your master keypair gets lost or stolen, this certificate file is the only way you’ll be able to tell people to ignore the stolen key. This is important, don’t skip this step!

<pre>
gpg --homedir ~/gpg-master --gen-revoke bilbo@shire.org > bilbo@shire.org.gpg-revocation-certificate
</pre>

Store the revocation certificate file in a different place than your master keypair (which we’ll export in a later step). You’ll use it to revoke your master keypair should you lose access to it. If you only lose access to your slave keypair, then you’ll revoke those slave subkeys using the master keypair, not this revocation certificate.

== Exporting your Master Key ==
Now that your keypair has been created, let’s export it so that we can back it up:

<pre>
gpg --homedir ~/gpg-master --export-secret-keys --armor bilbo@shire.org > bilbo@shire.org.private.gpg-key
gpg --homedir ~/gpg-master --export --armor bilbo@shire.org > bilbo@shire.org.public.gpg-key
</pre>

This will create two files: your public key and your private key. Protect these two files, along with the revocation certificate file, as best as you can — don’t keep them on your every day operating system, keep them in a safe place. These three files are your master keypair.

= Creating your Slave Key =
== Export Secret Subkeys ==
Now we have our master keypair in our keyring, along with three files representing the master keypair plus the keypair’s revocation certificate. To transform our master keypair into our slave keypair, we have to remove the original signing subkey from the master keypair in our keyring.

Export all of the subkeys from our new keypair to a file:

<pre>
gpg --homedir ~/gpg-master --export-secret-subkeys bilbo@shire.org > subkeys
</pre>

== Create your Slave Key without Master Key ==
'''We are now using {{Code|~/gpg-slave}}!'''

Re-import the sub keys we exported.
<pre>
gpg --homedir ~/gpg-slave --import subkeys
</pre>

Clean up our temporary file.

<pre>
rm subkeys
</pre>

Re-import our public key we exported.

<pre>
gpg --homedir ~/gpg-slave --import bilbo@shire.org.public.gpg-key
</pre>

That’s all! You can verify it worked by running:

<pre>
gpg --homedir ~/gpg-slave --list-secret-keys
/home/user/gpg-slave/secring.gpg
-----------------------------
sec#  4096R/488BA441 2013-03-13
uid                  Bilbo Baggins <bilbo@shire.org>
ssb   4096R/69B0EA85 2013-03-13
ssb   4096R/C24C2CDA 2013-03-13
</pre>

See how the third line begins with “sec#”, not “sec”? The pound sign means the signing subkey is not in the keypair located in the keyring.

To make sure everything is alright, use switch gpg's homedir to {{Code|~/gpg-master}} and see if the secret master key is available.

= In Case of Emergency =
Should the worst happen and your slave keypair gets lost, compromised or stolen, we need to revoke the subkeys on that keypair.

Unlock your safe-deposit box and get your master keypair out.

Boot a live USB of Debian or your distro of choice. Then, import your master keypair into the live USB’s keyring:

<pre>
gpg --import /path/to/bilbo@shire.org.public.gpg-key /path/to/bilbo@shire.org.private.gpg-key
</pre>

Now use {{Code2|gpg ‐‐edit-key}} to interactively revoke your subkeys:

<pre>
gpg --edit-key bilbo@shire.org
gpg (GnuPG) 1.4.11; Copyright (C) 2010 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
sub  4096R/C24C2CDA  created: 2013-03-13  expires: never       usage: S   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> key 1

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub* 4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
sub  4096R/C24C2CDA  created: 2013-03-13  expires: never       usage: S   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> key 2

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
sub* 4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E   
sub* 4096R/C24C2CDA  created: 2013-03-13  expires: never       usage: S   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> revkey

Do you really want to revoke the selected subkeys? (y/N) y
Please select the reason for the revocation:
  0 = No reason specified
  1 = Key has been compromised
  2 = Key is superseded
  3 = Key is no longer used
  Q = Cancel
Your decision? 1
Enter an optional description; end it with an empty line:
> 
Reason for revocation: Key has been compromised
(No description given)
Is this okay? (y/N) y

You need a passphrase to unlock the secret key for
user: "Bilbo Baggins <bilbo@shire.org>"
4096-bit RSA key, ID 488BA441, created 2013-03-13
<passphrase>

You need a passphrase to unlock the secret key for
user: "Bilbo Baggins <bilbo@shire.org>"
4096-bit RSA key, ID 488BA441, created 2013-03-13
<passphrase>

pub  4096R/488BA441  created: 2013-03-13  expires: never       usage: SC  
                     trust: ultimate      validity: ultimate
This key was revoked on 2013-03-13 by RSA key 488BA441 Bilbo Baggins <bilbo@shire.org>   
sub  4096R/69B0EA85  created: 2013-03-13  expires: never       usage: E
This key was revoked on 2013-03-13 by RSA key 488BA441 Bilbo Baggins <bilbo@shire.org>   
sub  4096R/C24C2CDA  created: 2013-03-13  expires: never       usage: S   
[ultimate] (1). Bilbo Baggins <bilbo@shire.org>

gpg> save
</pre>

= License / Credits =
Most of this text has been written by [https://alexcabal.com/creating-the-perfect-gpg-keypair/ Alex Cabal] [http://www.webcitation.org/6KtyMPYen (w)] [https://alexcabal.com/why-i-release-things-into-the-public-domain released] [http://www.webcitation.org/6KtyRvq2n (w)] under [https://creativecommons.org/publicdomain/zero/1.0/ CC0 1.0 Universal (CC0 1.0) Public Domain Dedication] [http://www.webcitation.org/6KtyP8886 (w)]. Modified under the same license by adrelanos.

{{Footer}}

[[Category:Documentation]]
