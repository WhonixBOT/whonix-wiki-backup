{{Header}}
{{#seo:
|description=Using Whonix with KVM instead of VirtualBox
}}

= General =
== What is KVM? ==
For an openly developed, FOSS GPL licensed hypervisor, it is recommended you use KVM [Kernel Virtual Machine] that comes with the GNU/Linux OS. KVM combined with the VirtualMachineManager front-end should provide a familiar and intuitive, easy to use GUI.

For a detailed view on its security merits read the report issued by an independent security auditing firm: http://www.atsec.com/downloads/white-papers/kvm_security_comparison.pdf

== Why Use KVM Over VirtualBox? ==
Recently, the VirtualBox developer team have taken the decision to switch out the BIOS in their hypervisor with one that requires compilation by a toolchain that does not meet the definition of Free Software as per the guidelines of the Free Software Foundation. This move has been deemed problematic for free and open source software projects like Debian, on which Whonix is based. https://www.whonix.org/wiki/Dev/Virtualization_Platform#VirtualBox_no_longer_in_Debian_mai...

The issues of the Open Watcom License are explained in this thread on the Debian Mailinglist: http://www.mail-archive.com/debian-legal@lists.debian.org/msg34687.html and can be summarized as issues surrounding the contradictory language of the license, the assertion of patents against software that relies on it and the placing of certain restrictions on uses of the software.

For those who care about running Free Software and appreciate its ethical views, it is recommended that you avoid running VirtualBox, for that reason alone if nothing else.

Besides this licensing issue which may or may not be of concern to users, a more tangible reason can be the security practices of Oracle, the corporation behind VirtualBox. Recent events and news (see Snowden leaks) have shown the urgent need for increased transparency and trust in the digital world. Oracle is infamous for their lack of transparency in disclosing security bugs details and for discouraging public full disclosure by third parties.
http://www.oracle.com/us/support/assurance/vulnerability-remediation/disclosure/index.html << security through obscurity is the modus operandi at Oracle.
http://www.oracle.com/us/support/assurance/vulnerability-remediation/reporting-security-vu... << Oracle calls it "responsible disclosure" which is actually security through obscurity. Not going public with a vulnerability and its details only leads to laziness and complacency on part of the company that fields the affected products.
http://seclists.org/fulldisclosure/2012/Apr/343 << A 0day reported privately to Oracle in 2008 by an independent security researcher has remained unfixed as of 2012 when this post was written.

Furthermore VirtualBox contains significant functionality that is only available as a proprietary extension, such as USB and PCI passthrough and RDP connectivity. Seeing Oracle's unfriendly trackrecord with the free software community in the past; examples include OpenSolaris and OpenOffice, it would not be a stretch to imagine them charging money for the closed up features at some point in the future or simply abandoning the project if they cannot monetize it to their liking.

= KVM Setup Instructions =
{{testing}}

== Important Operational Security Notes==
'''Following these steps is not optional as they are crucial for effective security management of the Whonix environment.'''

After importing the machines, do a first run of the Whonix Gateway and Workstation virtual machines to allow them to setup, then perform the secure download of the Tor Browser. After that stop and do not browse anywhere or open any unauthenticated communication channel to the internet. Shutdown the virtual machines and create snapshots of their clean state before browsing or initiating any connections with the outside world. 
Note: The only exception to this is running apt which has a guaranteed way to securely download and verify packages.

== Install KVM ==
Install kvm.

TODO:

* When using Debian stable, explain how to enable Debian backports.
* Explain why we install from Debian backports (security / rng / entropy).

<pre>
sudo apt-get update
sudo apt-get install qemu-kvm
</pre>

TODO:

* Alternatively install qemu (in case of lack of hardware support).

== Download and Extract ==
It is highly recommended you read and apply the steps outlined here. By applying a known and tested configuration, you will be better off in convenience and security.

Make sure you use the qcow2 images that are provided by the Whonix project instead of rolling your own. <ref>As in, manually converting them from .ova to .qcow2 is no longer recommended, since you can download .qcow images from the Whonix project.</ref> They contain important performance optimizations. <ref>As per [https://github.com/Whonix/Whonix/blob/master/build-steps.d/2400_convert-img-to-qcow2 build-steps.d/2400_convert-img-to-qcow2], these are "-o cluster_size=2M" and "-o preallocation=metadata".</ref> (Unless you [[Dev/Build_Documentation|created them from source]]. <ref>Because then you have the same performance optimizations.</ref>)

If you have issues with free disk space, using a file system supporting sparse files is recommended, also see [https://www.whonix.org/forum/index.php?topic=153 forum discussion].

1. Already have existing Whonix libvirt images? Consider [[#Cleanup]] first.

2. For simplicity, so you can copy and paste the following commands without changes, download and store Whonix's images in your home folder ({{Code2|/home/<your user name>}}).

3. Make sure you verify the integrity of your download by using gpg to make sure that your downloads have not been tampered with. See here: [[Download#Verify_the_Whonix_images]]

4. Use tar or any graphical based file archiver to decompress the archive.

<pre>
tar xvf ~/Whonix-Gateway-*.libvirt.xz
</pre>

<pre>
tar xvf ~/Whonix-Workstation-*.libvirt.xz
</pre>

Do not use unxz! Extract the images using tar.

== XML Modification (OPTIONAL) ==
Modifying a machine's XML file gives more fine grained control over its settings than what is exposed through the virt-manager GUI. Unless you know what you are doing, editing configuration defaults is neither recommended nor necessary.

<pre>
nano ~/Whonix-Gateway/Whonix-Gateway_kvm-*.xml
</pre>

<pre>
nano ~/Whonix-Gateway/Whonix-Workstation_kvm-*.xml
</pre>

You could always edit the XML files later too, if needed as explained in the [[#Editing an imported Machine's XML Configuration]] chapter.

== Importing Whonix VM Templates ==
The supplied XML files serve as a description for libvirt, that tell it what properties a Whonix machine and networking it should have.

1. First we will start with Whonix-Gateway:

<pre>
virsh define ~/Whonix-Gateway/Whonix-Gateway_kvm-*.xml
</pre>

2. Followed by the Whonix isolated internal network (XML also in the same folder as Whonix Gateway):

<pre>
virsh net-define ~/Whonix-Gateway/Whonix_network-*.xml
</pre>

<pre>
virsh net-autostart Whonix
</pre>

<pre>
virsh net-start Whonix
</pre>

3. Lastly the Whonix-Workstation:

<pre>
virsh define ~/Whonix-Workstation/Whonix-Workstation_kvm-*.xml
</pre>

== Alternative Configurations ==
By default the templates distributed are for KVM, to run alternative configurations like qemu-system-x86-64, import the corresponding file with virsh.

== Moving Whonix Image Files ==
The XML files are configured to point to the default storage location of: /var/lib/libvirt/images These steps will show how to move the images there in order for the machines to boot.

Note: It is highly recommended you use this default path for storing the images to avoid any conflicts with AppArmor or SELinux, which will prevent the machines from booting.

Whonix disk images are sparse files, meaning they expand when filled rather than allocating their entire size, 100GB outright. These are known as sparse files and need special commands when copying them to ensure they don't lose this property, leading them to occupy all the actual space. We are copying to a privileged location in the system, so we have run with higher privileges (sudo). Copy the image files by running.

<pre>
sudo cp --sparse=always ~/Whonix-Gateway-*.qcow2 /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo cp --sparse=always ~/Whonix-Workstation-*.qcow2 /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>

Or alternatively, if you are running on low disk space, you could move the images instead of copying them.

<pre>
sudo mv ~/Whonix-Gateway/Whonix-Gateway-*.qcow2 /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo mv ~/Whonix-Workstation/Whonix-Workstation-*.qcow2 /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>

== Cleanup ==
After importing Whonix, you are advised to delete the archives ({{Code2|.libvirt.xz}} files) and the temporarily extracted folders or to move them into a custom location. This is useful to avoid conflicts and confusion should you later download a new version of Whonix.

To delete them.

<pre>
rm ~/Whonix-Gateway-*.libvirt.xz
</pre>

<pre>
rm ~/Whonix-Workstation-*.libvirt.xz
</pre>

<pre>
rm -r ~/Whonix-Gateway
</pre>

<pre>
rm -r ~/Whonix-Workstation
</pre>

== Uninstall ==
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you want to remove Whonix KVM VMs, Whonix network and Whonix images, click on Expand on the right.

<div class="mw-collapsible-content">
1. Make sure you powered off the VM you want to shut down. You can also make sure you have shut down the VM using command line.

<pre>
virsh destroy Whonix-Gateway
</pre>

<pre>
virsh destroy Whonix-Workstation
</pre>

2. Remove KVM VM settings.

<pre>
virsh undefine Whonix-Gateway
</pre>

<pre>
virsh undefine Whonix-Workstation
</pre>

3. Shut down KVM Network {{Code2|Whonix}}.

<pre>
virsh net-destroy Whonix
</pre>

4. Remove Network {{Code2|Whonix}}.

<pre>
virsh net-undefine Whonix
</pre>

5. Delete the images. (All data will be lost unless you made a backup of your valued data.)

<pre>
sudo rm /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo rm /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>
</div>
</div>

= Extra =
== KVM Shared Folders ==
To move data between the guest and host follow these steps.

On the host.

Run the following command in terminal (Start Menu -> Applications -> System -> Terminal).

<pre>
sudo mkdir /mnt/shared
</pre>

Enable shared folders in VirtManager go to.

<pre>
VirtManager -> click once on virtual machine -> Edit -> Virtual Machine Details -> Details ->
Add Hardware -> File System
</pre>

Set.

Mode: Mapped <ref>The file sharing mode {{Code2|mapped}} is just an example, using squash or passthrough is possible by selecting them from the drop down menu.</ref>

Driver: Default

Source Path: {{Code|/mnt/shared}}

Target Path: {{Code|/mnt/shared}}

Click finish. Done.

In the VM.

Run the following command in terminal (Start Menu -> Applications -> System -> Terminal).

<pre>
sudo mount -t 9p -o trans=virtio shared /mnt/shared -oversion=9p2000.L
</pre>

To automatically mount this every time at boot, open {{Code2|/etc/fstab}}.

If you are using a graphical virtual machine.

<pre>
kdesudo kwrite /etc/fstab
</pre>

Or if you are using a terminal-only virtual machine.

<pre>
sudo nano /etc/fstab
</pre>

Add.

<pre>
shared /mnt/shared    9p  trans=virtio,version=9p2000.L,rw    0   0
</pre>

Save.


Note: If your system is configured to use a Mandatory Access Control framework like AppArmor, you may need to configure an exception rule to allow the confined guests to communicate with the designated shared folder on the guest. Do NOT be tempted to disable AppArmor to get this working, as it removes a critical protection layer that protects your host. Be patient and read the documentation.
By default Whonix can automount a shared folder on the host as long as you use set up virt-manager to use hostshare tag: shared
If you are using commandline add this xml code to your configuration, this is an example and should be adapted for your usage:

<pre>
<filesystem type='mount' accessmode='mapped'>
    <source dir='/mnt/shared'/>
    <target dir='tag'/>
</filesystem>
</pre>

== Editing an imported Machine's XML Configuration ==

<pre>
EDITOR=nano sudo virsh edit Whonix-Gateway
</pre>

== Enabling Clipboard Sharing ==
SPICE allows accelerated graphics and clipboard sharing. The clipboard is disabled by default for security reasons <ref>So you don't accidentally copy for example a link to a website you visited anonymously to your non-anonymous host browser or vice versa.</ref> but could be enabled in the xml for a machine by finding the option for it under the <graphics> section and changing it to'yes'.

== Alternative Configurations ==
Libvirt can support a variety of containment mechanisms. Currently supported ones are KVM on the x86_64 platform and QEMU. More configurations could be added at a later date. If you have hardware virtualization extensions, always use the KVM one.

To use another configuration, import its XML file with virsh.

= Footnotes =
<references/>

{{Footer}}

[[Category:Documentation]]
