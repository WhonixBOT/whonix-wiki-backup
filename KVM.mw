{{Title|title={{project name}} for KVM}} 
{{Header}}
{{#seo:
|description=Using {{project name}} with KVM (Kernel Virtual Machine)
|image=https://www.whonix.org/w/images/b/be/234234234236kvm.png
}}
[[Image:Kvmbanner-logo26.png|<code>logo of the [https://www.linux-kvm.org KVM] virtualizer</code>|thumb]]
{{Contributor|
|status=stable
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=medium
|contributor=[https://forums.whonix.org/users/hulahoop HulaHoop]
|support=[[Support]]
}}

= General =
== What is KVM? ==
For an openly developed, free and open-source software (FOSS), GPL licensed hypervisor that can run Whonix, <ref>There are also [[Main_Page#Download_{{project_name}}|other platforms]].</ref> it is recommended to use [https://www.linux-kvm.org/page/Main_Page Kernel Virtual Machine (KVM)] that comes with the GNU/Linux OS. KVM combined with the [https://virt-manager.org/ VirtualMachineManager] front-end should provide a familiar, intuitive and easy-to-use GUI.

For a detailed view on KVM's security merits read the [https://www.atsec.de/fileadmin/user_upload/whitepaper/kvm_security_comparison.pdf audit report] issued by an independent security auditing firm.

== Why Use KVM Over VirtualBox? ==
The VirtualBox developer team have recently taken the decision to switch out the BIOS in their hypervisor. However, it now comes with one that requires compilation by a toolchain that [[Dev/Virtualization_Platform#VirtualBox_no_longer_in_Debian_main|does not meet the definition of Free Software]] as per the guidelines of the Free Software Foundation. This move is considered problematic for free and open source software projects like Debian, on which {{project name}} is based. 

The issues of the Open Watcom License are explained in [https://www.mail-archive.com/debian-legal@lists.debian.org/msg34687.html this thread] on the Debian Mailinglist. In summary, there are issues surrounding the contradictory language of the license, the assertion of patents against software that rely upon it, and the placing of certain restrictions on software uses. For these reasons, those who care about running FOSS and appreciate its ethical views are recommended to avoid running VirtualBox; also see  [[Avoid_nonfreedom_software|avoid non-freedom software]].

Besides this licensing issue, a more tangible reason to avoid VirtualBox is the security practices of Oracle who produce the software. Events and news in recent years (like the Snowden leaks) demonstrate there is an urgent need for increased transparency and verifiable trust in the digital world. Oracle is infamous for their lack of transparency in disclosing the details of security bugs, as well as discouraging full and public disclosure by third parties. [https://www.techopedia.com/definition/21985/security-through-obscurity-sto Security through obscurity] is the flawed [http://www.oracle.com/us/support/assurance/vulnerability-remediation/disclosure/index.html modus operandi] at Oracle. <ref>[http://users.softlab.ntua.gr/~taver/security/secur3.html What is "security through obscurity"]: <blockquote>The basis of STO has always been to run your system on a "need to know" basis. If a person doesn't know how to do something which could impact system security, then s/he isn't dangerous. ... Nowadays there is also a greater need for the ordinary user to know details of how your system works than ever before, and STO falls down a as a result. Many users today have advanced knowledge of how their operating system works, and because of their experience will be able to guess at the bits of knowledge that they didn't "need to know". This bypasses the whole basis of STO, and makes your security useless.</blockquote></ref>

Not going public with the details of vulnerabilities only leads to laziness and complacency on behalf of the company that fields the affected products. One example is this historical [https://en.wikipedia.org/wiki/Zero-day_(computing) 0day vulnerability] reported privately to Oracle in 2008 by an independent security researcher. Over four years later, the vulnerability [https://seclists.org/fulldisclosure/2012/Apr/343 remained unfixed], exhibiting Oracle has a history of failing to provide timely patches to customers so they can protect themselves.

On the VirtualBox bugtracker, ticket ''VirtualBox 5.2.18 is vulnerable to spectre/meltdown despite microcode being installed'' indicates [[Spectre_Meltdown#VirtualBox|non-responsiveness]] and non-progress by upstream. Users must patiently wait for VirtualBox developers to fix this bug.<ref>https://forums.virtualbox.org/viewtopic.php?f=7&t=89395</ref> 

VirtualBox also contains significant functionality that is only available as a proprietary extension, such as USB / PCI passthrough and RDP connectivity. Based on Oracle's unfriendly track record with the FOSS community in the past -- examples include OpenSolaris and OpenOffice -- it would be unsurprising if users were charged  for these restricted features in the future, or if the project was abandoned due to insufficient monetization.

=  First-time User? =
{{Default_Passwords}}
{{First_Time_User}}

= KVM Setup Instructions =
== Before Installing == 
{{Computer Security Education}}

== Install KVM ==
{{Anchor|Debian stable}}
=== Debian ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using Debian {{Code2|stable}} (currently: {{Code2|buster}}), click on Expand on the right.

<div class="mw-collapsible-content">
{{Sudo_Setup}}

Update package lists.

{{CodeSelect|code=
sudo apt-get update
}}

For '''Debian Buster+''' you need to install:.

{{CodeSelect|code=
sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients virt-manager gir1.2-spiceclientgtk-3.0
}}
</div>
</div>

=== Arch Linux ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using Arch Linux, click on Expand on the right.

<div class="mw-collapsible-content">
Update the package lists and install the following packages.

{{CodeSelect|code=
sudo pacman -Syu qemu libvirt virt-manager
}}
</div>
</div>

=== Other Distributions ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using a Linux distribution that is not documented above, click on Expand on the right.

<div class="mw-collapsible-content">
The qemu-kvm and libvirt-bin packages are necessary. virt-manager is also required in order to use a graphical user interface (which most users want). It is most likely this software can be installed using the usual distribution's package manager.

If any of the following errors appear while later using {{Code|virsh define}}.

{{CodeSelect|code=
error: Failed to define domain from {{gateway_product_name_short}}_kvm-8.6.2.8.xml
error: internal error Unknown controller type 'pci
}}

{{CodeSelect|code=
{{gateway_product_name_short}}_kvm-8.6.2.8.xml:24: element pm: Relax-NG validity error : Element domain has extra content: pm
{{gateway_product_name_short}}_kvm-8.6.2.8.xml fails to validate
}}

{{CodeSelect|code=
Relax-NG validity error : Extra element devices in interleave
{{gateway_product_name_short}}_kvm-8.6.2.8.xml:24: element devices: Relax-NG validity error : Element domain failed to validate content
{{gateway_product_name_short}}_kvm-8.6.2.8.xml fails to validate
}}

Then a more recent version of libvirt and kvm is likely needed.
</div>
</div>
Readers are welcome to add detailed instructions for other distributions here!

== Notice ==

=== Arch Users ===

*As of March 2019, it has been reported that the blkio throttling feature appears to be missing/unsupported on the latest Arch version. This causes a failure during VM start up. <ref>https://forums.whonix.org/t/problem-starting-whonix-14-after-upgrade-unable-to-write-to-sys-fs-cgroup-blkio-machine-slice-machine-qemu/6999/5</ref> The current work around is to remove the feature for now.

{{Box|text=
'''1.''' Edit the configuration file.

{{CodeSelect|code=
sudo virsh edit {{gateway_product_name_short}}
}}

'''2.''' Strip out the following setting.

<pre style="white-space: pre-wrap;">
 <blkiotune>
    <weight>250</weight>
</blkiotune>
</pre>

'''3.''' Repeat steps 1-2 in {{workstation_product_name_short}}.

'''4.''' Save and start the VMs.
}}

* The pvspinlock feature is reported to not be supported and the issue was resolved when edited out of the VM config.

== Addgroup ==

In order to be able to manage virtual machines as a regular (non-root) user, that user must be added to the {{Code|libvirt}} and the {{Code|kvm}} group. The following command will work in Debian and assumes the simple scenario whereby KVM will be utilized with the current logged in user. Also note that in Ubuntu the group names vary and it is called ''libvirtd'' instead.

{{CodeSelect|code=
sudo addgroup "$(whoami)" libvirt
}}

{{CodeSelect|code=
sudo addgroup "$(whoami)" kvm
}}

<ref>
By default Debian does not use sudo, so groups can be added with usermod. If your user is "foo" the following commands will work.

{{CodeSelect|code=
usermod -a -G libvirt foo
}}

And.

{{CodeSelect|code=
usermod -a -G kvm foo
}}
</ref>

=== Other Distributions ===

If another distribution is in use, then first refer to the distribution manual. For example, a necessary reference for Arch users is the [https://wiki.archlinux.org/index.php/libvirt Arch Linux libvirt wiki page].

== Reboot ==

<u>Note</u>: A reboot is required after:
* KVM is installed.
* Users are added to groups.

{{CodeSelect|code=
sudo reboot
}}

== Network Start ==

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = These steps have nothing to do with {{project name}} 14+, but are helpful when running other VMs.
}}

Ensure KVM's / QEMU's default networking is enabled and has started. <ref>https://forums.whonix.org/t/kvm-networking-broken/644</ref> <ref>https://wiki.debian.org/KVM#Troubleshooting</ref>

{{CodeSelect|code=
virsh -c qemu:///system net-autostart default
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start default
}}

== Build from Scratch ==

Advanced users are encouraged to [[Dev/Build_Documentation|build]] {{project name}} images for high security assurance.

== Download and Extract ==

=== Introduction ===

It is strongly recommended to read and apply the steps outlined in this section. By applying a known and tested configuration, this will provide better convenience and security.

Be sure to use the qcow2 images that are provided by the {{project name}} project instead of rolling your own <ref>Manually converting images from .ova to .qcow2 is no longer recommended, since .qcow images can be downloaded from the {{project name}} project.</ref> because they contain important performance optimizations. <ref>As per [https://github.com/{{project_name_short}}/{{project_name_short}}/blob/master/build-steps.d/2400_convert-img-to-qcow2 build-steps.d/2400_convert-img-to-qcow2], these are "-o cluster_size=2M" and "-o preallocation=metadata".</ref> The only exception is if images were [[Dev/Build_Documentation|created from source]]. <ref>Because the same performance optimizations are present.</ref>

If problems are encountered with free disk space, using a file system that supports [[sparse files]] is recommended. Also refer to the following [https://forums.whonix.org/t/please-reduce-kvm-image-size/160 forum discussion].

If {{project name}} libvirt images already exist, then consider a [[#Cleanup|Cleanup]] first.

For simplicity the {{project name}} images should be downloaded and stored in the home folder ({{Code2|/home/<your user name>}}) so the following commands can be copied/pasted without changes.

=== Download {{project name}} ===

'''{{free}} Download '''

{{DownloadTableUnified
|url=https://download.whonix.org
|project={{project name short}}
|flavor=XFCE
|after_slash=libvirt
|extension=libvirt.xz
|version=15.0.1.3.4
|appendix=
|signing=Verify images using this [[KVM#Verify_the_{{project_name_short}}_Images|Signing Key]]
}}

{{Anchor|Verify the {{project name short}} Images}}

=== Verify the {{project name}} Images ===
{{Box|text=
'''1.''' Download [https://www.whonix.org/hulahoop.asc HulaHoop]'s [[OpenPGP]] key from the website.

{{CodeSelect|code=
curl {{Curl Secure}} https://www.whonix.org/hulahoop.asc -o hulahoop.asc
}}

'''2.''' Check fingerprints/owners without importing anything. <ref>
https://forums.whonix.org/t/gpg-show-key-warning-gpg-warning-no-command-supplied-trying-to-guess-what-you-mean/7859
</ref>

{{CodeSelect|code=
gpg --keyid-format long --import --import-options show-only --with-fingerprint hulahoop.asc
}}

'''3.''' Verify the output.

The output should be identical to the following. 

<pre>
pub   rsa4096/50C78B6F9FF2EC85 2018-11-26 [SCEA]
      Key fingerprint = 04EF 2F66 6D36 C354 058B  9DD4 50C7 8B6F 9FF2 EC85
uid                            HulaHoop
sub   rsa4096/EB27D2F8CEE41ACC 2018-11-26 [SEA]
</pre>

'''4.''' Import the key.

{{CodeSelect|code=
gpg --import hulahoop.asc
}}

The output should confirm the key was imported.

<pre>
gpg: key 0x50C78B6F9FF2EC85: public key "HulaHoop" imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<u>If the {{project name}} signing key was already imported in the past</u>, the output should confirm the key is unchanged.

<pre>
gpg: key 0x50C78B6F9FF2EC85: "HulaHoop" not changed
gpg: Total number processed: 1
gpg:              unchanged: 1
</pre>

'''5.''' ''Optional:'' For extra assurance, verify the key was also signed by [[Patrick_Schleizer|Patrick Schleizer]].

{{CodeSelect|code=
gpg --check-sigs "04EF 2F66 6D36 C354 058B 9DD4 50C7 8B6F 9FF2 EC85"
}}

The output should be identical to the message below.

<pre>
pub   rsa4096/0x50C78B6F9FF2EC85 2018-11-26 [SCEA]
      04EF2F666D36C354058B9DD450C78B6F9FF2EC85
uid                   [ unknown] HulaHoop
sig!         0x8D66066A2EEACCDA 2018-12-14  Patrick Schleizer <adrelanos@riseup.net>
sig!3        0x50C78B6F9FF2EC85 2018-11-26  HulaHoop
sub   rsa4096/0xEB27D2F8CEE41ACC 2018-11-26 [SEA]
sig!         0x50C78B6F9FF2EC85 2018-11-26  HulaHoop

gpg: 3 good signatures
</pre>

If the following message appears at the end of the output.

<pre>
gpg: no ultimately trusted keys found
</pre>

Analyze the other messages as usual. This extra message does not relate to the {{project name}} signing key itself, but instead usually means the user has not created an OpenPGP key yet, which is of no importance when verifying virtual machine images.

'''6.''' Verify the archive with Hulahoop's key.

{{CodeSelect|code=
gpg --verify Whonix*.libvirt.xz.asc Whonix*.libvirt.xz
}}

The output should include the following text.

<pre>
gpg: Good signature from "HulaHoop"
</pre>
}}

=== Decompress ===

Use {{Code2|tar}} to decompress the archive.

{{CodeSelect|code=
tar -xvf Whonix*.libvirt.xz
}}

Do not use {{Code2|unxz}}! Extract the images using gnu {{Code2|tar}}.

=== License Agreement ===

{{License Read}}

== Optional: XML Modification ==

This section describes XML modifications before importing a virtual machine. For virtual machines that were already imported, see: [[#Editing an Imported Machine's XML Configuration|Editing an Imported Machine's XML Configuration]].

Modifying a machine's XML file provides more fine-grained control over its settings than what is exposed through the virt-manager GUI. Unless you are knowledgeable about this process, editing configuration defaults is neither recommended nor necessary.

{{Open_File|filename=
{{gateway_product_name_short}}*.xml
}}

{{Open_File|filename=
{{workstation_product_name_short}}*.xml
}}

It is possible to edit the XML files later on if this is necessary, see: [[#Editing an Imported Machine's XML Configuration|Editing an Imported Machine's XML Configuration]].

== Importing {{project name}} VM Templates ==

The supplied XML files serve as a description for libvirt and define the properties of a {{project name}} VM and the networking it should have.
{{Box|text=
'''1.''' Add and activate the virtual networks. This step only needs to be done once and not with every upgrade.

If the definition of the {{project name}} internal network fails because the virtual bridge "virbr2" already exists, edit the Whonix_internal*.xml file and change the name to one that does not exist, for example "virbr3" (all existing bridge adapters can be listed with "sudo brctl show").

{{CodeSelect|code=
virsh -c qemu:///system net-define {{project_name_short}}_external*.xml
}}

{{CodeSelect|code=
virsh -c qemu:///system net-define {{project_name_short}}_internal*.xml
}}

* The names are located inside the <code>{{project_name_short}}_external*.xml</code> and <code>{{project_name_short}}_internal*.xml</code> files.

{{CodeSelect|code=
virsh -c qemu:///system net-autostart {{project_name_short}}-External
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start {{project_name_short}}-External
}}

{{CodeSelect|code=
virsh -c qemu:///system net-autostart {{project_name_short}}-Internal
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start {{project_name_short}}-Internal
}}

'''2.''' Import the {{project name}} Gateway and Workstation images.

{{CodeSelect|code=
virsh -c qemu:///system define {{gateway_product_name_short}}*.xml
}}

{{CodeSelect|code=
virsh -c qemu:///system define {{workstation_product_name_short}}*.xml
}}
}}

== Manipulating QCOW2 Images ==

Use qemu-img to interact with KVM disk images. This software can resize virtual disks, convert virtual disks to other formats, and more. It is not necessary nor recommended to change the official images, so proceed cautiously and only if the procedure is understood.

For more commands, refer to the [https://linux.die.net/man/1/qemu-img qemu-img manual].

== Moving {{project name}} Image Files ==

The XML files are configured to point to the default storage location of <code>/var/lib/libvirt/images</code>. The following steps move the images there so the machines can boot.

<u>Note:</u> Changing the default location may cause conflicts with SELinux, which will prevent the machines from booting.

It is recommended to move the image files instead of copying them.

{{CodeSelect|code=
sudo mv {{gateway_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo mv {{workstation_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}

{{Anchor|sparse files}}
== Copying {{project name}} Image Files ==

{{project_name}} disk images are [[sparse files]], meaning they expand when filled rather than allocating their entire size (100GB outright). Sparse files require special commands when they are copied to ensure they do not lose this property, otherwise they will occupy all of the actual space. Higher privileges (sudo) are required because the copying is to a privileged location in the system.

{{CodeSelect|code=
sudo cp --sparse=always {{gateway_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo cp --sparse=always {{workstation_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}

== Encrypted Containers ==

It is possible to run image files from encrypted containers. sVirt protections are confirmed to be in effect for image files at alternative locations.

Change the permissions on the container mount point directory so virtual machine manager can access the image. In Zulucrypt, containers are mounted under <code>/run/media/private/user</code>: <ref>https://forums.whonix.org/t/cant-use-var-lib-libvirt-images-for-whonix-images-what-to-do-about-apparmor/7192/3</ref>
{{CodeSelect|code=
sudo chmod og+xr /run/media/private/user/$container_name
}}

== Cleanup ==

After importing {{project_name}}, it is advised to delete the archives ({{Code2|.libvirt.xz}} files) and the temporarily extracted folders, or to move them into a custom location. This is useful to avoid conflicts and confusion if a new version of {{project_name}} is later downloaded.

To delete the archives and temporary folders, run.

{{CodeSelect|code=
rm {{project_name_short}}*
rm -r WHONIX*
}}

== Start ==

If Virtual Machine Manager is familiar, there is nothing special about starting {{project name}} VMs compared to starting other VMs. First start {{gateway_product_name}}, then start {{workstation_product_name}}.

=== Graphical User Interface (GUI) ===

Start Virtual Machine Manager.

<code>Start Menu</code> &rarr; <code>Applications</code> &rarr; <code>System</code> &rarr; <code>Virtual Machine Manager</code>

Start {{gateway_product_name}}.

<code>click on {{gateway_product_name_short}}</code> &rarr; <code>click open</code> &rarr; <code>click the play symbol</code>

Repeat the steps for {{workstation_product_name}}.

=== Command Line Interface (CLI) ===
On the host.

To start {{gateway_product_name}}, run. 

{{CodeSelect|code=
sudo virsh start {{gateway_product_name_short}}
}}

To start {{workstation_product_name}}, run.

{{CodeSelect|code=
sudo virsh start {{workstation_product_name_short}}
}}

To interact with the {{workstation_product_name}} via [https://forums.whonix.org/t/how-do-i-enter-the-whonix-shell-from-cli/7271 serial console], run.

{{CodeSelect|code=
sudo virsh console {{workstation_product_name_short}}
}}

To disable startup of the included Desktop Environment regardless of how much RAM is assigned to the VM, configure [[RAM_Adjusted_Desktop_Starter|RAM Adjusted Desktop Starter package settings]].

== Adjust Display Resolution ==

<code>Whisker Menu</code> &rarr; <code>display</code> &rarr; <code>select resolution</code> <ref>https://forums.whonix.org/t/no-auto-resize-with-qxl-driver/7145/3</ref>

Save and then take a snapshot.


Alternatively, 

<code>GUI Console</code> &rarr; <code>View</code> &rarr; <code>Scale Display</code> &rarr; <code>Check: Always + Auto resize VM with window</code>. Every new session, a reboot is needed while the VM's GUI console is open and maximized to activate display resize.

== After Installing ==

{{Post Install Advice}}

== Uninstall ==

<div class="toccolours mw-collapsible mw-collapsed">
If you want to remove {{project name}} KVM VMs, {{project name}} network and {{project name}} images, click on Expand on the right.

<div class="mw-collapsible-content">
{{Box|text=
'''1.''' Power off the VM you want to shut down. <ref>The command line can also be used to make sure the VM has been shut down.</ref>

{{CodeSelect|code=
virsh -c qemu:///system destroy {{gateway_product_name_short}}
}}

{{CodeSelect|code=
virsh -c qemu:///system destroy {{workstation_product_name_short}}
}}

'''2.''' Remove KVM VM settings.

{{CodeSelect|code=
virsh -c qemu:///system undefine {{gateway_product_name_short}}
}}

{{CodeSelect|code=
virsh -c qemu:///system undefine {{workstation_product_name_short}}
}}

'''3.''' Shut down KVM Network {{Code2|{{project_name_short}}}}.

<u>Warning:</u> {{project_name}} 14 and earlier versions used the network names "external" and "internal". This means the command must be changed accordingly. Try "virsh -c qemu:///system net-list" to list them all.

{{CodeSelect|code=
virsh -c qemu:///system net-destroy {{project_name_short}}-External
}}
{{CodeSelect|code=
virsh -c qemu:///system net-destroy {{project_name_short}}-Internal
}}

'''4.''' Remove Network {{Code2|{{project_name_short}}}}.

<u>Warning:</u> {{project_name}} 14 and earlier versions used the network names "external" and "internal". This means the command must be changed accordingly. Try "virsh -c qemu:///system net-list" to list them all.

{{CodeSelect|code=
virsh -c qemu:///system net-undefine {{project_name_short}}-External
}}
{{CodeSelect|code=
virsh -c qemu:///system net-undefine {{project_name_short}}-Internal
}}

'''5.''' Delete the images. 

<u>Note:</u> All data will be lost unless it is first backed up.

{{CodeSelect|code=
sudo rm /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo rm /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}
}}
</div>
</div>

= KVM Upgrade Instructions =

It is strongly recommended to uninstall older {{project name}} versions and always run the [[Whonix_Stable_Release|stable release]]. Note that {{project name}} supports in-place apt-get upgrades too.

# Move your data out of the VM via shared folders.
# Perform the [[#Cleanup|Cleanup]] steps.
# [[#Download_and_Extract|Install]] the new images.

= Optional =

== Multiple {{gateway_product_name}}s ==

See: [[Multiple_{{gateway_product_name_short}}#KVM|Multiple {{gateway_product_name}}s]].

== Testing Upcoming Versions ==

Download the test images from the latest folder listed [https://sourceforge.net/projects/whonix-kvm/files/libvirt/ here]. Apply the [[Multiple_{{gateway_product_name_short}}#KVM|Multiple {{gateway_product_name_short}} KVM steps]] for running {{project name}} versions side by side with some differences:

# Rename the test {{project name}} images to something unique, preferably by appending the version number to the name.
# Edit the XML templates and change the VM names.
# Import the images by following the [[#Importing_{{project_name_short}}_VM_Templates|Importing {{project_name_short}}]] installation steps. Keep in mind the full name of the new images must be used and do not import the Network templates.

== Magic SysRq Keys ==
Magic SysRq keys are useful when the guest is unresponsive, especially in cases where VMs are running headless and a GUI console is not available for forcing them to shut off on the host.<ref>https://dustymabe.com/2012/04/21/send-magic-sysrq-to-a-kvm-guest-using-virsh/</ref>

Example command to shut down Whonix Workstation from a host console. The ''O'' at the end of ''KEY_O'' can be substituted with any other [https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html supported letter] listed in the kernel documentation. See also [[SysRq]].

{{CodeSelect|code=
sudo virsh send-key Whonix-Workstation KEY_LEFTALT KEY_SYSRQ KEY_O
}}

== DHCP ==

Libvirt provides built-in DHCP functionality via a custom install of the minimalist Dnsmasq DNS/DHCP daemon. <ref>https://forums.whonix.org/t/safer-dhcp-implementation-resolved/7499/7</ref> This is useful when running multiple Workstations concurrently that are attached to the same Gateway, and for custom Workstations running Android x86.

For privacy and traffic leak purposes Dnsmasq does not resolve DNS as implemented in Libvirt. <ref>https://wiki.libvirt.org/page/Libvirtd_and_dnsmasq: <blockquote>On linux host servers, libvirtd uses dnsmasq to service the virtual networks, such as the default network. A new instance of dnsmasq is started for each virtual network, only accessible to guests in that specific network.<blockquote></ref> <ref>Dnsmasq is visible to a nmap scan from the Workstation but not much else. Manual test: sent a DNS request with this result:

<pre style="white-space: pre-wrap;">
    dig microsoft.com @10.152.152.0

    ; <<>> DiG 9.11.5-P4-3-Debian <<>> microsoft.com @10.152.152.0
    ;; global options: +cmd
    ;; connection timed out; no servers could be reached
</pre>
</ref> DNS is not explicitly enabled for guests unless it is added to a network’s configuration. <ref>https://fabianlee.org/2018/10/22/kvm-using-dnsmasq-for-libvirt-dns-resolution/</ref> <ref>https://www.cyberciti.biz/faq/linux-kvm-libvirt-dnsmasq-dhcp-static-ip-address-configuration-for-guest-os/</ref> Even when DNS is enabled, the way Libvirt uses it does not increase the host's attack surface (by using raw sockets for example) nor does DHCP because it is bound to a specific NIC in this case. <ref>https://unix.stackexchange.com/questions/256061/is-libvirt-dnsmasq-exposed-to-the-network-if-i-run-fedora-without-a-firewall: <blockquote>So I can see an open TCP port. However it responds as if it’s “tcpwrapped”. That implies if you connect over a different interface from virbr0 , dnsmasq closes the connection without reading any data. So data you send to it doesn’t matter; it can’t e.g. exploit a classic buffer overflow.<blockquote></ref> Trying to edit the Dnsmasq configuration files directly will fail as settings are rewritten and are enforced through Libvirt by design. <ref>https://serverfault.com/questions/840163/custom-dnsmasq-or-custom-options-with-libvrt</ref>

{{Box|text=
'''1.''' Edit the network configuration file.

{{CodeSelect|code=
sudo nano /etc/network/interfaces.d/30_non-qubes-whonix
}}

'''2.''' Make the following comment changes.

Comment out.

{{CodeSelect|code=
auto eth0
iface eth0 inet static
}}

Comment in.

{{CodeSelect|code=
auto eth0
iface eth0 inet dhcp
}}

Save the file.

'''3.''' Change the internal network setting.

{{CodeSelect|code=
sudo virsh net-edit Whonix-Internal
}}

<pre style="white-space: pre-wrap;">
<ip address='10.152.152.0' netmask='255.255.192.0'>
    <dhcp>
      <range start='10.152.128.1' end='10.152.191.254'/>
    </dhcp>
</ip>
</pre>

'''4.''' Restart the internal network.

{{CodeSelect|code=
sudo virsh net-destroy Whonix-Internal
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start Whonix-Internal
}}

'''5.''' Use <code>sudo ifconfig</code> to confirm if dynamic IP assignment is functional.

'''6.''' ''Optional:'' Construct a static IP address.

Libvirt also allows the pairing of a static IP from the DHCP server to a VM with a specific MAC address if services in the Workstation depend on predictable IPs. See the [https://libvirt.org/formatnetwork.html#elementsAddress host attribute] under the dhcp element.
}}

== Snapshot Migration ==

If the VM has snapshots that you wish to preserve, the snapshot xml-files of the source VM should be dumped with the following commands. <ref>https://serverfault.com/a/648871</ref>
{{Box|text=
'''1.''' List snapshot names of the VM.

{{CodeSelect|code=
virsh snapshot-list --name $dom
}}

'''2.''' Dump each snapshot you want to back-up.

{{CodeSelect|code=
virsh snapshot-dumpxml $dom $name > file.xml 
}}

'''3.''' Restore snapshots at the destination.

{{CodeSelect|code=
virsh snapshot-create --redefine $dom file.xml
}}

'''4.''' ''Optional:'' Identify which snapshot is the current one.

On the source VM, run.

{{CodeSelect|code=
virsh snapshot-current --name $dom
}}

On the destination, run.

{{CodeSelect|code=
virsh snapshot-current $dom $name
}}
}}
== Nested KVM Virtualization ==

It is possible to create nested KVM VMs on KVM hosts. As root...

Check the current setting on the host. If the result is <code>[Y]</code>, then it is okay.

{{CodeSelect|code=
sudo cat /sys/module/kvm_intel/parameters/nested
}}

For AMD systems use <code>kvm_amd</code> instead.

{{CodeSelect|code=
sudo cat /sys/module/kvm_amd/parameters/nested
}}

If the result is [N], run the following command and reboot the system.

For Intel systems:

{{CodeSelect|code=
echo 'options kvm_intel nested=1' {{!}} sudo tee -a /etc/modprobe.d/qemu-system-x86.conf
}}

For AMD systems:

{{CodeSelect|code=
echo 'options kvm_amd nested=1' {{!}} sudo tee -a /etc/modprobe.d/qemu-system-x86.conf
}}

Host CPU instructions that include the <code>svm</code> and <code>vmx</code> extensions are passed through to the Workstation by default.

== Compressing Disk Images ==

Some users find it easier to move the sparse image files when they are compressed in a tarball. 

To re-compress files, run.

{{CodeSelect|code=
tar -Sczvf whonix.tar.gz <multiple file names separated by spaces>
}}

== Adding vCPUs ==

The pinning parameter <code>cpuset='1'</code> must be removed in the <code>vcpu</code> tag in the XML settings to allow adding more cores to a VM, otherwise performance issues and lockups will occur. CPU pinning is done to safeguard processes in other VMs that run cryptographic operations from side-channel attacks in case of a vulnerability in a cryptographic library.

To add more vcpus, increase the number in between the opening and closing <code>vcpu</code> tags. Alternatively, use the hardware 'Details' pane in virtual Machine Manager. 

If preserving cpu pinning while increasing core count is desired, pin the vcpus to different numbered ones compared to other sensitive VMs. Map them in a 1:1 ratio to avoid over committing cores (which leads to performance problems).

== 3D Graphics Acceleration ==

[[Dev/KVM#Virgl3D|Not yet functional]] as of Buster but this has been fixed upstream. Future enhancements for performance and security are planned. Will revisit in Bullseye.

== Shared Folders ==

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
'''Warning:''' Do not delete files from the shared folder from within the Workstation VM! The reason is they will reappear in the recycle bin across all snapshots with the same directory attached, causing a data leak across security levels. Use the file browser on the host to do cleanup instead.
}}

Follow these steps to move data between the guest and host. It is recommended to create/assign a unique directory per snapshot to keep shared content belonging to different security domains separate.

{{Box|text=
'''1.''' On the host run the following command in a terminal (Start Menu &rarr; Applications &rarr; System &rarr; Terminal).

Replace user name <code>user</code> with your actual user name.

{{CodeSelect|code=
mkdir /home/user/shared
}}

'''2.''' Adjust permissions on the host to allow read and write access to the folder with chmod.

Replace user name <code>user</code> with your actual user name.

{{CodeSelect|code=
chmod 777 /home/user/shared
}}

'''3.''' Enable shared folders in VirtManager.

<code>VirtManager</code> &rarr; <code>Select VM</code> &rarr; <code>Edit</code> &rarr; <code>Virtual Machine Details</code> &rarr; <code>Details</code> &rarr; <code>Add Hardware</code> &rarr; <code>File System</code>
</pre>

'''4.''' Choose the following settings.

Replace user name <code>user</code> with your actual user name.

* <u>Mode:</u> Mapped <ref>The file sharing mode {{Code2|mapped}} is just an example, using squash or passthrough is possible by selecting them from the drop down menu. Mapped is recommended for security.</ref>
* <u>Driver:</u> Default
* <u>Source Path:</u> {{Code|/home/user/shared}}
* <u>Target Path:</u> {{Code|shared}}

Click finish. Done.

{{workstation_product_name_short}} should automatically find and mount the shared directory once its created and enabled on the Host. 
}}

=== Mandatory Access Control ===

<u>Note:</u> If your system is configured to use a Mandatory Access Control framework then it might be necessary to configure exceptions to allow the confined guests to communicate with the shared folder on the host.

Tests with Apparmor have shown it operates transparently with shared folders, without the need for a manual exception configuration.

On the host, chmod must be applied to the shared folder's contents to access the files.

Replace user name <code>user</code> with your actual user name.

{{CodeSelect|code=
sudo chmod 777 -R /home/user/shared
}}

If SELinux is disabled then everything should be functional. If SELinux is enabled, it is necessary to add a policy for files under the shared folder on the host. SELinux will not allow this folder to be shared until it is labeled <code>svirt_image_t</code>. To achieve this add the following policy on the host using semanage. Note that these steps must be re-applied every time something is transferred. <ref>http://nts.strzibny.name/how-to-set-up-shared-folders-in-virt-manager/</ref> <ref>https://unix.stackexchange.com/questions/60799/selinux-interfering-with-host-guest-file-sharing-using-kvm</ref>

{{CodeSelect|code=
root@host# semanage fcontext -a -t svirt_image_t “/home/user/shared(/.*)?”
}}
{{CodeSelect|code=
root@host# restorecon -vR /home/user/shared
}}

If you are using the command line instead of virt-manager to edit the vm's device settings, add this next section to the xml. 

<pre style="white-space: pre-wrap;">
<filesystem type='mount' accessmode='mapped'>
    <source dir='/home/user/shared'/>
    <target dir='shared'/>
</filesystem>
</pre>

== USB Passthrough ==

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
'''Warning:''' Only connect USB devices to {{workstation_product_name}} when it is in a clean, trusted state! The only safe and recommended way to move files out of a VM is through Shared Folders.
}}

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = 
'''Warning:''' This isolation method is not fool-proof for sandboxing untrusted USB devices, because a sophisticated attacker can tweak their BadUSB payload to crash the guest and cause the host to take control of the device and parse its malicious code.
}}

Libvirt supports passing through a computer's integrated webcam or any other USB devices. <ref>https://bugzilla.redhat.com/show_bug.cgi?id=1135488</ref> <ref>https://askubuntu.com/questions/564708/qemu-kvm-virt-manager-passthrough-of-usb-webcam-to-windows-7-enterprise-creates</ref> Debian contributors have disabled USB auto-redirection by default to prevent the accidental passthrough of trusted USB devices to untrusted guests, <ref>https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=765016</ref> <ref>https://anonscm.debian.org/cgit/pkg-libvirt/virt-manager.git/commit/?id=d81fd3c3af1abde1fa0e2bf3b79643f36836f45b</ref> so they must be reverted temporarily. Once finished, change them back to safe defaults by going through the steps in reverse order.

'''Limitations:''' These steps apply to USB storage devices only. Portable devices such as phones and tablets are problematic and may not be successfully auto-redirected.

The USB drive will only be isolated so long as the {{workstation_product_name}} is running. Do not close the VM GUI window or the device will be reassigned to the host. The VM window must be in focus (either mouse grabbed or in fullscreen mode just to be safe) when initially plugging in the device. The VM window can be minimized after it is detected in the guest. It is unnecessary to wait for the VM to completely boot.

{{Box|text=
'''1.''' Edit the libvirt glib-2.0 schema.

{{CodeSelect|code=
sudo nano /usr/share/glib-2.0/schemas/10_virt-manager.gschema.override
}}

'''2.''' Change the default contents.

<pre>
[org.virt-manager.virt-manager.console]
auto-redirect=false
</pre>

Should be changed to.

<pre>
[org.virt-manager.virt-manager.console]
</pre>

'''3.''' Recompile the schemas for changes to take effect. <ref>https://developer.gnome.org/gio/stable/glib-compile-schemas.html</ref> 

'''4.''' Close all instances of Libvirt/Virtual Machine Manager and restart them so the new settings apply.

{{CodeSelect|code=
sudo glib-compile-schemas /usr/share/glib-2.0/schemas/
}}

'''5.''' {{Box|text=
'''1.''' In the ''Details'' pane change the ''Controller USB'' device model.

<code>Hypervisor Default</code> &rarr; <code>USB 2</code>

'''2.''' While {{workstation_product_name}} is turned off, add four USB Redirection devices or as many as the number of USB ports the machine has to cover them all.

<code>{{workstation_product_name}} viewer window</code> &rarr; <code>View</code> &rarr; <code>Details</code> &rarr; <code>Add Hardware</code> &rarr; <code>USB Redirection</code>

'''3.''' Start {{workstation_product_name}} and select the device connected to the host that you want to passthrough.

<code>{{workstation_product_name}} viewer window</code> &rarr; <code>File</code> &rarr; <code>Redirect USB</code> &rarr; <code>Choose: Webcam (or another USB Device)</code>

Note this last step must be done on demand as the device passed through is not set permanently across reboots. This prevents mistakes like USB passthrough when the VM is in an untrusted state.
}}

'''6.''' Boot {{workstation_product_name}} and connect the USB thumbdrive. 

The thumbdrive should be automatically seen in the guest only.
}}

== Editing an Imported Machine's XML Configuration ==

Eventually configure your favorite editor to make changes. Set visual as your favorite editor -- the relevant software must be installed, such as kwrite, leafpad, kate, vi, nano, vim and so on.

<pre>
export VISUAL=kwrite
</pre>

Edit.

{{CodeSelect|code=
virsh -c qemu:///system edit {{gateway_product_name_short}}
}}

== Disable Microphone Input ==

[[Microphone]] input to guests is a nice feature for [[VoIP]], but it is dangerous to have on by default. It is [[Pre_Install_Advice#Microphone|good practice]] to disable the microphone on your host system through sound settings when it is not in active use. 

The shipped configuration only includes a speaker by default (without a microphone) to prevent malware in the VM from eavesdropping on the user. To enable microphone input for select guests, edit the configuration and change <code><codec type='output'/></code> -> <code><codec type='micro'/></code>.

== Creating Multiple Internal Networks ==

Open the {{project name}} network XML file and change the name attribute to something different than the internal network that is currently running, for example 'Whonix-Internal2', 'Whonix-Internal3' and so on. The default network name in use is 'Whonix-Internal'.

== Alternative Configurations ==

Libvirt can support a variety of containment mechanisms. Currently supported mechanisms include KVM on the x86_64 platform and QEMU, but more configurations might be added at a later date. If hardware virtualization extensions are available, always use the KVM one.

To use another configuration, import its XML file with virsh.

== How to Leave KVM when no X is Running ==

In the hypothetical situation whereby a user is "trapped" in a [[Desktop#Virtual_Consoles|virtual console]] inside a VM without graphical desktop environment (X Window System) ("<code>sudo service lightdm stop</code>"), it is still possible to switch back to the host.

In other words, should the graphical desktop environment crash or be terminated, the user may be "trapped" inside a black VM window. It is possible to exit this.

The emulated tablet device handles this by not allowing the mouse to be captured by the guest, however this is still possible:

Press <code>Ctrl_L & Alt_L</code>

== Setting up gdb to work with qemu-kvm via libvirt ==

In order to debug a Linux kernel that is running as a KVM guest, the <code>-s</code> parameter must be specified for the command line of qemu-kvm. Unfortunately there is no (easy) way to do this when libvirt and virt-manager are used to manage your virtual machines (instead of using KVM directly). In this case it is necessary to change the XML configuration of the virtual machine so that the <code>-s</code> parameter is passed on to qemu-kvm.

{{Box|text=
'''1.''' Open the XML configuration.

{{CodeSelect|code=
virsh edit $guestvm
}}

Here, <code>$guestvm</code> is the name of the VM that is managed via virt-manager. This will bring up the XML configuration of the VM in your editor. 

'''2.''' Edit the XML configuration.

Change the first line of the XML file from.

<pre>
<domain type='kvm'>
</pre>

To.

<pre>
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
</pre>

It is also necessary to add this setting.

<pre>
<qemu:commandline>
<qemu:arg value='-s'/>
</qemu:commandline>
</pre>

Under the <code><domain></code> level of the XML. 

'''3.''' Save the XML configuration.

After saving and quitting the editor, the new configuration will come into effect. When the virtual machine is started, there will be a local TCP port (<code>1234</code> by default) that can be used as a remote debugging port from gdb.

'''4.''' Connect to the local TCP port.

Use the following command from gdb running on the host machine.

<pre>
target remote localhost:1234
</pre>

Source: <ref>https://gymnasmata.wordpress.com/2010/12/02/setting-up-gdb-to-work-with-qemu-kvm-via-libvirt/</ref>
}}

== Unsafe Features ==

The features below have serious security implications and should not be used. This applies to all hypervisors in general.

=== LVM Storage ===

QCOW2 virtual disk images are the recommended and default storage format for KVM. LVM or any other storage mechanism must be avoided for security and privacy. LVM misconfiguration has serious security consequences and exposes the host filesystem to the processes running on the guest. <ref>https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Virtualization_Administration_Guide/sect-Virtualization-Adding_storage_devices_to_guests-Adding_hard_drives_and_other_block_devices_to_a_guest.html </ref>

In the event a virtual disk is no longer used -- where the low-level view of the storage can be controlled -- data created by VMs can easily be recovered and exfiltrated by malicious forensics tools run in a VM at a later time. This is extremely dangerous and can expose all kinds of information originally created in a VM of higher trust level. This leads to deanonymization, past session linking and theft of sensitive information and keys. <ref>https://github.com/fog/fog/issues/2525</ref> <ref>https://news.ycombinator.com/item?id=6983097</ref> This setting is disabled in cloud tenancy environments.

=== HugePages ===

THP/Hugepages aid rowhammer attacks <ref>https://arxiv.org/pdf/1507.06955v1.pdf</ref> and memory de-duplication attacks (see KSM below) and therefore must be disabled for the guest and on the host. Research suggests that Debian hosts do not enable this feature and it is also disabled in cloud tenancy environments.

=== Memory Ballooning ===

Memory ballooning can potentially be abused by malicious guests to mount rowhammer attacks on the host. <ref>https://www.whonix.org/pipermail/whonix-devel/2016-September/000746.html</ref>

=== Clipboard Sharing ===

SPICE allows accelerated graphics and clipboard sharing. The clipboard is disabled by default for security reasons:
* To prevent the accidental copying of a link to a website that was visited anonymously to the non-anonymous host browser (or vice versa).
* To stop malware in {{project name}} Workstation from pilfering sensitive info from the clipboard.

If you still want to enable it, edit the VM config file and then change <code><clipboard copypaste='no'/></code> to 'yes', then save and restart.

=== KSM ===

KSM is a memory de-deuplication feature that conserves memory by combining identical pages across VM RAM, but it is not enabled by default. Enabling this feature is dangerous because it allows cross-VM snooping by a malicious process. <ref>[http://www.ieee-security.org/TC/SP2016/papers/0824a987.pdf Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector]</ref> It is capable of inferring what programs/pages are being visited outside the VM. <ref>https://staff.aist.go.jp/c.artho/papers/EuroSec2011-suzaki.pdf</ref> This feature is disabled in cloud tenancy environments and can also allow attackers to modify/steal APT keys and source lists of the host. <ref>[https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_razavi.pdf Flip Feng Shui: Hammering a Needle in the Software Stack]</ref> <ref>https://archive.is/aB7Kg</ref>

=== Device Passthrough ===

Both USB and PCI device passthrough permit advanced attackers to flash the firmware of those devices and infect the host or other VMs. <ref>https://docs.openstack.org/security-guide/compute/hardening-the-virtualization-layers.html#physical-hardware-pci-passthrough</ref>

== XML Settings ==

For more information on settings, please refer to the [https://libvirt.org/formatdomain.html Libvirt manual].

= Troubleshooting =

== Reboot? ==

* Did you reboot after installing KVM?
* Did you reboot after adding users to groups?

Please add this information if making a support request.

== Unable to connect to libvirt ==

If the following error appears.

<pre>
Unable to connect to libvirt.

Verify that the 'libvirtd' daemon is running.

Libvirt URI is: qemu:///system
</pre>

Make sure you [[KVM#Addgroup|added groups]] and [[KVM#Reboot|rebooted]].

== Unable to open a connection to the libvirt management daemon ==

If the following error appears.

<pre>
Unable to open a connection to the libvirt management daemon.

Libvirt URI is: qemu:///system

Verify that:
- The 'libvirtd' daemon has been started
</pre>

Check the KVM installation.

{{CodeSelect|code=
sudo service qemu-system-x86 restart ; echo $? ; sudo service libvirt-bin restart ; echo $? ; sudo service libvirt-guests restart ; echo $?
}}

The output should show.

<pre>
0
[ ok ] Restarting libvirt management daemon: /usr/sbin/libvirtd.
0

Running guests on default URI: no running guests.
0
</pre>

In this case, it could be a permissions problem.

== hda-duplex not supported in this QEMU binary ==

If this error appears you might be a member of the {{Code|libvirt}} group, but lack membership of the {{Code|kvm}} group.

In this case, it helps to change.

<pre>
    <sound model='ich6'>
</pre>

To.

<pre>
    <sound model='ac97'>
</pre>

== process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed ==

If the following error appears.

<pre>
Error starting domain: internal error: process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed: 16 Device or resource busy
failed to initialize KVM: Device or resource busy
</pre>

Then it is not possible other non-KVM VMs (such as VirtualBox VMs) might already be running, since two concurrent hypervisor instances is not supported by KVM / VirtualBox.

== Permissions ==

{{CodeSelect|code=
ls -la /var/run/libvirt/libvirt-sock
}}

== Add Version Numbers to Support Request ==

If problems are experienced, be sure to note what versions of libvirt-bin, qemu-kvm and virt-manager are in use as part of the support request. If you are using Debian, the following command will determine the software versions.

{{CodeSelect|code=
dpkg-query --show --showformat='${Package} ${Version} \n' libvirt-bin qemu-kvm virt-manager
}}

== User Help Forum ==

[https://forums.whonix.org/c/kvm {{project name}} KVM User Help Forum]

== Alternative Guides ==

For alternative installation guides contributed by community members, see: [[KVM/Installation Screenshots|Installation Screenshots]].

= Development =

* [[Dev/KVM|KVM Development]]
* [https://phabricator.whonix.org/tag/kvm/ KVM {{project name}} Bug Tracker]
* [https://github.com/{{project_name_short}}/whonix-libvirt whonix-libvirt github]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
