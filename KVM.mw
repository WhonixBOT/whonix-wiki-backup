{{Header}}
{{#seo:
|description=Using {{project name}} with KVM instead of VirtualBox
|image=https://www.whonix.org/w/images/b/be/234234234236kvm.png
}}

= General =
== What is KVM? ==
For an openly developed, free and open-source software (FOSS), GPL licensed hypervisor that can run Whonix, <ref>There are also [[Main_Page#Download_{{project_name}}|other platforms]].</ref> it is recommended to use [https://www.linux-kvm.org/page/Main_Page Kernel Virtual Machine (KVM)] that comes with the GNU/Linux OS. KVM combined with the [https://virt-manager.org/ VirtualMachineManager] front-end should provide a familiar, intuitive and easy-to-use GUI.

For a detailed view on KVM's security merits read the [https://www.atsec.de/fileadmin/user_upload/whitepaper/kvm_security_comparison.pdf audit report] issued by an independent security auditing firm.

== Why Use KVM Over VirtualBox? ==
The VirtualBox developer team have recently taken the decision to switch out the BIOS in their hypervisor with one that requires compilation by a toolchain that [[Dev/Virtualization_Platform#VirtualBox_no_longer_in_Debian_main|does not meet the definition of Free Software]] as per the guidelines of the Free Software Foundation. This move is considered problematic for free and open source software projects like Debian, on which {{project name}} is based. 

The issues of the Open Watcom License are explained in [https://www.mail-archive.com/debian-legal@lists.debian.org/msg34687.html this thread] on the Debian Mailinglist. In summary, there are issues surrounding the contradictory language of the license, the assertion of patents against software that rely upon it, and the placing of certain restrictions on software uses. For these reasons, those who care about running FOSS and appreciate its ethical views are recommended to avoid running VirtualBox; also see  [[Avoid_nonfree_software|avoid non free software]].

Besides this licensing issue, a more tangible reason to avoid VirtualBox is the security practices of Oracle who produce the software. Events and news in recent years (like the Snowden leaks) demonstrate there is an urgent need for increased transparency and verifiable trust in the digital world. Oracle is infamous for their lack of transparency in disclosing the details of security bugs, as well as discouraging full and public disclosure by third parties. [https://www.techopedia.com/definition/21985/security-through-obscurity-sto Security through obscurity] is the flawed [http://www.oracle.com/us/support/assurance/vulnerability-remediation/disclosure/index.html modus operandi] at Oracle. <ref>[http://users.softlab.ntua.gr/~taver/security/secur3.html What is "security through obscurity"]: <blockquote>The basis of STO has always been to run your system on a "need to know" basis. If a person doesn't know how to do something which could impact system security, then s/he isn't dangerous. ... Nowadays there is also a greater need for the ordinary user to know details of how your system works than ever before, and STO falls down a as a result. Many users today have advanced knowledge of how their operating system works, and because of their experience will be able to guess at the bits of knowledge that they didn't "need to know". This bypasses the whole basis of STO, and makes your security useless.</blockquote></ref>

Not going public with the details of vulnerabilities only leads to laziness and complacency on behalf of the company that fields the affected products. One example is this historical [https://en.wikipedia.org/wiki/Zero-day_(computing) 0day vulnerability] reported privately to Oracle in 2008 by an independent security researcher. Over four years later, the vulnerability [https://seclists.org/fulldisclosure/2012/Apr/343 remained unfixed], exhibiting Oracle has a history of failing to provide timely patches to customers so they can protect themselves.

VirtualBox also contains significant functionality that is only available as a proprietary extension, such as USB / PCI passthrough and RDP connectivity. Based on Oracle's unfriendly track record with the FOSS community in the past -- examples include OpenSolaris and OpenOffice -- it would be unsurprising if users were charged  for these restricted features in the future, or if the project was abandoned due to insufficient monetization.

=  First time user? =
{{Default_Passwords}}
{{First_Time_User}}

= KVM Setup Instructions =
== Before installing == 
{{Computer Security Education}}

== Install KVM ==
{{Anchor|Debian stable}}
=== Debian ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using Debian {{Code2|stable}} (currently: {{Code2|Stretch}}), click on expand on the right.

<div class="mw-collapsible-content">
{{Sudo_Setup}}

Update package lists.

{{CodeSelect|code=
sudo apt-get update
}}

For '''Debian Stretch+''' you need to install:.

{{CodeSelect|code=
sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients virt-manager
}}



'''Apparmor'''

Unless manually enabled, Apparmor is not activated in a default Debian install for sVirt to take advantage of. 

Install:

{{CodeSelect|code=
sudo apt-get install apparmor
}}

Change the following line in grub settings to activate it on start-up:

{{CodeSelect|code=
sudo nano /etc/default/grub
}}

<code>GRUB_CMDLINE_LINUX_DEFAULT="quiet"</code>  -> <code>GRUB_CMDLINE_LINUX_DEFAULT="quiet apparmor=1 security=apparmor"</code>

Update the grub configuration and reboot for it to take effect:

{{CodeSelect|code=
sudo update-grub
sudo reboot
}}


</div>
</div>

=== Arch Linux ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using Arch Linux, click on expand on the right.

<div class="mw-collapsible-content">
Update package lists and install.

{{CodeSelect|code=
sudo pacman -Sy qemu libvirt virt-manager
}}

</div>
</div>

=== Other Distributions ===
<div class="toccolours mw-collapsible mw-collapsed">
If you are using a Linux distribution, that is not documented above, click on expand on the right.

<div class="mw-collapsible-content">
You need to have qemu-kvm and libvirt-bin. If you want to use a graphical user interface, which you most likely want, you also need virt-manager. Likely the required software can be installed using your usual distribution's package manager.

If you get one of the following errors while later using {{Code|virsh define}}.

{{CodeSelect|code=
error: Failed to define domain from {{gateway_product_name_short}}_kvm-8.6.2.8.xml
error: internal error Unknown controller type 'pci
}}

{{CodeSelect|code=
{{gateway_product_name_short}}_kvm-8.6.2.8.xml:24: element pm: Relax-NG validity error : Element domain has extra content: pm
{{gateway_product_name_short}}_kvm-8.6.2.8.xml fails to validate
}}

{{CodeSelect|code=
Relax-NG validity error : Extra element devices in interleave
{{gateway_product_name_short}}_kvm-8.6.2.8.xml:24: element devices: Relax-NG validity error : Element domain failed to validate content
{{gateway_product_name_short}}_kvm-8.6.2.8.xml fails to validate
}}

Then you most likely need a more recent version of libvirt and kvm.

</div>
</div>
Please feel free to share detailed instructions for other distributions!

== Notice ==

'''Arch Users'''

It's been reported that the blkio throttling feature seems to be missing/unsupported on the latest Arch version as of March 2019. This causes VM start up to fail.<ref>https://forums.whonix.org/t/problem-starting-whonix-14-after-upgrade-unable-to-write-to-sys-fs-cgroup-blkio-m achine-slice-machine-qemu/6999/5</ref> To work around this the feature must be removed for now:

{{CodeSelect|code=
sudo virsh edit {{gateway_product_name_short}}
}}

then same for ‘{{workstation_product_name_short}}’

Strip out this setting:

<pre style="white-space: pre-wrap;">
 <blkiotune>
    <weight>250</weight>
</blkiotune>
</pre>

Then save and start the VMs.

== Addgroup ==

In order to be able to manage virtual machines as regular (non-root) user, you need to add that user to the {{Code|libvirt}} and the {{Code|kvm}} group. Assuming the simple use case, that you wish to use KVM with the user you are currently logged in, and assuming you are using Debian, simply use the following command. (On Ubuntu the group names vary and is called '''libvirtd''' instead).

{{CodeSelect|code=
sudo addgroup "$(whoami)" libvirt
}}

{{CodeSelect|code=
sudo addgroup "$(whoami)" kvm
}}

<ref>
By default Debian doesn't use sudo so you can add the groups with usermod. If your user is "foo" you would do:

{{CodeSelect|code=
usermod -a -G libvirt foo
}}

And.

{{CodeSelect|code=
usermod -a -G kvm foo
}}
</ref>

=== Other distributions ===

If you are using other distributions, have a look at your distribution's manual. (Such as [https://wiki.archlinux.org/index.php/libvirt Arch Linux's libvirt wiki page].)

== Reboot ==
After installation of KVM, reboot is required! After adding users to groups, reboot is required!

{{CodeSelect|code=
sudo reboot
}}

== Network Start ==

'''Although it has nothing to do with {{project name}} since 14+, it's helpful when running other VMs.'''

Make sure KVM's / QEMU's default networking is enabled and started.<ref>https://forums.whonix.org/t/kvm-networking-broken/644</ref> <ref>https://wiki.debian.org/KVM#Troubleshooting</ref>

{{CodeSelect|code=
virsh -c qemu:///system net-autostart default
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start default
}}

== Build from Scratch ==
Advanced users are encouraged to [[Dev/Build_Documentation|build]] {{project name}} images for high security assurance.

== Download and Extract ==
=== Introduction ===
It is highly recommended you read and apply the steps outlined here. By applying a known and tested configuration, you will be better off in convenience and security.

Make sure you use the qcow2 images that are provided by the {{project name}} project instead of rolling your own. <ref>As in, manually converting them from .ova to .qcow2 is no longer recommended, since you can download .qcow images from the {{project name}} project.</ref> They contain important performance optimizations. <ref>As per [https://github.com/{{project_name_short}}/{{project_name_short}}/blob/master/build-steps.d/2400_convert-img-to-qcow2 build-steps.d/2400_convert-img-to-qcow2], these are "-o cluster_size=2M" and "-o preallocation=metadata".</ref> (Unless you [[Dev/Build_Documentation|created them from source]]. <ref>Because then you have the same performance optimizations.</ref>)

If you have issues with free disk space, using a file system supporting [[sparse files]] is recommended, also see [https://forums.whonix.org/t/please-reduce-kvm-image-size/160 forum discussion].

Already have existing {{project name}} libvirt images? Consider [[#Cleanup]] first.

For simplicity, so you can copy and paste the following commands without changes, download and store {{project name}} images in your home folder ({{Code2|/home/<your user name>}}).

=== Download {{project name}} ===
'''Download {{free}}'''

{{DownloadTableUnified
|url=https://sourceforge.net/projects/whonix-kvm/files
|flavor=XFCE
|after_slash=libvirt
|extension=libvirt.xz
|version=15.0.0.0.9
|appendix=/download
}}

=== Verify the {{project name}} images ===

Download [https://www.whonix.org/hulahoop.asc HulaHoop]'s [[OpenPGP]] key from the keyserver.

{{CodeSelect|code=
gpg --keyserver keys.gnupg.net --recv 04EF2F666D36C354058B9DD450C78B6F9FF2EC85
}}

The output should confirm the key was imported.

<pre>
gpg: key 0x50C78B6F9FF2EC85: public key "HulaHoop" imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

''If the {{project name}} signing key was already imported in the past'', the output should confirm the key is unchanged.

<pre>
gpg: key 0x50C78B6F9FF2EC85: "HulaHoop" not changed
gpg: Total number processed: 1
gpg:              unchanged: 1
</pre>

You may also verify that the key was signed by Patrick for extra assurance.

{{CodeSelect|code=
gpg --check-sigs "04EF 2F66 6D36 C354 058B 9DD4 50C7 8B6F 9FF2 EC85"
}}
Should show:

<pre>
pub   rsa4096/0x50C78B6F9FF2EC85 2018-11-26 [SCEA]
      04EF2F666D36C354058B9DD450C78B6F9FF2EC85
uid                   [ unknown] HulaHoop
sig!         0x8D66066A2EEACCDA 2018-12-14  Patrick Schleizer <adrelanos@riseup.net>
sig!3        0x50C78B6F9FF2EC85 2018-11-26  HulaHoop
sub   rsa4096/0xEB27D2F8CEE41ACC 2018-11-26 [SEA]
sig!         0x50C78B6F9FF2EC85 2018-11-26  HulaHoop

gpg: 3 good signatures
</pre>

If the following message appears at the end of the output.

<pre>
gpg: no ultimately trusted keys found
</pre>

Analyze the other messages as usual. This extra message does not relate to the {{project name}} signing key itself, but instead usually means the user has not created an OpenPGP key yet, which is of no importance when verifying virtual machine images.


Verify archive:

{{CodeSelect|code=
Whonix*.libvirt.xz.asc
}}

You should see output that includes:

<pre>
gpg: Good signature from "HulaHoop"
</pre>

=== Decompress ===
Use {{Code2|tar}} to decompress the archive.

{{CodeSelect|code=
tar -xvf Whonix*.libvirt.xz
}}

Do not use {{Code2|unxz}}! Extract the images using {{Code2|tar}}.

=== License Agreement ===
{{License Read}}

== XML Modification (OPTIONAL) ==
Modifying a machine's XML file gives more fine grained control over its settings than what is exposed through the virt-manager GUI. Unless you know what you are doing, editing configuration defaults is neither recommended nor necessary.

{{Open_File|filename=
{{gateway_product_name_short}}*.xml
}}

{{Open_File|filename=
{{workstation_product_name_short}}*.xml
}}

You could always edit the XML files later too, if needed as explained in the [[#Editing an imported Machine's XML Configuration]] chapter.

== Importing {{project name}} VM Templates ==
The supplied XML files serve as a description for libvirt, that tell it what properties a {{project name}} machine and networking it should have.


1. Add and activate the virtual networks (settings files also in the same folder as {{project name}} Gateway). If the definition of the {{project name}} internal network fails because the virtual bridge "virbr2" already exists, edit the internal_network*.xml file and change the name to one that doesn't exist, e.g. "virbr3" (you can list all existing bridge adapters with "sudo brctl show"):

{{CodeSelect|code=
virsh -c qemu:///system net-define {{product_name_short}}_external*.xml
}}

{{CodeSelect|code=
virsh -c qemu:///system net-define {{product_name_short}}_internal*.xml
}}



{{CodeSelect|code=
virsh -c qemu:///system net-autostart external
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start external
}}

{{CodeSelect|code=
virsh -c qemu:///system net-autostart internal
}}

{{CodeSelect|code=
virsh -c qemu:///system net-start internal
}}


2. Followed by importing the {{project name}} Gateway and Workstation images:

{{CodeSelect|code=
virsh -c qemu:///system define {{gateway_product_name_short}}*.xml
}}

{{CodeSelect|code=
virsh -c qemu:///system define {{workstation_product_name_short}}*.xml
}}

== Manipulating QCOW2 Images ==

To interact with KVM disk images use qemu-img. It can resize, convert virtual disks to other formats and more. Its not necessary nor recommended to change the official images so proceed only if you know what you are doing.

See the manual for more commands <ref>http://linux.die.net/man/1/qemu-img</ref>

== Moving {{project name}} Image Files ==
The XML files are configured to point to the default storage location of <code>/var/lib/libvirt/images</code>. These steps will show how to move the images there in order for the machines to boot.

Note: Changing the default location may conflict with SELinux, which will prevent the machines from booting.

It is recommended to move the image files instead of copying them:

{{CodeSelect|code=
sudo mv {{gateway_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo mv {{workstation_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}

{{Anchor|sparse files}}
{{project_name}} disk images are [[sparse files]], meaning they expand when filled rather than allocating their entire size, 100GB outright. These are known as sparse files and need special commands when copying them to ensure they don't lose this property, leading them to occupy all the actual space. We are copying to a privileged location in the system, so we have run with higher privileges (sudo):

{{CodeSelect|code=
sudo cp --sparse=always {{gateway_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo cp --sparse=always {{workstation_product_name_short}}*.qcow2 /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}


It is possible to run image files from encrypted containers. sVirt protections are confirmed to be in effect for image files at alternative locations.

Change the permissions on the container mount point directory so virtual machine manager can access the image. In Zulucrypt containers are mounted under <code>/run/media/private/user</code>:<ref>https://forums.whonix.org/t/cant-use-var-lib-libvirt-images-for-whonix-images-what-to-do-about-apparmor/7192/3</ref>
{{CodeSelect|code=
sudo chmod og+xr /run/media/private/user/$container_name
}}

== Cleanup ==
After importing {{project_name}}, you are advised to delete the archives ({{Code2|.libvirt.xz}} files) and the temporarily extracted folders or to move them into a custom location. This is useful to avoid conflicts and confusion should you later download a new version of {{project_name}}.

To delete them.

{{CodeSelect|code=
rm {{project_name_short}}*.libvirt.xz
rm {{project_name_short}}*.asc
rm -r {{gateway_product_name_short}}*
rm -r {{workstation_product_name_short}}*
rm -r {{project_name_short}}_external_network*
rm -r {{project_name_short}}_internal_network*
rm -r WHONIX*
}}

== Start ==
If you know Virtual Machine Manager, there is nothing special about starting {{project name}} VMs compared to starting other VMs. First start {{gateway_product_name}}, then start {{workstation_product_name}}.
=== Graphical User Interface (GUI) ===
Start Virtual Machine Manager.

<code>Start Menu</code> -> <code>Applications</code> -> <code>System</code> -> <code>Virtual Machine Manager</code>

Start {{gateway_product_name}}.

<code>click on {{gateway_product_name_short}}</code> -> <code>click open</code> -> <code>click the play symbol</code>

Repeat the same for {{workstation_product_name}}.

=== Command Line Interface (CLI) ===
Use 

{{CodeSelect|code=
virsh -c qemu:///system start {{gateway_product_name_short}}
}}

To start {{gateway_product_name}}. Respectively

{{CodeSelect|code=
virsh -c qemu:///system start {{workstation_product_name_short}}
}}

To start workstation

== Adjust Display Resolution ==

<code>Whisker Menu</code> -> <code>display</code> -> <code>select resolution</code><ref>https://forums.whonix.org/t/no-auto-resize-with-qxl-driver/7145/3</ref>

Save then take snapshot.

 

'''Deprecated:'''

''Instructions kept here in case it may work again in the future. This feature in virt-manager will cause the guest screen to be unresponsive. This is caused by a reported upstream bug that has not been resolved.


With the QXL driver (installed by default) you can seamlessly adjust the display resolution to adjust to your Host screen size.<ref>https://elmarco.fedorapeople.org/manual.html</ref>

{{CodeSelect|code=
Virt-Manager {{workstation_product_name}} window -> View -> Scale Display -> Always | Check: Auto resize VM with window
}}

== After installing ==
{{Post Install Advice}}

== Uninstall ==
<div class="toccolours mw-collapsible mw-collapsed">
If you want to remove {{project name}} KVM VMs, {{project name}} network and {{project name}} images, click on Expand on the right.

<div class="mw-collapsible-content">
1. Make sure you powered off the VM you want to shut down. You can also make sure you have shut down the VM using command line.

{{CodeSelect|code=
virsh -c qemu:///system destroy {{gateway_product_name_short}}
}}

{{CodeSelect|code=
virsh -c qemu:///system destroy {{workstation_product_name_short}}
}}

2. Remove KVM VM settings.

{{CodeSelect|code=
virsh -c qemu:///system undefine {{gateway_product_name_short}}
}}

{{CodeSelect|code=
virsh -c qemu:///system undefine {{workstation_product_name_short}}
}}

3. Shut down KVM Network {{Code2|{{product_name_short}}}}.

{{CodeSelect|code=
virsh -c qemu:///system net-destroy {{project_name}}
}}

4. Remove Network {{Code2|{{product_name_short}}}}.

{{CodeSelect|code=
virsh -c qemu:///system net-undefine {{project_name}}
}}

5. Delete the images. (All data will be lost unless you made a backup of your valued data.)

{{CodeSelect|code=
sudo rm /var/lib/libvirt/images/{{gateway_product_name_short}}.qcow2
}}

{{CodeSelect|code=
sudo rm /var/lib/libvirt/images/{{workstation_product_name_short}}.qcow2
}}

</div>
</div>

= KVM Upgrade Instructions =

Its highly recommended that you uninstall older {{project name}} versions and always run the newer one. Note that {{project name}} supports in-place apt-get upgrades too.

First, move your data out of the VM via shared folders and perform the [[#Cleanup|cleanup steps]] followed by [[#Download_and_Extract|installation]] of the new images.

= Optional =
== Multiple {{gateway_product_name}} ==

See: [[Multiple_{{gateway_product_name_short}}#KVM|Multiple {{gateway_product_name}}]]

== Testing Upcoming Versions ==
Download the test images from latest folder listed [https://download.whonix.org/linux/ here]. Apply the [[#Multiple_{{gateway_product_name_short}}]] for running {{project name}} versions side by side with some differences:

1. Rename the test {{project name}} images to something unique, preferably by appending the version number to the name.

2. Edit the XML templates and change the VM names.

3. Import the images by following the installation steps [[#Importing_{{project_name_short}}_VM_Templates]] but keep in mind you must use the full name of the new images. Do not import the Network templates.

== Snaphot Migration ==

If the VM has snapshots that you want to preserve, you should dump the snapshot xml-files of the source VM with:<ref>https://serverfault.com/a/648871</ref>

List snapshot names of the VM:

{{CodeSelect|code=
virsh snapshot-list --name $dom
}}

Dump each snapshot you want to back-up:

{{CodeSelect|code=
virsh snapshot-dumpxml $dom $name > file.xml 
}}



Then for restoring snapshots at the destination use:

{{CodeSelect|code=
virsh snapshot-create --redefine $dom file.xml
}}


If you also care about which snapshot is the current one, then additionally do on the source VM:

{{CodeSelect|code=
virsh snapshot-current --name $dom
}}

and on the destination:

{{CodeSelect|code=
virsh snapshot-current $dom $name
}}

== Nested KVM Virtualization ==
It's possible to create nested KVM VMs on KVM hosts.

Check the current setting on the host. If the result is [Y], it's OK. For AMD systems use <code>kvm_amd</code> instead:

{{CodeSelect|code=
# cat /sys/module/kvm_intel/parameters/nested
}}

If the result is [N], change like follows and reboot the system:

{{CodeSelect|code=
# echo 'options kvm_intel nested=1' >> /etc/modprobe.d/qemu-system-x86.conf 
}}


Host CPU instructions that include the <code>svm</code> and <code>vmx</code> extensions are passed through to the Workstation by default.

== Compressing Disk Images ==
You may find it easier to move the sparse image files when they are compressed in a tarball. 

To re-compress files use:

{{CodeSelect|code=
tar -Sczvf whonix.tar.gz <multiple file names separated by spaces>
}}

== 3D Graphics Acceleration ==

By Debian Buster freeze the software requirements should be met. Other distros may be different so refer to the needed library versions [https://www.kraxel.org/blog/tag/virtio-gpu/ here].

Change your Workstation VM's XML settings as below:

<pre style="white-space: pre-wrap;">
<graphics type='spice'>
  <listen type='none'/>
  <gl enable='yes'/>
</graphics>
<video>
  <model type='virtio'/>
</video>
</pre>

== Shared Folders ==
{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' Do not delete files from the shared folder from within the Workstation VM because they will reappear in the recycle bin across all snapshots with the same directory attached, causing a data leak across security levels. Use the file browser on the host to do cleanup instead.
}}


To move data between the guest and host follow these steps. It is recommended to create/assign a unique directory per snapshot to keep shared content belonging to different security domains separate.

On the host run the following command in terminal (Start Menu -> Applications -> System -> Terminal).

{{CodeSelect|code=
sudo mkdir /home/yourusername/shared
}}

You must adjust permissions on the host to allow read and write access to the folder with chmod:

{{CodeSelect|code=
sudo chmod 777 /home/yourusername/shared
}}

Enable shared folders in VirtManager:


<code>VirtManager</code> -> <code>Select VM</code> -> <code>Edit</code> -> <code>Virtual Machine Details</code> -> <code>Details</code> -> <code>Add Hardware</code> -> <code>File System</code>
</pre>

Set:

'''Mode''': Mapped <ref>The file sharing mode {{Code2|mapped}} is just an example, using squash or passthrough is possible by selecting them from the drop down menu. Mapped is recommended for security.</ref>

'''Driver''': Default

'''Source Path''': {{Code|/home/yourusername/shared}}

'''Target Path''': {{Code|shared}}

Click finish. Done.


{{workstation_product_name_short}} should automatically find and mount the shared directory once its created and enabled on the Host. 



Note: If your system is configured to use a Mandatory Access Control framework you may need to configure exceptions to allow the confined guests to communicate with the shared folder on the host.

Tests with Apparmor has shown it to operate transparently with shared folders without needing any manual exception configuration by the user.

On the host chmod must be applied to the shared folder's contents to access the files:

{{CodeSelect|code=
sudo chmod 777 -R  /home/yourusername/shared
}}


If you don’t have SELinux enabled everything should work now. If you do, you will need to add a policy for files under your shared folder on your host. SELinux won’t allow you to share this folder until it’s labeled svirt_image_t. Here is how to add this policy on your host using semanage. Note that you will need to re-apply these steps everytime you transfer something:<ref>http://nts.strzibny.name/how-to-set-up-shared-folders-in-virt-manager/</ref><ref>https://unix.stackexchange.com/questions/60799/selinux-interfering-with-host-guest-file-sharing-using-kvm</ref>

{{CodeSelect|code=
root@host# semanage fcontext -a -t svirt_image_t “/home/yourusername/shared(/.*)?”
}}
{{CodeSelect|code=
root@host# restorecon -vR /home/yourusername/shared
}}


If you are using commandline instead of virt-manager to edit your vm's device settings, add this next section to the xml. 

<pre style="white-space: pre-wrap;">
<filesystem type='mount' accessmode='mapped'>
    <source dir='/home/yourusername/shared'/>
    <target dir='shared'/>
</filesystem>
</pre>

== USB Passthrough ==

Libvirt supports passing through a computer's integrated webcam or any other USB devices.<ref>https://bugzilla.redhat.com/show_bug.cgi?id=1135488</ref><ref>https://askubuntu.com/questions/564708/qemu-kvm-virt-manager-passthrough-of-usb-webcam-to-windows-7-enterprise-creates</ref>

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = 
'''Warning:''' You should only connect USB devices to {{workstation_product_name}} when it is in a clean, trusted state. The only safe and recommended way to move files out of a VM is through Shared Folders.
}}


Then in the ''Details'' pane change the ''Controller USB'' device model:


<code>Hypervisor Default</code> -> <code>USB 2</code>



While {{workstation_product_name}} is turned off, add four USB Redirection devices or as many as the number of USB ports the machine has to cover them all:

{{CodeSelect|code=
{{workstation_product_name}} viewer window -> View -> Details -> Add Hardware -> USB Redirection
}}


Start {{workstation_product_name}} and select the device connected to the host you want to passthrough:

{{CodeSelect|code=
{{workstation_product_name}} viewer window -> File -> Redirect USB -> Choose: Webcam (or another USB Device)
}}

Note that the last step needs to be done on demand as the device passed through is not set permanently across reboots. This prevents mistakes like USB passthrough when the VM is in an untrusted state.



=== Sandboxing Untrusted USB Drives ===

Apply these steps before the instructions above to auto-sandbox untrusted USB flash drives. USB auto-redirection is disabled by default by Debian maintainers to prevent accidental passthrough of trusted USB devices to untrusted guests.<ref>https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=765016</ref><ref>https://anonscm.debian.org/cgit/pkg-libvirt/virt-manager.git/commit/?id=d81fd3c3af1abde1fa0e2bf3b79643f36836f45b</ref>  so they must be reverted temporarily. Once you are done, change them back to safe defaults by going through the steps in reverse order.


'''Limitations'''

These steps apply to USB storage devices only. Portable devices such as phones and tablets are problematic and may not be successfully auto-redirected.

The USB drive will only be isolated as long as the {{workstation_product_name}} is running. Do not close VM GUI window or the device will be reassigned to the host. The VM window must be in focus (either mouse grabbed or in fullscreen mode just to be safe) when initially plugging in the device. You can minimize the VM window after its detected in the guest. You don't have to wait for the VM to completely boot too.

This isolation method is not fool-proof as a sophisticated attacker can tweak their BadUSB payload to crash the guest and cause the host to take control of the device and parse its malicious code.



Edit the libvirt glib-2.0 schema:

{{CodeSelect|code=
sudo nano /usr/share/glib-2.0/schemas/10_virt-manager.gschema.override
}}


Change default contents:

<pre>
[org.virt-manager.virt-manager.console]
auto-redirect=false
</pre>

to 

<pre>
[org.virt-manager.virt-manager.console]
</pre>


Recompile for them to take effect<ref>https://developer.gnome.org/gio/stable/glib-compile-schemas.html</ref> Close all instances of Libvirt/Virtual Machine Manager and restart them for the new settings to apply:

{{CodeSelect|code=
sudo glib-compile-schemas /usr/share/glib-2.0/schemas/
}}


Add the USB Redirection devices as specified in previous instructions then boot {{workstation_product_name}} and connect the USB thumbdrive. It should be automatically seen in the guest only.

== Editing an imported Machine's XML Configuration ==
Eventually configure your faviorite editor to make changes. Set visual to your favorite editor (must be installed, examples are kwrite, leafpad, kate, vi, nano, vim, etc.).

<pre>
export VISUAL=kwrite
</pre>

Edit.

{{CodeSelect|code=
virsh -c qemu:///system edit {{gateway_product_name_short}}
}}

== Disable Microphone Input ==
[[Microphone]] input to guests, while a nice feature for [[VoIP]], is dangerous to have on by default. It is [[Pre_Install_Advice#Microphone|good practice]] to disable the microphone on your host system through sound settings if you are not actively using it.

It is not currently possible to ship a configuration file with the guest microphone input muted. If you need to have the host microphone turned on while denying access to the guest, mute the "virt-manager: record" device that shows up in the host's audio task-bar menu.

== Creating Multiple Internal Networks ==
Open {{project name}} network XML file and change the name attribute to something different than the internal network you are currently running, for example 'Whonix2' 'Whonix3' and so on. The default name used is 'Whonix'.

== Alternative Configurations ==
Libvirt can support a variety of containment mechanisms. Currently supported ones are KVM on the x86_64 platform and QEMU. More configurations could be added at a later date. If you have hardware virtualization extensions, always use the KVM one.

To use another configuration, import its XML file with virsh.

== How to leave KVM when no X is running ==

Situation... User is in terminal in a VM... No X is running ("sudo service kdm stop"). User wants to switch back to the host... How to do this?

The emulated tablet device handles this by not allowing the mouse to be captured by the guest. Its still possible though:

press <code>Ctrl_L & Alt_L</code>

== Setting up gdb to work with qemu-kvm via libvirt ==
If you want to be able to debug a Linux kernel that’s running as a KVM guest, you need to specify the ‘-s’ parameter for the command line of qemu-kvm. The problem is, there’s no (easy) way to do this when you’re using libvirt and virt-manager to manager your virtual machines, instead of using KVM directly. What you need to do is change the XML configuration of the virtual machine so that the ‘-s’ parameter is passed on to qemu-kvm

{{CodeSelect|code=
virsh edit $guestvm
}}

Here, $guestvm is the name of the VM that is managed via virt-manager. This will bring up the XML configuration of the VM in your editor. The first line of the XML file should be:

<pre>
<domain type='kvm'>
</pre>

This has to be changed to

<pre>
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
</pre>

and you also need to add:

<pre>
<qemu:commandline>
<qemu:arg value='-s'/>
</qemu:commandline>
</pre>

under the {{Code2|<domain>}} level of the XML. After you save and quit the editor, the new configuration will come into effect. When you start the virtual machine, there will be a local TCP port (1234 by default) that can be used as a remote debugging port from gdb. You can connect to this port by using the command

<pre>
target remote localhost:1234
</pre>

from gdb running on the host machine.

Source: <ref>https://gymnasmata.wordpress.com/2010/12/02/setting-up-gdb-to-work-with-qemu-kvm-via-libvirt/</ref>

== Unsafe Features ==

The features below have serious security implications and should not be used. This applies to all hypervisors in general.

=== LVM Storage ===
QCOW2 virtual disk images are the recommended and default storage format for KVM.

LVM  or any other storage mechanism must be avoided for security and privacy.

LVM misconfiguration has serious security consequences and exposes the host filesystem to the processes running on the guest. <ref>https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Virtualization_Administration_Guide/sect-Virtualization-Adding_storage_devices_to_guests-Adding_hard_drives_and_other_block_devices_to_a_guest.html </ref>

Because a virtual disk is no longer used, where the low-level view of the storage can be controlled, data created by VMs can easily be recovered and exfiltrated by malicious forensics tools run in a VM at a later time. This is extremely dangerous and can expose all kinds of information originally created in a VM of higher trust level. This leads to deanonymization, past session linking and theft of sensitive information and keys.<ref>https://github.com/fog/fog/issues/2525</ref><ref>https://news.ycombinator.com/item?id=6983097</ref> Disabled in cloud tenancy environments.

=== HugePages ===
THP/Hugepages aid rowhammer attacks<ref>http://arxiv.org/pdf/1507.06955v1.pdf</ref> and memory de-duplication attacks (see KSM below) and so must be disabled for the guest and on the host. As far is what we know Debian hosts do not enable this feature. Disabled in cloud tenancy environments.

===Memory Ballooning===
Memory ballooning can potentially be abused by malicious guests to mount rowhammer attacks on the host.<ref>https://www.whonix.org/pipermail/whonix-devel/2016-September/000746.html</ref>

=== Clipboard Sharing ===
SPICE allows accelerated graphics and clipboard sharing. The clipboard is disabled by default for security reasons to prevent accidentally copying a link to a website you visited anonymously to your non-anonymous host browser or vice versa and to stop malware in {{project name}} Workstation from pilfering sensitive info from your clipboard.

If you still want to enable it, edit the VM config file, then change <code><clipboard copypaste='no'/></code> to 'yes' then save and restart.

=== KSM ===
KSM is a memory de-deuplication feature that conserves memory by combining identical pages across VM RAM. It is not enabled by default. Enabling this feature is dangerous because it allows cross-VM snooping by a malicious process.<ref>[http://www.ieee-security.org/TC/SP2016/papers/0824a987.pdf Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector]</ref> It can infer what programs and what pages are being visited outside the VM. <ref>https://staff.aist.go.jp/c.artho/papers/EuroSec2011-suzaki.pdf</ref> Disabled in cloud tenancy environments. This feature can also allow attackers to modify/steal APT keys and source lists of the host. <ref>[https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_razavi.pdf Flip Feng Shui: Hammering a Needle in the Software Stack]</ref><ref>https://archive.is/aB7Kg</ref>

=== Device Passthrough ===
Both USB and PCI device passthrough would allow advanced attackers to flash the firmware of those devcies and infect the host or other VMs.<ref>http://docs.openstack.org/security-guide/compute/hardening-the-virtualization-layers.html#physical-hardware-pci-passthrough</ref>

== XML Settings ==
For more info on settings please refer to the [https://libvirt.org/formatdomain.html Libvirt manual]

= Troubleshooting =
== Reboot? ==
Did you reboot after installing KVM?

Did you reboot after adding users to groups?

Add this information should you make a support request.

== Unable to connect to libvirt. ==
If you are getting the following error.
<pre>
Unable to connect to libvirt.

Verify that the 'libvirtd' daemon is running.

Libvirt URI is: qemu:///system
</pre>

Make sure you [[KVM#Addgroup|added groups]] and [[KVM#Reboot|rebooted]].

== Unable to open a connection to the libvirt management daemon. ==
If you are getting the following error.

<pre>
Unable to open a connection to the libvirt management daemon.

Libvirt URI is: qemu:///system

Verify that:
- The 'libvirtd' daemon has been started
</pre>

Check your KVM installation:

{{CodeSelect|code=
sudo service qemu-system-x86 restart ; echo $? ; sudo service libvirt-bin restart ; echo $? ; sudo service libvirt-guests restart ; echo $?
}}

Should show.

<pre>
0
[ ok ] Restarting libvirt management daemon: /usr/sbin/libvirtd.
0

Running guests on default URI: no running guests.
0
</pre>

If you see that, it could be a permissions problem.

== hda-duplex not supported in this QEMU binary ==
Maybe you are a member of the {{Code|libvirt}} group, but not have the {{Code|lkvm}} group?

Maybe changing

<pre>
    <sound model='ich6'>
</pre>

to

<pre>
    <sound model='ac97'>
</pre>

will help.

== process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed ==
If you get the following error.
<pre>
Error starting domain: internal error: process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed: 16 Device or resource busy
failed to initialize KVM: Device or resource busy
</pre>

Maybe you have other non-KVM VMs, such as VirtualBox VMs already running? This is not possible. Running two hypervisors at the same time is not supported by KVM / VirtualBox.

== Permissions ==
{{CodeSelect|code=
ls -la /var/run/libvirt/libvirt-sock
}}

== Add Version Numbers to Support Request ==
Having issues, make sure you add what versions of libvirt-bin, qemu-kvm and virt-manager you are using. If you are using Debian, you can use the following command to determine them.

{{CodeSelect|code=
dpkg-query --show --showformat='${Package} ${Version} \n' libvirt-bin qemu-kvm virt-manager
}}

== User Help Forum ==
[https://forums.whonix.org/c/kvm {{project name}} KVM User Help Forum]

== Alternative Guides ==
For alternative installation guides contributed by community members please check:<br />
[[KVM/Installation Screenshots]]

= Development =
* [[Dev/KVM]]
* [https://phabricator.whonix.org/tag/kvm/ KVM {{project name}} Bug Tracker]
* [https://github.com/{{project_name_short}}/whonix-libvirt whonix-libvirt github]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
