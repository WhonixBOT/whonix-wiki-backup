<translate>{{Header}}
{{#seo:
|description=Using Whonix with KVM instead of VirtualBox
|image=https://www.whonix.org/w/images/b/be/234234234236kvm.png
}}

= General =
== What is KVM? ==
For an openly developed, FOSS GPL licensed hypervisor, it is recommended you use KVM [Kernel Virtual Machine] that comes with the GNU/Linux OS. KVM combined with the VirtualMachineManager front-end should provide a familiar and intuitive, easy to use GUI.

For a detailed view on its security merits read the [https://www.atsec.de/fileadmin/user_upload/whitepaper/kvm_security_comparison.pdf audit report] issued by an independent security auditing firm.

{{Other Platforms}}

== Why Use KVM Over VirtualBox? ==
Recently, the VirtualBox developer team have taken the decision to switch out the BIOS in their hypervisor with one that requires compilation by a toolchain that [[Dev/Virtualization_Platform#VirtualBox_no_longer_in_Debian_main|does not meet the definition of Free Software]] as per the guidelines of the Free Software Foundation. This move has been deemed problematic for free and open source software projects like Debian, on which Whonix is based. 

The issues of the Open Watcom License are explained in [http://www.mail-archive.com/debian-legal@lists.debian.org/msg34687.html|this thread] on the Debian Mailinglist and can be summarized as issues surrounding the contradictory language of the license, the assertion of patents against software that relies on it and the placing of certain restrictions on uses of the software.

For those who care about running Free Software and appreciate its ethical views, it is recommended that you avoid running VirtualBox, for that reason alone if nothing else. Read more about why you should [[Avoid_nonfree_software|avoid non free software]].

Besides this licensing issue which may or may not be of concern to users, a more tangible reason can be the security practices of Oracle, the corporation behind VirtualBox. Recent events and news (see Snowden leaks) have shown the urgent need for increased transparency and trust in the digital world. Oracle is infamous for their lack of transparency in disclosing security bugs details and for discouraging public full disclosure by third parties. Security through obscurity is the [http://www.oracle.com/us/support/assurance/vulnerability-remediation/disclosure/index.html|modus operandi] at Oracle.

Not going public with a vulnerability and its details only leads to laziness and complacency on part of the company that fields the affected products. A 0day reported privately to Oracle in 2008 by an independent security researcher has [http://seclists.org/fulldisclosure/2012/Apr/343|remained unfixed] as of 2012 when this post was written.

Furthermore VirtualBox contains significant functionality that is only available as a proprietary extension, such as USB and PCI passthrough and RDP connectivity. Seeing Oracle's unfriendly track record with the free software community in the past; examples include OpenSolaris and OpenOffice, it would not be a stretch to imagine them charging money for the closed up features at some point in the future or simply abandoning the project if they cannot monetize it to their liking.

=  First time user? =
{{Default_Passwords}}
{{First_Time_User}}

= KVM Setup Instructions =
== Before installing == 
{{Computer Security Education}}

== Install KVM ==
{{Anchor|Debian stable}}
=== Debian ===
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you are using Debian {{Code2|stable}} (currently: {{Code2|jessie}}), click on expand on the right.

<div class="mw-collapsible-content">
{{Sudo_Setup}}

Update package lists.

<pre>
sudo apt-get update
</pre>

Install.

<pre>
sudo apt-get install qemu-kvm libvirt-bin virt-manager
</pre>

For '''Debian Stretch+''' you need to install:

<pre>
qemu-kvm libvirt-daemon-system libvirt-clients virt-manager
</pre>



'''Apparmor'''

Unless manually enabled, Apparmor is not activated in a default Debian install for sVirt to take advantage of. 

Install:

<pre>
sudo apt-get install apparmor
</pre>

Change the following line in grub settings to activate it on start-up:

<pre>
sudo nano /etc/default/grub
</pre>

<code>GRUB_CMDLINE_LINUX_DEFAULT="quiet"</code>  -> <code>GRUB_CMDLINE_LINUX_DEFAULT="quiet apparmor=1 security=apparmor"</code>

Update the grub configuration and reboot for it to take effect:

<pre>
sudo update-grub
sudo reboot
</pre>


</div>
</div>

=== Arch Linux ===
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you are using Arch Linux, click on expand on the right.

<div class="mw-collapsible-content">
Update package lists and install.

<pre>
sudo pacman -Sy qemu libvirt virt-manager
</pre>

</div>
</div>

=== Other Distributions ===
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you are using a Linux distribution, that is not documented above, click on expand on the right.

<div class="mw-collapsible-content">
You need to have qemu-kvm and libvirt-bin. If you want to use a graphical user interface, which you most likely want, you also need virt-manager. Likely the required software can be installed using your usual distribution's package manager.

If you get one of the following errors while later using {{Code|virsh define}}.

<pre>
error: Failed to define domain from Whonix-Gateway_kvm-8.6.2.8.xml
error: internal error Unknown controller type 'pci
</pre>

<pre>
Whonix-Gateway_kvm-8.6.2.8.xml:24: element pm: Relax-NG validity error : Element domain has extra content: pm
Whonix-Gateway_kvm-8.6.2.8.xml fails to validate
</pre>

<pre>
Relax-NG validity error : Extra element devices in interleave
Whonix-Gateway_kvm-8.6.2.8.xml:24: element devices: Relax-NG validity error : Element domain failed to validate content
Whonix-Gateway_kvm-8.6.2.8.xml fails to validate
</pre>

Then you most likely need a more recent version of libvirt and kvm.

</div>
</div>
Please feel free to share detailed instructions for other distributions!

== Notice ==

These are workarounds to problems affecting KVM on Debian Stable (currently Jessie).

* On the host, a libvirt bug that conflicts with the way it works with Apparmor and the VM will refuse to start. It was fixed upstream but it will be a while until it reaches you.

To fix it run:

<pre>
sudo ln -s /etc/apparmor.d/libvirt/TEMPLATE.qemu /etc/apparmor.d/libvirt/TEMPLATE.kvm
</pre>


* The KVM qxl package: xserver-xorg-video-qxl suffers from performance bugs caused by the Xorg surfaces feature. You will notice the graphics lagging even during mundane tasks such as scrolling down a webpage. This has been reported extensively and fixed upstream in testing. Until testing becomes stable, a workaround provided by a Whonix package is available.<ref>https://forums.whonix.org/t/qxl-slowness-fix/1759</ref><ref>https://phabricator.whonix.org/T511</ref>

In the guest install the fix:

<pre>
sudo apt-get install qxl-xorg-enhance
</pre>


* Whonix 13 users: To get rid of the Whonixcheck PVClock warning, upgrade the packages in the VM. This assumes you have enabled the Whonix stable repo:

<pre>
sudo apt-get update && apt-get dist-upgrade
</pre>

== Addgroup ==

In order to be able to manage virtual machines as regular (non-root) user, you need to add that user to the {{Code|libvirt}} and the {{Code|kvm}} group. Assuming the simple use case, that you wish to use KVM with the user you are currently logged in, and assuming you are using Debian, simply use the following command. (On Ubuntu the group names vary and is called '''libvirtd''' instead).

<pre>
sudo addgroup "$(whoami)" libvirt
</pre>

<pre>
sudo addgroup "$(whoami)" kvm
</pre>

<ref>
By default Debian doesn't use sudo so you can add the groups with usermod. If your user is "foo" you would do:

<pre>
usermod -a -G libvirt foo
</pre>

And.

<pre>
usermod -a -G kvm foo
</pre>
</ref>

=== Other distributions ===

If you are using other distributions, have a look at your distribution's manual. (Such as [https://wiki.archlinux.org/index.php/libvirt Arch Linux's libvirt wiki page].)

== Reboot ==
After installation of kvm, reboot is required! After adding users to groups, reboot is required!

<pre>
sudo reboot
</pre>

== Network Start ==

'''Legacy instructions: applies up to Whonix 13 only'''

Make sure KVM's / QEMU's default networking is enabled and started.<ref>https://forums.whonix.org/t/kvm-networking-broken/644</ref> <ref>https://wiki.debian.org/KVM#Troubleshooting</ref>

<pre>
virsh -c qemu:///system net-autostart default
</pre>

<pre>
virsh -c qemu:///system net-start default
</pre>

== Build from Scratch ==
Advanced users are encouraged to [[Dev/Build_Documentation|build]] Whonix images for high security assurance.

== Download and Extract ==
=== Introduction ===
It is highly recommended you read and apply the steps outlined here. By applying a known and tested configuration, you will be better off in convenience and security.

Make sure you use the qcow2 images that are provided by the Whonix project instead of rolling your own. <ref>As in, manually converting them from .ova to .qcow2 is no longer recommended, since you can download .qcow images from the Whonix project.</ref> They contain important performance optimizations. <ref>As per [https://github.com/Whonix/Whonix/blob/master/build-steps.d/2400_convert-img-to-qcow2 build-steps.d/2400_convert-img-to-qcow2], these are "-o cluster_size=2M" and "-o preallocation=metadata".</ref> (Unless you [[Dev/Build_Documentation|created them from source]]. <ref>Because then you have the same performance optimizations.</ref>)

If you have issues with free disk space, using a file system supporting [[sparse files]] is recommended, also see [https://forums.whonix.org/t/please-reduce-kvm-image-size/160 forum discussion].

Already have existing Whonix libvirt images? Consider [[#Cleanup]] first.

For simplicity, so you can copy and paste the following commands without changes, download and store Whonix's images in your home folder ({{Code2|/home/<your user name>}}).

=== Download Whonix ===
{{Whonix_Current_Version_Maybe_Warning}}
{{QCOW2DownloadTable}}

=== Verify the Whonix images ===
* [[KVM/Verify_the_virtual_machine_images_using_Linux|For Linux: Debian, Whonix, etc. using kgpg]] 
* [[KVM/Verify the virtual machine images using the command line|For Linux with the command line]]

=== Decompress ===
Use {{Code2|tar}} to decompress the archive.

<pre>
tar -xvf Whonix-Gateway*.libvirt.xz
</pre>

<pre>
tar -xvf Whonix-Workstation*.libvirt.xz
</pre>

Do not use {{Code2|unxz}}! Extract the images using {{Code2|tar}}.

== XML Modification (OPTIONAL) ==
Modifying a machine's XML file gives more fine grained control over its settings than what is exposed through the virt-manager GUI. Unless you know what you are doing, editing configuration defaults is neither recommended nor necessary.

{{Open_File|filename=
Whonix-Gateway*.xml
}}

{{Open_File|filename=
Whonix-Workstation*.xml
}}

You could always edit the XML files later too, if needed as explained in the [[#Editing an imported Machine's XML Configuration]] chapter.

== Importing Whonix VM Templates ==
The supplied XML files serve as a description for libvirt, that tell it what properties a Whonix machine and networking it should have.

'''Legacy instructions: applies up to Whonix 13'''

1. First we will start with Whonix-Gateway:

<pre>
virsh -c qemu:///system define Whonix-Gateway*.xml
</pre>

2. Followed by the Whonix isolated internal network (XML also in the same folder as Whonix Gateway):

<pre>
virsh -c qemu:///system net-define Whonix_network*.xml
</pre>

If the definition of the Whonix internal network fails because the network bridge "virbr1" already exists, edit the Whonix_network*.xml file and change the name to one that doesnt exist, e.g. "virbr2" (you can list all existing bridge adapters with "sudo brctl show").

<pre>
virsh -c qemu:///system net-autostart Whonix
</pre>

<pre>
virsh -c qemu:///system net-start Whonix
</pre>

3. Lastly the Whonix-Workstation:

<pre>
virsh -c qemu:///system define Whonix-Workstation*.xml
</pre>


'''New Settings for Whonix 14+'''

1. Add and activate the virtual networks (settings files also in the same folder as Whonix Gateway). If the definition of the Whonix internal network fails because the virtual bridge "virbr2" already exists, edit the internal_network*.xml file and change the name to one that doesnt exist, e.g. "virbr3" (you can list all existing bridge adapters with "sudo brctl show"):

<pre>
virsh -c qemu:///system net-define Whonix_external*.xml
</pre>

<pre>
virsh -c qemu:///system net-define Whonix_internal*.xml
</pre>



<pre>
virsh -c qemu:///system net-autostart external
</pre>

<pre>
virsh -c qemu:///system net-start external
</pre>

<pre>
virsh -c qemu:///system net-autostart internal
</pre>

<pre>
virsh -c qemu:///system net-start internal
</pre>


2. Followed by importing the Whonix Gateway and Workstation images:

<pre>
virsh -c qemu:///system define Whonix-Gateway*.xml
</pre>

<pre>
virsh -c qemu:///system define Whonix-Workstation*.xml
</pre>

== Manipulating QCOW2 Images ==

To interact with KVM disk images use qemu-img. It can resize, convert virtual disks to other formats and more. Its not necessary nor recommended to change the official images so proceed only if you know what you are doing.

See the manual for more commands <ref>http://linux.die.net/man/1/qemu-img</ref>

== Moving Whonix Image Files ==
The XML files are configured to point to the default storage location of: /var/lib/libvirt/images These steps will show how to move the images there in order for the machines to boot.

Note: It is highly recommended you use this default path for storing the images to avoid any conflicts with AppArmor or SELinux, which will prevent the machines from booting.

It is recommended to move the image files instead of copying them:

<pre>
sudo mv Whonix-Gateway*.qcow2 /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo mv Whonix-Workstation*.qcow2 /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>

{{Anchor|sparse files}}
Whonix disk images are [[sparse files]], meaning they expand when filled rather than allocating their entire size, 100GB outright. These are known as sparse files and need special commands when copying them to ensure they don't lose this property, leading them to occupy all the actual space. We are copying to a privileged location in the system, so we have run with higher privileges (sudo):

<pre>
sudo cp --sparse=always Whonix-Gateway*.qcow2 /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo cp --sparse=always Whonix-Workstation*.qcow2 /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>

== Cleanup ==
After importing Whonix, you are advised to delete the archives ({{Code2|.libvirt.xz}} files) and the temporarily extracted folders or to move them into a custom location. This is useful to avoid conflicts and confusion should you later download a new version of Whonix.

To delete them.

<pre>
rm Whonix-Gateway*.libvirt.xz
</pre>

<pre>
rm Whonix-Workstation*.libvirt.xz
</pre>

<pre>
rm -r Whonix-Gateway*
</pre>

<pre>
rm -r Whonix-Workstation*
</pre>

<pre>
rm -r external_network*
</pre>

<pre>
rm -r internal_network*
</pre>

== Start ==
If you know Virtual Machine Manager, there is nothing special about starting Whonix VMs compared to starting other VMs. First start Whonix-Gateway, then start Whonix-Workstation.
=== Graphical User Interface (GUI) ===
Start Virtual Machine Manager.
<pre>
Start Menu -> Applications -> System -> Virtual Machine Manager
</pre>

Start Whonix-Gateway.
<pre>
click on Whonix-Gateway -> click open -> click the play symbol
</pre>

Repeat the same for Whonix-Workstation.

=== Command Line Interface (CLI) ===
Use 
<pre>
virsh -c qemu:///system start Whonix-Gateway
</pre>
To start Whonix-gateway. Respectively
<pre>
virsh -c qemu:///system start Whonix-Workstation
</pre>
To start workstation

== Adjust Display Resolution ==
With the QXL driver (installed by default) you can seamlessly adjust the display resolution to adjust to your Host screen size.<ref>https://elmarco.fedorapeople.org/manual.html</ref>

<pre>
Virt-Manager Whonix-Workstation window -> View -> Scale Display -> Always | Check: Auto resize VM with window
</pre>

== After installing ==
{{Post Install Advice}}

== Uninstall ==
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you want to remove Whonix KVM VMs, Whonix network and Whonix images, click on Expand on the right.

<div class="mw-collapsible-content">
1. Make sure you powered off the VM you want to shut down. You can also make sure you have shut down the VM using command line.

<pre>
virsh -c qemu:///system destroy Whonix-Gateway
</pre>

<pre>
virsh -c qemu:///system destroy Whonix-Workstation
</pre>

2. Remove KVM VM settings.

<pre>
virsh -c qemu:///system undefine Whonix-Gateway
</pre>

<pre>
virsh -c qemu:///system undefine Whonix-Workstation
</pre>

3. Shut down KVM Network {{Code2|Whonix}}.

<pre>
virsh -c qemu:///system net-destroy Whonix
</pre>

4. Remove Network {{Code2|Whonix}}.

<pre>
virsh -c qemu:///system net-undefine Whonix
</pre>

5. Delete the images. (All data will be lost unless you made a backup of your valued data.)

<pre>
sudo rm /var/lib/libvirt/images/Whonix-Gateway.qcow2
</pre>

<pre>
sudo rm /var/lib/libvirt/images/Whonix-Workstation.qcow2
</pre>

</div>
</div>

= KVM Upgrade Instructions =

Its highly recommended that you uninstall older Whonix versions and always run the newer one. Note that Whonix supports in-place apt-get upgrades too.

First, move your data out of the VM via shared folders and perform the [[#Cleanup|cleanup steps]] followed by [[#Download_and_Extract|installation]] of the new images.

=  Stay tuned =
{{Stay_tuned}}

= Known bugs =
{{Non-Qubes-Whonix Known bugs}}
{{Known_bugs}}

= Optional =
== Protect Date Integrity ==
 
As of Whonix 14 ACPI support was removed to prevent guest access to fine-grained timers and to  further reduce attack surface. A side-effect of this is that graceful VM shutdown is no longer possible. Only Force Off/Reset will work.
 
To ensure no data corruption happens type the following before forced shutting off: 
 
<pre>
sudo sync
</pre>

== Multiple Whonix-Gateways ==

In this scenario Workstations will not be able to communicate. This is recommended to keep different Tor activity profiles completely separate from each other. To run multiple Whonix-Gateways you need to clone existing machines. These steps assume an existing Whonix install.


1. Create clones of the Gateway and Workstation VMs rolled back to clean snapshots:

In Virtual Machine Manager:

<pre>
Highlight VM -> Open -> Virtual Machine -> Clone... -> Clone
</pre>


2. Export Whonix's internal network settings:

<pre>
sudo virsh net-dumpxml internal > internal2.xml
</pre>


3. Edit the network configuration to make it unique. Change the '''name''' and '''bridge name'''. Delete the '''mac address''' and '''uuid''' parameters. Alternatively, replace the configuration with the example below:

<pre style="white-space: pre-wrap;">
<network>
  <name>internal2</name>
  <bridge name='virbr3' stp='on' delay='0'/>
</network>
</pre>

Save and exit:

<pre>
CTRL-X
y
CTRL-M
</pre>

Note that virbr1 is assigned to the '''external''' network (NAT NIC), and virbr2 to the '''internal''' network (Whonix NIC), therefore, the network name was changed to '''internal2''' and the bridge name to '''virbr3'''.

4. Import and start the new network:

<pre>
virsh -c qemu:///system net-define internal2.xml
</pre>

<pre>
virsh -c qemu:///system net-autostart internal2
</pre>

<pre>
virsh -c qemu:///system net-start internal2
</pre>

5. Attach the Gateway and Workstation VM NICs to the new network. Its important you pay attention and match internal network interfaces to the newer ones and not switch to a NIC that connects outside. To edit the VM virtual NIC settings:

<pre>
Highlight VM -> Open -> Settings -> NIC virtual hardware -> Set Network Source to: Virtual network 'internal2' : Isolated network, internal and host routing only
</pre>

Note that the network is exclusively internal and does not communicate with the host in any way.

6. Its recommended that you also [[KVM#Editing_an_imported_Machine.27s_XML_Configuration|edit]] the cloned workstation's configuration and change the pinned CPU's number to a different number (3 or 4) than used by the gateway and primary workstation. Only works if you have a quadcore system.

== Testing Upcoming Versions ==
Download the test images from latest folder listed [http://mirror.whonix.de/ here]. Apply the [[#Multiple_Whonix-Gateways]] for running Whonix versions side by side with some differences:

1. Rename the test Whonix images to something unique, preferably by appending the version number to the name.

2. Edit the XML templates and change the VM names.

3. Import the images by following the installation steps [[#Importing_Whonix_VM_Templates]] but keep in mind you must use the full name of the new images. Do not import the Network templates.

== Snaphot Migration ==

If the VM has snapshots that you want to preserve, you should dump the snapshot xml-files of the source VM with:<ref>https://serverfault.com/a/648871</ref>

List snapshot names of the VM:

<pre>
virsh snapshot-list --name $dom
</pre>

Dump each snapshot you want to back-up:

<pre>
virsh snapshot-dumpxml $dom $name > file.xml 
</pre>



Then for restoring snapshots at the destination use:

<pre>
virsh snapshot-create --redefine $dom file.xml
</pre>


If you also care about which snapshot is the current one, then additionally do on the source VM:

<pre>
virsh snapshot-current --name $dom
</pre>

and on the destination:

<pre>
virsh snapshot-current $dom $name
</pre>

== Compressing Disk Images ==
You may find it easier to move the sparse image files when they are compressed in a tarball. 

To re-compress files use:

<pre>
tar -Sczvf whonix.tar.gz <multiple file names separated by spaces>
</pre>

== 3D Graphics Acceleration ==

By Debian Stretch freeze the software requirements should be met. Other distros may be different so refer to the needed library versions [https://www.kraxel.org/blog/tag/virtio-gpu/ here].

Change your Workstation VM's XML settings as below:

<pre style="white-space: pre-wrap;">
<graphics type='spice'>
  <listen type='none'/>
  <gl enable='yes'/>
</graphics>
<video>
  <model type='virtio'/>
</video>
</pre>

== Shared Folders ==
To move data between the guest and host follow these steps.

On the host run the following command in terminal (Start Menu -> Applications -> System -> Terminal).

<pre>
sudo mkdir /home/yourusername/shared
</pre>

You must adjust permissions on the host to allow read and write access to the folder with chmod:

<pre>
sudo chmod 777 /home/yourusername/shared
</pre>

Enable shared folders in VirtManager:

<pre>
VirtManager -> click once on virtual machine -> Edit -> Virtual Machine Details -> Details -> Add Hardware -> File System
</pre>

Set:

'''Mode''': Mapped <ref>The file sharing mode {{Code2|mapped}} is just an example, using squash or passthrough is possible by selecting them from the drop down menu. Mapped is recommended for security.</ref>

'''Driver''': Default

'''Source Path''': {{Code|/home/yourusername/shared}}

'''Target Path''': {{Code|shared}}

Click finish. Done.


Whonix Workstation should automatically find and mount the shared directory once its created and enabled on the Host. 



Note: If your system is configured to use a Mandatory Access Control framework you may need to configure exceptions to allow the confined guests to communicate with the shared folder on the host.

Tests with Apparmor has shown it to operate transparently with shared folders without needing any manual exception configuration by the user.

On the host chown must be applied to the shared folder's contents to access the files:

<pre>
sudo chown -R yourusername /home/yourusername/shared && sudo chmod 777 -R /home/yourusername/shared
</pre>

If you are using commandline instead of virt-manager to edit your vm's device settings, add this next section to the xml. 

<pre style="white-space: pre-wrap;">
<filesystem type='mount' accessmode='mapped'>
    <source dir='/mnt/shared'/>
    <target dir='shared'/>
</filesystem>
</pre>

== USB Passthrough ==

Libvirt supports passing through a computer's integrated webcam or any other USB devices.<ref>https://bugzilla.redhat.com/show_bug.cgi?id=1135488</ref><ref>https://askubuntu.com/questions/564708/qemu-kvm-virt-manager-passthrough-of-usb-webcam-to-windows-7-enterprise-creates</ref>

'''WARNING: You should only connect USB devices to Whonix-Workstation when its in a clean trusted state. The only safe and recommended way to move files out of a VM is through Shared Folders.'''

While Whonix-Workstation is shut down, add two USB redirection devices:

<pre>
Whonix-Workstation viewer window -> View -> Details -> Add Hardware -> USB Redirection
</pre>


Then in the ''Details'' pane change the ''Controller USB'' device model:

<pre>
Hypervisor Default -> USB 2
</pre>


Start Whonix-Workstation and select the device connected to the host you want to pass through:

<pre>
Whonix-Workstation viewer window -> File -> Redirect USB -> Choose: Webcam (or another USB Device)
</pre>

Note that the last step needs to be done on demand as the device passed through is not set permanently across reboots. This prevents mistakes like USB passthrough when the VM is in an untrusted state.

== Editing an imported Machine's XML Configuration ==
Eventually configure your faviorite editor to make changes. Set visual to your favorite editor (must be installed, examples are kwrite, leafpad, kate, vi, nano, vim, etc.).

<pre>
export VISUAL=kwrite
</pre>

Edit.

<pre>
virsh -c qemu:///system edit Whonix-Gateway
</pre>

== Disable Microphone Input ==
[[Microphone]] input to guests, while a nice feature for [[VoIP]], is dangerous to have on by default. It is [[Pre_Install_Advice#Microphone|good practice]] to disable the microphone on your host system through sound settings if you are not actively using it.

Its not currently possible to ship a configuration file with the guest microphone input muted. If you need to have the host microphone turned on while denying access to the guest, mute the "virt-manager: record" device that shows up in the host's audio task-bar menu.

== Creating Multiple Internal Networks ==
Open Whonix's network XML file and change the name attribute to something different than the internal network you are currently running, for example 'Whonix2' 'Whonix3' and so on. The default name used is 'Whonix'.

== Alternative Configurations ==
Libvirt can support a variety of containment mechanisms. Currently supported ones are KVM on the x86_64 platform and QEMU. More configurations could be added at a later date. If you have hardware virtualization extensions, always use the KVM one.

To use another configuration, import its XML file with virsh.

== How to leave KVM when no X is running ==

Situation... User is in terminal in a VM... No X is running ("sudo service kdm stop"). User wants to switch back to the host... How to do this?

The emulated tablet device handles this by not allowing the mouse to be captured by the guest. Its still possible though:

<pre>press Ctrl_L & Alt_L</pre>

== Setting up gdb to work with qemu-kvm via libvirt ==
If you want to be able to debug a Linux kernel that’s running as a KVM guest, you need to specify the ‘-s’ parameter for the command line of qemu-kvm. The problem is, there’s no (easy) way to do this when you’re using libvirt and virt-manager to manager your virtual machines, instead of using KVM directly. What you need to do is change the XML configuration of the virtual machine so that the ‘-s’ parameter is passed on to qemu-kvm

<pre>
virsh edit guestvm
</pre>

Here, guestvm is the name of the VM that is managed via virt-manager. This will bring up the XML configuration of the VM in your editor. The first line of the XML file should be:

<pre>
<domain type='kvm'>
</pre>

This has to be changed to

<pre>
<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
</pre>

and you also need to add:

<pre>
<qemu:commandline>
<qemu:arg value='-s'/>
</qemu:commandline>
</pre>

under the {{Code2|<domain>}} level of the XML. After you save and quit the editor, the new configuration will come into effect. When you start the virtual machine, there will be a local TCP port (1234 by default) that can be used as a remote debugging port from gdb. You can connect to this port by using the command

<pre>
target remote localhost:1234
</pre>

from gdb running on the host machine.

Source: <ref>https://gymnasmata.wordpress.com/2010/12/02/setting-up-gdb-to-work-with-qemu-kvm-via-libvirt/</ref>

== Unsafe Features ==

The features below have serious security implications and should not be used. This applies to all hypervisors in general.

=== LVM Storage ===
QCOW2 virtual disk images are the recommended and default storage format for KVM.

LVM  or any other storage mechanism must be avoided for security and privacy.

LVM misconfiguration has serious security consequences and exposes the host filesystem to the processes running on the guest. <ref>https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Virtualization_Administration_Guide/sect-Virtualization-Adding_storage_devices_to_guests-Adding_hard_drives_and_other_block_devices_to_a_guest.html </ref>

Because a virtual disk is no longer used, where the low-level view of the storage can be controlled, data created by VMs can easily be recovered and exfiltrated by malicious forensics tools run in a VM at a later time. This is extremely dangerous and can expose all kinds of information originally created in a VM of higher trust level. This leads to deanonymization, past session linking and theft of sensitive information and keys.<ref>https://github.com/fog/fog/issues/2525</ref><ref>https://news.ycombinator.com/item?id=6983097</ref> Disabled in cloud tenancy environments.

=== HugePages ===
THP/Hugepages aid rowhammer attacks<ref>http://arxiv.org/pdf/1507.06955v1.pdf</ref> and memory de-duplication attacks (see KSM below) and so must be disabled for the guest and on the host. As far is what we know Debian hosts do not enable this feature. Disabled in cloud tenancy environments.

===Memory Ballooning===
Memory ballooning can potentially be abused by malicious guests to mount rowhammer attacks on the host.<ref>https://www.whonix.org/pipermail/whonix-devel/2016-September/000746.html</ref>

=== Clipboard Sharing ===
SPICE allows accelerated graphics and clipboard sharing. The clipboard is disabled by default for security reasons to prevent accidentally copying a link to a website you visited anonymously to your non-anonymous host browser or vice versa.

=== KSM ===
KSM is a memory de-deuplication feature that conserves memory by combining identical pages across VM RAM. It is not enabled by default. Enabling this feature is dangerous because it allows cross-VM snooping by a malicious process.<ref>[http://www.ieee-security.org/TC/SP2016/papers/0824a987.pdf Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector]</ref> It can infer what programs and what pages are being visited outside the VM. <ref>https://staff.aist.go.jp/c.artho/papers/EuroSec2011-suzaki.pdf</ref> Disabled in cloud tenancy environments. This feature can also allow attackers to modify/steal APT keys and source lists of the host. <ref>[https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_razavi.pdf Flip Feng Shui: Hammering a Needle in the Software Stack]</ref><ref>https://archive.is/aB7Kg</ref>

=== Device Passthrough ===
Both USB and PCI device passthrough would allow advanced attackers to flash the firmware of those devcies and infect the host or other VMs.<ref>http://docs.openstack.org/security-guide/compute/hardening-the-virtualization-layers.html#physical-hardware-pci-passthrough</ref>

== XML Settings ==
TODO: Soon here xml settings will be explained here.

= Troubleshooting =
== Reboot? ==
Did you reboot after installing KVM?

Did you reboot after adding users to groups?

Add this information should you make a support request.

== Unable to connect to libvirt. ==
If you are getting the following error.
<pre>
Unable to connect to libvirt.

Verify that the 'libvirtd' daemon is running.

Libvirt URI is: qemu:///system
</pre>

Make sure you [[KVM#Addgroup|added groups]] and [[KVM#Reboot|rebooted]].

== Unable to open a connection to the libvirt management daemon. ==
If you are getting the following error.

<pre>
Unable to open a connection to the libvirt management daemon.

Libvirt URI is: qemu:///system

Verify that:
- The 'libvirtd' daemon has been started
</pre>

Check your KVM installation.

<pre>
sudo service qemu-system-x86 restart ; echo $? ; sudo service libvirt-bin restart ; echo $? ; sudo service libvirt-guests restart ; echo $?
</pre>

Should show.

<pre>
0
[ ok ] Restarting libvirt management daemon: /usr/sbin/libvirtd.
0

Running guests on default URI: no running guests.
0
</pre>

If you see that, it could be a permissions problem.

== hda-duplex not supported in this QEMU binary ==
Maybe you are a member of the {{Code|libvirt}} group, but not have the {{Code|lkvm}} group?

Maybe changing

<pre>
    <sound model='ich6'>
</pre>

to

<pre>
    <sound model='ac97'>
</pre>

will help.

== process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed ==
If you get the following error.
<pre>
Error starting domain: internal error: process exited while connecting to monitor: ioctl(KVM_CREATE_VM) failed: 16 Device or resource busy
failed to initialize KVM: Device or resource busy
</pre>

Maybe you have other non-KVM VMs, such as VirtualBox VMs already running? This is not possible. Running two hypervisors at the same time is not supported by KVM / VirtualBox.

== Permissions ==
<pre>
ls -la /var/run/libvirt/libvirt-sock
</pre>

== Add Version Numbers to Support Request ==
Having issues, make sure you add what versions of libvirt-bin, qemu-kvm and virt-manager you are using. If you are using Debian, you can use the following command to determine them.

<pre>
dpkg-query --show --showformat='${Package} ${Version} \n' libvirt-bin qemu-kvm virt-manager
</pre>

== User Help Forum ==
[https://forums.whonix.org/c/kvm Whonix KVM User Help Forum]

== Alternative Guides ==
For alternative installation guides contributed by community members please check:<br />
[[KVM/Installation Screenshots]]

= Development =
* [[Dev/KVM]]
* [https://phabricator.whonix.org/maniphest/?statuses=open%2Creview&allProjects=PHID-PROJ-gsvozmhmzxvlbhmikw42#R KVM Whonix Bug Tracker]
* [https://github.com/Whonix/whonix-libvirt whonix-libvirt github]

= Footnotes =
<references/>

{{Footer}}

[[Category:Documentation]]
</translate>
