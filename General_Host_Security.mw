{{Header}}
{{#seo:
|description=General Host Security for Advanced Users, {{project name}} Hardening
|image=https://www.whonix.org/w/images/b/b4/Host232security23434234.jpg
}}
[[image:Host232security23434234.jpg|thumb]]
{{security intro}}

This page is targeted at advanced users who wish to improve the general security of their host operating system to become even more secure.

= apt-transport-tor =

apt-transport-tor is a package that allows host operating systems or non-{{workstation_product_name}} VMs that are not behind a torifying gateway (like {{gateway_product_name}}) to torify their apt-get traffic for individual repositories.

With non-{{project_name}} systems in mind, for security reasons apt-get blocks clearnet connections to <code>.onion</code> domains by default. apt-get developers want to protect users from accidentally trying to use <code>.onion</code> repositories without using Tor. Otherwise, a rogue DNS server could redirect users to a false domain and trick them into thinking they are using Tor when they are not.

Strictly speaking, there is no need to use apt-transport-tor inside {{project_name}} VMs since all traffic is already routed over Tor. apt-get is [[Stream Isolation|stream-isolated]] using a pre-configured uwt wrapper. In other words, apt-get in {{project_name}} is already talking to a Tor <code>SocksPort</code>. Nevertheless, apt-transport-tor (<code>tor+http</code>) is the default from {{project_name}} 14 onward because it provides better error handling and stream isolation. <ref>source: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=754242#54
<blockquote>
That said, it might make sense to use a-t-tor anyhow even if not
strictly needed as it will deal better with certain tor anomalies given
that it knows tor is involved reporting better errors (like telling you
that the .onion address you typo'ed is too long/short; saying
"unreachable host" if a service isâ€¦ well, not reachable, instead of
saying "TTL expired" which is reported by Tor and technically more
correct but unhelpful), will use different circuits for different
sources and stuff.
</blockquote>
</ref> <ref>
For instance it reports if the <i>.onion</i> address is too long or short, and will use different circuits for different sources.
</ref> <ref>
apt-transport-tor will not result in Tor over Tor scenarios due to [https://phabricator.whonix.org/T610 built-in {{project_name}} settings preventing this].
</ref>

= DMZ =

If users have a shared network -- such as a cable modem/router or ADSL/router setup that is utilized by others -- then consider configuring a {{gateway_product_name}} (<code>sys-whonix</code>) [https://en.wikipedia.org/wiki/DMZ_%28computing%29 DMZ]. 

A properly configured DMZ restricts {{gateway_product_name}} (<code>sys-whonix</code>) from accessing, and being accessible to, other nodes on the network like printers, phones, computers and laptops. This is true even if root access is somehow achieved.

Should an incursion take place, a DMZ prevents an adversary from exploring other systems and possibly compromising them. However, in this case a DMZ does not protect the user's anonymity, since the adversary could just ping a remote server and discover the real IP address. Another benefit of a DMZ is that should other systems be compromised, it is more difficult to compromise {{gateway_product_name}} (<code>sys-whonix</code>).

= Hardware Security =

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = {{project name}} cannot provide protection against hardware backdoors.
}}

Trusted computer hardware is fundamental to anonymity and security. It is recommended to purchase and use "clean" computers that have components manufactured by reputable companies. It is preferable to pay in cash so hardware IDs do not leak your identity.

As outlined in the [[System_Configuration_and_Access#Use_a_Dedicated_Host_Operating_System_and_Computer|System Configuration and Access]] entry, it is safest to purchase a computer that is solely used for {{project name}} activities because this minimizes the risk of a prior hardware compromise.

= Key Hardening Steps =

For greater security, advanced users should harden the host OS as much as is practicably possible. This includes, but is not limited to applying relevant steps from the [[System_Hardening_Checklist|System Hardening Checklist]] and instructions found throughout this section:
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* [[System_Hardening_Checklist#Disabling_and_Minimizing_Hardware_Risks|Disable and minimize hardware risks]].
* [[System_Hardening_Checklist#Secure_Downloads|Securely download files]] and [[System_Hardening_Checklist#Secure_Software_Installation|install software on the host]].
* Avoid [https://www.qubes-os.org/doc/multiboot/ insecure dual-boot arrangements].
* Choose a host OS that is [[Host_Operating_System_Selection|compatible with privacy and security goals]].
* [[Operating_System_Hardening#Harden_Debian|Harden]] the host (Debian) GNU/Linux OS:
** Use [[Full_Disk_Encryption_and_Encrypted_Images#Full_Disk_Encryption_on_the_Host|Full Disk Encryption (FDE)]] on the host.
** Apply a [[Protection_Against_Physical_Attacks#BIOS_Password|BIOS password]] for BIOS set up and boot.
** [[General_Host_Security#Torify_apt-get_Traffic|Torify apt-get traffic]] on the host to prevent fingerprinting and leakage of sensitive security information.
** [[General_Host_Security#{{project_name}}|Further harden the host OS]] against [[Protection_Against_Physical_Attacks|physical attacks]].
* Apply instructions to [[System_Hardening_Checklist#Networking|harden networking]], including:
** Use a [[Host_Firewall#Dedicated_Connection|dedicated network connection]].
** Configure a [[General_Host_Security#DMZ|de-militarized zone (perimeter network)]] if necessary.
** Test the router / firewall with a [[Host_Firewall#Port_Scan|port scanning device]].
** Change the default administration router password and [[Router_and_Local_Area_Network_Security#Recommended_Router_Settings|lock it down with strict settings]].
** [[System_Hardening_Checklist#Flash_the_Router_with_Opensource_Firmware|Flash the router with opensource firmware]].
* [[MAC_Address#Changing_MAC_Addresses|Spoof MAC addresses]] if necessary.
* Disable [[Disable_TCP_and_ICMP_Timestamps|TCP and ICMP timestamps]].
* [[Time_Attacks#Mitigations|Remove the NTP client]] and disable the NTP synchronization feature.
</div>

= Layered Defense =

== Attack Surface Reduction ==

In addition to the checklist above, it is suggested to also follow the principles of minimizing the [https://en.wikipedia.org/wiki/Attack_surface attack surface] of the OS, and securely configuring services -- for example when using SSH, implementing [https://www.fail2ban.org/wiki/index.php/Main_Page Fail2ban] so only key authentication is allowed. 

The attack surface concept deserves more consideration. Simply put, it is the sum of different attack vectors (aggregate of vulnerabilities) where an unauthorized user can try to enter or extract data from an environment. <ref>[https://en.wikipedia.org/wiki/Attack_surface Wikipedia: Attack surface]</ref> To reduce the attack surface and mitigate risks, it is necessary to: <ref>http://resources.infosecinstitute.com/attack-surface-reduction/</ref>

* Enforce least privilege for all executed processes and reduce entry points for untrusted users.
* Control system and network segment access across the network, for example, reduce (unauthenticated) access to network endpoints.
* Minimize exposed system targets by reducing the amount of code running and removing unnecessary functionality.
* Remove or shutdown software and services (channels, protocols) that are infrequently or rarely used.
* Frequently patch security vulnerabilities.

== Proactive Defenses ==

This includes, but is not limited to:
* [http://wiki.debian.org/Hardening Compile time hardening]
* [https://en.wikipedia.org/wiki/Intrusion_prevention_system Intrusion Prevention Systems]
* [https://en.wikipedia.org/wiki/Mandatory_access_control Mandatory Access Control]

== Retroactive Defenses ==

The usefulness of this approach is limited because it does not prevent security breaches; it can only help in making future breaches less probable:

* [[Malware_and_Firmware_Trojans#Malware|Anti-virus and anti-malware programs]].
* [https://en.wikipedia.org/wiki/Intrusion_detection_system Intrusion Detection System (IDS)].
* [https://en.wikipedia.org/wiki/Rkhunter Rootkit Hunter (rkhunter)].
* [https://en.wikipedia.org/wiki/Snort_%28software%29 Snort network intrusion prevention system].
* [https://packages.debian.org/stretch/sxid sxid file and directory change tracker].
* [https://packages.debian.org/stretch/tiger TIGER security auditing program].

The programs listed in this section are only a very brief introduction to this topic. If interested, users should research these topics in depth because they are beyond the scope of this guide.

= One VM {{project name}} Configuration =

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text    = '''Warning:''' The one VM {{project name}} configuration has been deprecated because there is no contributor. Use at your own risk!
}}

This platform was developed and tested successfully for {{project name}} v0.1.3. 

Basically, it is possible to use one VM instead of two, with Tor running on the host OS and a single client VM routing activities via Tor. This configuration has several advantages and disadvantages relating to security and other matters. For further information, see [[OneVM]].

= Separate VirtualBox User Account =

Security-wise, it makes sense to create a separate user account solely for using [[VirtualBox]], which is not in the admin/sudo group.

= Tor =

See [[Tor|Tor]].

= Torify apt-get Traffic =

{{Template:torify apt-get traffic}}

= Tor Traffic Whitelisting Gateway =

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = [[Corridor|corridor]] is a filtering gateway that only allows connections to Tor relays to pass through. It is not a proxying gateway.
}}

It is possible to configure {{gateway_product_name}} (<code>sys-whonix</code>) to use [[Corridor|corridor]] as a local proxy to establish the following tunnel:

<code>User</code> &rarr; <code>corridor</code> &rarr; <code>Tor</code> &rarr; <code>Internet</code>

This approach is not necessarily more anonymous, but it is an additional fail-safe since a Tor traffic whitelisting gateway can help protect from accidental clearnet leaks.

= Virtualization Platform =
{{Anchor|About VirtualBox}}

== VirtualBox ==

[[VirtualBox]] is developed by Oracle, a company which has a reputation of not being very "open". In the past, concerns have been raised about how they announce security issues in their products and how well they communicate with each other, leading to a negative perception by the security community.

VirtualBox is primarily a simple, "user-friendly", desktop solution and is most certainly not designed with the {{project name}} threat model in mind. Development is reported to be at a standstill and the author is not aware of any serious code audits having been completed. <ref>https://developers.slashdot.org/story/15/01/30/1530245/virtualbox-development-at-a-standstill/</ref> {{project name}} developers would like to recommend a different VM solution at least as an alternative, but many popular, open source options like KVM and Xen are not cross-platform. Further, the latter examples seem to still lack a reliable "internal networking" feature, which {{project name}} heavily depends upon. Any readers who have in-depth knowledge of this issue are encouraged to edit this paragraph accordingly.

Users that have a strong preference for security should strongly consider using [[{{q project name short}}|{{q project name}}]], if they have suitably modern hardware. In short, [[{{q_project_name_short}}|{{q_project_name}}]] is more secure than the default {{project name}} configuration using a [[Virtualization_Platform_Security#Type_1_vs_Type_2_Hypervisors|Type 2 hypervisor like VirtualBox]]. 

Related VirtualBox Links:

* [https://www.virtualbox.org/query?summary=~&col=id&col=summary&col=status&col=owner&col=type&col=priority&col=component&order=priority Custom Ticket Search]
* [https://www.virtualbox.org/newticket New Ticket]

See also:

* [https://www.whonix.org/wiki/Dev/Virtualization_Platform Virtualization Platform] for licensing issues.
* [[KVM#Why_Use_KVM_Over_VirtualBox.3F|Why Use KVM Over VirtualBox?]]
* [[Qubes/Why_use_Qubes_over_other_Virtualizers|Why use Qubes over other Virtualizers?]]

=== Secure Labeling ===

VirtualBox has a [https://www.virtualbox.org/manual/ch09.html#idm7867 secure labeling feature (VBoxSDL)] which has not yet been implemented in {{project_name}}. <ref>Partially because it is not available on the macOS platform.</ref> This feature addresses the security risk of running in full screen mode:

<blockquote>When running guest operating systems in full screen mode, the guest operating system usually has control over the whole screen. This could present a security risk as the guest operating system might fool the user into thinking that it is either a different system (which might have a higher security level) or it might present messages on the screen that appear to stem from the host operating system.
<br />
In order to protect the user against the above mentioned security risks, the secure labeling feature has been developed. Secure labeling is currently available only for VBoxSDL. When enabled, a portion of the display area is reserved for a label in which a user defined message is displayed. The label height in set to 20 pixels in VBoxSDL. The label font color and background color can be optionally set as hexadecimal RGB color values.</blockquote>

Any readers who are knowledgeable in this area are encouraged to share their expertise and edit this section accordingly.

Before this feature could be implemented in {{project_name}}, one prerequisite is that users do not end up with a non-standard desktop resolution, as this degrades anonymity as per [[Protocol-Leak-Protection_and_Fingerprinting-Protection|Protocol Leak Protection and Fingerprinting Protection]].

== {{project name}} ==

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = [[{{q project name short}}|{{q project name}}]] is recommended for the majority of users seeking a higher security solution.
}}

As noted in the [[Virtualization_Platform_Security#{{q_project_name}}_vs_Physically-Isolated_{{non_q_project_name_short}}|Virtualization Platform Security]] entry, there are two platforms providing greater security than the standard host OS / Type 2 hypervisor {{project name}} configuration:

* [[{{q project name short}}|{{q project name}}]].
* [[Dev/Build_Documentation/Physical_Isolation|{{project_name}} with Physical Isolation]], set up using two different computers and virtualization.

In contrast to [[{{q_project_name_short}}|{{q_project_name}}]], physical isolation is:
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* Difficult to set up.
* Inconvenient and still experimental.
* Requires a significant time investment.
* Not clearly superior to [http://invisiblethingslab.com/resources/2014/Software_compartmentalization_vs_physical_separation.pdf Qubes' compartmentalized software approach].
* Does not support Qubes features like:
** DisposableVMs.
** A USB VM.
** Secure copy and paste operations.
** Secure copying and transfer of files.
** PDF/image sanitization.
** An ephemeral {{gateway_product_name}} ProxyVM and/or {{workstation_product_name}} AppVM. <ref>In Qubes R4.</ref>
</div>
In summary, users should prefer [[Qubes]] for a higher-security solution since it supports [[Qubes/Why_use_Qubes_over_other_Virtualizers|a host of features]] unavailable in the Type 2 hypervisor model (VirtualBox, KVM, VMware etc.).

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
