{{Header}}
{{#seo:
|description=Instructions to build {{project name}} Virtual Machine Images from Source Code.
}}
{{forkme}}
{{title|title=
{{project name}} 15 Build Documentation
}}

== Introduction ==
This page documents how to <u>build {{project name}}</u> [[VirtualBox]] {{Code2|.ova}} or [[KVM]] {{Code2|.qcow2}} images <u>from source code</u>.

For [[{{q project name short}}|{{q project name}}]], see [[Dev/Qubes#Build_{{q_project_name}}_Templates|{{q_project_name}} Build Documentation]].

Building from source code as security advantages (see [[Trust]]).

The goal of this build documentation is to be usable by as many users as possible. Therefore written as easy as possible with no prior knowledge of tools used required.

The high level summary is:

# Host preparation.
# Get {{project name}} source code (which includes {{project name}} build script).
# Run {{project name}} build script
# Done, build of {{project name}} has been completed.

Advanced users that already know how to use <code>git</code> and how to perform digital software verification using OpenPGP (<code>gpg</code>) do not need to strictly follow this documentation. See footnote(s) for details. <ref>
For example, these instructions fetch only a specific git tag. If you know how to use git, you are of course free to <code>git clone</code> the whole repository and then use <code>git verify-tag</code>, <code>git verify-commit</code>, <code>git checkout</code> and <code>git</code> generally as per usual. The reason why more specific commands are being used on this page is to simplify the process for laymen, to make these instructions as fail-safe as possible.
</ref>

Due to digital software verification instructions and [[Software_Signature_Verification_Usability_Issues_and_Proposed_Solutions|Software Signature Verification Usability Issues]] these instructions might look more complicated then they actually are.

{{always verify signatures reminder}}

Steps concerning digital software verification are pointed out as "This step is recommended for better security, but is not strictly required. (See [[Trust]].)"

When verifying digital software signatures, these instructions will be slightly more complicated but therefore even more secure.

# Host preparation.
# Get {{project name}} source code (which includes {{project name}} build script).
# Verify digital software signatures.
# Run {{project name}} build script
# Done, build of {{project name}} has been completed.

== Host Preparation ==
<!--
EDITORS NOTE: The following host preparation text is duplicated on 3 pages.
(1) [[Physical Isolation]]
(2) [[Dev/Build Documentation]] for VM images
(3) {{project name}} debian packages.
When making changes here, please consider also making changes there.
(Not using a template, because it would probably require a version specific template.)
-->
{{#widget:Expand or Collapse All}}
* You need to build on '''Debian''' <u><code>{{Stable project version based on Debian codename}}</code></u>, such as {{workstation_product_name}} 15 or a Debian <code>{{Stable project version based on Debian codename}}</code> VM.
* You need ~ <code>30</code> GB free disk space.
* You need ~ <code>4</code> GB free RAM.
** Might actually work with a lot less RAM.
** Might actually work with less RAM if you have swap.
* Do not build under user <code>root</code>. Login regular as user <code>user</code> and then use <code>sudo</code> as documented below.
* You cannot build on {{gateway_product_name}} (due to networking issues).
* It is recommended to set your terminal (for example xfce4-terminal) to unlimited scrollback, so you can watch the full build log.
* <u>'''Short'''</u>: '''Do not add private files to {{project name}} source code folder! [...]'''
<div class="toccolours mw-collapsible mw-collapsed">
<div class="mw-collapsible-content">
''Long'': [...] Unless you know what you are doing. Technically, it would work. This is recommended against. Those files would get managed by the respective package. When you later update {{project name}} debian packages, your files would get deleted by the package manager. Also adding private files to {{project name}} source code folder, later contributing to {{project name}} development and accidentally pushing the wrong git branch would be a disaster. Better add your private files to {{project name}} after building {{project_name}}. Or add a custom build step adding your files, which then get copied from a folder outside of {{project name}} source folder. See "Source Code Changes" in "Optional Build Configuration" below.
</div>
</div>
<br />
* <u>'''Short'''</u>: '''Make sure there aren't any VMs in VirtualBox (inside your build machine) already called {{gateway_product_name}} or {{workstation_product_name}}!'''
<div class="toccolours mw-collapsible mw-collapsed">
<div class="mw-collapsible-content">
''Long'': Because the build script would fail, because it tries to create VMs either named {{gateway_product_name}} or {{workstation_product_name}}. Running the clean script between builds will prevent this error.
</div>
</div>
<br />
* <u>'''Short'''</u>: '''Do not try to build {{gateway_product_name}} and {{workstation_product_name}} at the same time!'''
<div class="toccolours mw-collapsible mw-collapsed">
<div class="mw-collapsible-content">
''Long'': Building {{gateway_product_name}} and {{workstation_product_name}} at the same time is not supported due to limitations in the build script. In other words, do not try to run for example {{Code|sudo ~/{{project_name_short}}/whonix_build --flavor whonix-gateway -- --build --target virtualbox}} and {{Code|sudo ~/{{project_name_short}}/whonix_build --flavor whonix-workstation -- --build --target virtualbox}} at the same time. The build would probably fail.
</div>
</div>
<br />

* <u>'''Short'''</u>: '''Do not use images created inside Continuous Integration (CI) environments for anything besides testing!'''
<div class="toccolours mw-collapsible mw-collapsed">
<div class="mw-collapsible-content">
Usually you are not using [https://en.wikipedia.org/wiki/Continuous_integration CI] environments without knowing.

You can find out if you are running inside a CI environment by running.

{{CodeSelect|code=
echo "$CI"
}}

If it shows nothing, i.e.

<pre>

</pre>

Everything is fine.

Otherwise, if it were to show.

<pre>
true
</pre>

Then do not use these images for anything besides testing.

Reason:
https://github.com/{{project_name_short}}/{{project_name_short}}/blob/master/build-steps.d/1100_prepare-build-machine#L577
</div>
</div>
<br />

* {{Build Dependencies}}
* '''<u>VirtualBox builds only</u>:''' Install VirtualBox on the build machine as per [[VirtualBox/Recommended_Version|recommended VirtualBox version]]. <ref>
Due to technical challenges, see [[Dev/VirtualBox#VirtualBox_Installation_Challenges|VirtualBox Installation Challenges]].
</ref>

= Get the Signing Key =
{{Get Signing Key}}

= Get the Source Code =
{{Build Documentation Get Source}}

= OpenPGP Verify the Source Code =
{{OpenPGP Verify the Source Code}}

= Choose Version =
{{
Build Documentation Choose Version
|version={{VersionNew}}-stable
|extra=--recurse-submodules
}}

= VM Creation =
<!--
EDITORS NOTE:
I am not sure it is a great idea to first tell builders how to build {{project name}} and later how to clean up to prepare for another build. Running the cleanup steps before the creation steps may be unnecessary when running these steps for the first time, but doesn't hurt either. An important thing this does archive is creating fewer support requests and bug reports from people running these steps for the second time without remembering they have to clean up first. If you want to discuss this, please open a new discussion in the development forums.
-->
The following build targets are available:

{{CodeSelect|code=
--target virtualbox
}}

{{CodeSelect|code=
--target qcow2
}}

{{CodeSelect|code=
--target raw
}}

{{CodeSelect|code=
--target root
}}

* <code>--target virtualbox</code> creates [[VirtualBox]] VMs.
* <code>--target qcow2</code> creates <code>.qcow2</code> images for [[KVM]] and [[QEMU]].
* <code>--target raw</code> creates <code>.raw</code> images.
* <code>--target root</code> is for [[Dev/Build_Documentation/Physical_Isolation|Physical Isolation Build Documentation]].
* <code>--target virtualbox</code>, <code>--target qcow2</code>, and <code>--target raw</code> can be combined to build multiple images at once.

Choose a flavor.

* <code>--flavor {{project_name_short_lowercase}}-gateway-cli</code>
* <code>--flavor {{project_name_short_lowercase}}-gateway-xfce</code>
* <code>--flavor {{project_name_short_lowercase}}-workstation-cli</code>
* <code>--flavor {{project_name_short_lowercase}}-workstation-cli</code>

Optional. Enable [[Project-APT-Repository|{{project name}} APT repository]] inside the images. <ref>
<code>--redistribute</code> will set <code>export whonix_build_redistribute="true"</code> which results in setting

<pre>
WHONIX_APT_REPOSITORY_OPTS="--enable --codename $whonix_build_apt_stable_release"
export WHONIX_APT_REPOSITORY_OPTS
</pre>

<code>whonix_build_apt_stable_release</code> defaults to <code>{{Stable project version based on Debian codename}}</code> and could optionally through a [[Dev/Source_Code_Intro#Build_Configuration|build configuration]] set to <code>{{Stable project version based on Debian codename}}-proposed-updates</code>, <code>{{Stable project version based on Debian codename}}-testers</code> or <code>{{Stable project version based on Debian codename}}-developers</code>.
</ref> See [[Trust]]. This is done for official {{project name}} [[Dev/Redistribution|redistributeable]] builds.

{{CodeSelect|code=
--repo true
}}

See also [[Build_Configuration|Optional Build Configuration]].

'''Note: These instructions use VirtualBox as an example, assume you have the {{project name}} source code in your home folder (at <code>~/</code>.)'''

----

Delete any existing {{gateway_product_name}} virtual machine with the following command. '''Warning''': This will delete any virtual machine named {{gateway_product_name}} from VirtualBox installed on your build machine!

{{CodeSelect|code=
sudo ~/{{project_name_short}}/whonix_build --flavor {{project_name_short_lowercase}}-gateway-xfce --target virtualbox --clean
}}

Delete any existing {{workstation_product_name}} virtual machine with the following command. '''Warning''': This will delete any virtual machine named {{workstation_product_name}} from VirtualBox installed on your build machine!

{{CodeSelect|code=
sudo ~/{{project_name_short}}/whonix_build --flavor {{project_name_short_lowercase}}-workstation-xfce --target virtualbox --clean
}}

----

Build a {{gateway_product_name}} virtual machine image.

{{CodeSelect|code=
sudo ~/{{project_name_short}}/whonix_build --flavor {{project_name_short_lowercase}}-gateway-xfce --target virtualbox --build
}}

Build a {{workstation_product_name}} virtual machine image.

{{CodeSelect|code=
sudo ~/{{project_name_short}}/whonix_build --flavor {{project_name_short_lowercase}}-workstation-xfce --target virtualbox --build
}}

----

While building, you might see a few [[Dev/Expected Build Warnings|Expected Build Warnings]].

= Virtual Machines Build Result =

* VirtualBox: Te newly created VMs can be seen in VirtualBox user interface and in the usual VirtualBox data folders.
* KVM, QEMU, raw images: The resulting <code>.qcow2</code> and/or <code>.raw</code> images can be found in <code>~/whonix_binary</code> folder.

Most users have completed the build process at this point, can start using {{project name}} and skip the rest of this page.

= Unified Images =
Optional: Creation of ([https://forums.whonix.org/t/whonix-virtualbox-14-0-1-4-4-unified-ova-downloads-point-release/6996 unified]) <code>.ova</code> image(s) for {{project name}} VirtualBox or <code>libvirt.xz</code> archives for {{project name}} KVM. This might only be interesting if the goal is [[Dev/Redistribution|Redistribution]] of images to third parties such as the public.

There are two options.

* '''A''') Automated, a bit difficult (since it expects preexisting signing keys), using [[#Prepare Release|prepare_release]] script, <u>OR</u>
* '''B''') Manually.
** VirtualBox: Using the VirtualBox graphical or command line interface VM export feature could be used. <ref>
This is sane since important VM settings were already configured in https://github.com/Whonix/Whonix/blob/master/build-steps.d/2600_create-vbox-vm.

<code>prepare_release</code> VM export does nothing special/important for privately used builds.
</ref>
** KVM: Manually.

= Prepare Release =
[https://github.com/Whonix/whonix-developer-meta-files/blob/master/release/prepare_release prepare_release] is useful for:

* Creation of a [https://forums.whonix.org/t/whonix-virtualbox-14-0-1-4-4-unified-ova-downloads-point-release/6996 unified] <code>.ova</code> image or <code>libvirt.xz</code> archive
* Creation of torrent files.
* Creation of hash sum files.
* Creation of digital software signatures.
** [[OpenPGP]] (gpg) signatures
** [[signify|signify]] signatures
** [https://forums.whonix.org/t/use-codecrypt-to-sign-whonix-releases/7844 soon] C[[Codecrypt|odecrypt]] signatures
* Adding the license agreement.
* Adding the disclaimer.
* [[Dev/Redistribution|Redistribution]].
* Example: {{CodeSelect|code=
sudo -E /home/user/Whonix/packages/whonix-developer-meta-files/release/prepare_release --build --target virtualbox --flavor whonix-workstation-xfce
}}

For private builds, i.e. for builds which are not supposed to be redistributed to others, none of this is important. If any of this was important, it could also be done manually.

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Development]]
