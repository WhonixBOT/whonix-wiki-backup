{{Header}}
{{#seo:
|description=Technical Design Documentation about Entropy
}}
= Introduction =

Whonix 0.5.5 and above have haveged installed by default. (see below)

The [http://www.kernel.org/doc/man-pages/online/pages/man4/random.4.html Linux Kernel man page] says: "''[...] /dev/random should be suitable for uses that need very high quality randomness'' [...]".

Quoted from the [https://we.riseup.net/riseup+tech/entropy riseup.net page about entropy]: "''[...] entropy-estimation is a black-art and not very well understood [...]''".

While it would be good to be cautions, i.e. learning about the entropy quality in Virtual Machines and if required learning about methods to improve it, it is not a critical problem. Successful entropy estimation attacks have never been reported for any software.

= Information resources =

== Resources ==

* [http://en.gentoo-wiki.com/wiki/Generating_better_random_numbers#Dieharder Gentoo wiki: Generating better random numbers]
* [https://polarssl.org/tech-updates/security-advisories/polarssl-security-advisory-2011-02 HAVEGE: PolarSSL Security Advisory 2011-02]
* [http://wiki.qemu.org/Features/VirtIORNG Qemu: virtio-rng, virtual random generator]

== VirtualBox Bug Reports ==

* [https://www.virtualbox.org/ticket/11296 entropy quality]
* [https://www.virtualbox.org/ticket/11297 poor entropy performance]

== /dev/random vs. /dev/urandom ==

This debate comes from a misconception by the Linux manual writer.<ref>https://pthree.org/2014/07/21/the-linux-random-number-generator/</ref> The fact is both APIs use the same CSPRNG. The issue happens when the randomness pool has not been properly initialized and entropy is requested early at boot. Otherwise the blocking behavior of <code>/dev/random</code> during normal system running is an annoying bug than a useful safety feature. A well seeded pool should be able to provide sufficient/endless randomness from a single seed.<ref>https://news.ycombinator.com/item?id=11561340 Comments by tptacek</ref><ref>https://www.2uo.de/myths-about-urandom</ref>


Here is what reknown cryptographer Dr. Daniel J. Bernstein has to say on the matter:<ref>http://www.mail-archive.com/cryptography@randombit.net/msg04763.html</ref>

<pre>
Cryptographers are certainly not responsible for this superstitious
nonsense. Think about this for a moment: whoever wrote the /dev/random
manual page seems to simultaneously believe that

(1) we can't figure out how to deterministically expand one 256-bit
/dev/random output into an endless stream of unpredictable keys
(this is what we need from urandom), but

(2) we _can_ figure out how to use a single key to safely encrypt
many messages (this is what we need from SSL, PGP, etc.).

For a cryptographer this doesn't even pass the laugh test.

I'm not saying that /dev/urandom has a perfect API. It's disappointingly
common for vendors to deploy devices where the randomness pool has never
been initialized; BSD /dev/urandom catches this configuration bug by
blocking, but Linux /dev/urandom (unlike Linux /dev/random) spews
predictable data, causing (e.g.) the widespread RSA security failures
documented on http://factorable.net. But fixing this configuration bug
has nothing to do with the /dev/random superstitions.
</pre>

== Software Packages ==
=== Introduction ===
It has to be researched if they do work well inside Virtual Machines (VirtualBox). Simply installing all of them may not be wise.

* [http://www.vanheusden.com/entropybroker/ entropy broker]: [https://packages.debian.org/source/stable/entropybroker In Debian.]
* rng-tools: [https://packages.debian.org/buster/rng-tools In Debian.]
* timer_entropyd: [http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=545148 Not in Debian.]
* audio-entropyd: [https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=526470 Not in Debian.]
* video-entropyd: [https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=672347 Not in Debian.]
* clrngd: Not in Debian? But replaced by haveged / jitterentropyd?
* ekeyd: In Debian.
* HAVEGE: In Debian. See below.
* jitterentropy-rngd: [https://packages.debian.org/buster/jitterentropy-rngd In Debian.] See https://phabricator.whonix.org/T817

=== haveged ===

Haveged is an entropy gathering daemon.

Quoted from the [http://www.issihosts.com/haveged/ais31.html haveged testing page]: "''[...] will behave similarly in a virtual environment is a more risky proposition [...] there have been reports of VM that implement the processor time stamp counter as a constant and there are known differences in cpuid operation in others. [...]''"

Will haveged create sufficient entropy in VirtualBox? Luckily, haveged comes with tools to check the if the entropy it creates.

The README in the haveged source folder and the [http://www.issihosts.com/haveged/index.html haveged website] contains [http://www.issihosts.com/haveged/ais31.html instructions] for testing haveged.

Makes sense to test entropy while haveged is disabled.
<pre>
sudo service haveged stop
</pre>

Get haveged sources and test.

<pre>
apt-get source haveged
cd haveged-*
./configure --enable-nistest
make check

## perhaps repeat
#make clean
#make check
</pre>

Should say something like

<pre>
0 failed individual tests
PASS: nist/test.sh
==================
All 2 tests passed
==================
</pre>

* This was successfully tested in VirtualBox without haveged running.
* This was successfully tested in VirtualBox with haveged running.
* This was successfully tested in kvm without rng device and without haveged running.
* This was successfully tested in kvm without rng device and with haveged running.
* This was successfully tested in Qubes without haveged running. <ref>https://phabricator.whonix.org/T32</ref>
* This was successfully tested in Qubes with haveged running.


=== jitterentropy === 

jitterentropy is a RNG designed in the spirit of haveged (using CPU timer jitter as entropy source) except it made up of a kernel module - mainlined since Linux 4.2 and a userspace daemon (jitterentropy-rngd*) to prevent /dev/random from blocking. The advantage of jitterentropy is by taking advantage of a loaded kernel module, it can ensure randomness is being collected before the CSPRNG is initialized. So, when CSPRNG initialization happens, we can ensure that it is properly seeded on first boot, minimizing the likelihood that exact keys will be created on distinct systems. This is something haveged can't provide, as it runs entirely in userspace.

It is a good alternative to haveged, especially for hypervisors that don't support virtio-RNG and so don't have access to entropy sources early during boot process. jitterentropy-rngd is now included in Debian Buster and has been available since Whonix 15.<ref>https://phabricator.whonix.org/T817</ref><ref>https://phabricator.whonix.org/T727</ref>

Links:


http://www.chronox.de/jent.html

http://www.chronox.de/jent/doc/CPU-Jitter-NPTRNG.pdf

https://pthree.org/2016/05/24/cpu-jitter-entropy-for-the-linux-kernel/

https://packages.debian.org/sid/jitterentropy-rngd


Playing devil's advocate here: Ted Ts'o <ref>He's the main developer behind Linux's RNG and staunchly resisted relying only on Intel's RDRAND. His opinions carry weight with good reason.</ref> expresses strong skepticism about the efficacy of RNGs that rely on CPU jitter. summary: CPU jitter may not be random as thought to someone who designed the CPU cache and know how its internals "tick" <ref>https://lwn.net/Articles/586427/</ref>. So while these RNGs may not harm, another solution for RNG-less platforms may be a good idea.


<pre>
It may be that there is some very complex state which is hidden inside the the CPU execution pipeline, the L1 cache, etc., etc. But just because *you* can't figure it out, and just because *I* can't figure it out doesn't mean that it is ipso facto something which a really bright NSA analyst working in Fort Meade can't figure out. (Or heck, a really clever Intel engineer who has full visibility into the internal design of an Intel CPU....)
</pre>

= Hardware Entropy Keys =

==Entropy Key==
[http://www.entropykey.co.uk/ Entropy Key]; Hardware not fully open source. Some resources say, it is okay as an additional source of entropy. Where to add it? Since Whonix depends on a host operating system, the Whonix-Gateway and the Whonix-Workstation, where it does make most sense to add it? Perhaps adding it to the host and using a entropy broker could be the most effective method. Better than buying three entropy keys.

==OneRNG==
[https://www.kickstarter.com/projects/moonbaseotago/onerng-an-open-source-entropy-generator OneRNG]; Hardware and Firmware fully open source. Firmware is cryptographically signed to ensure it hasn't been tampered with. Board has a removable tin RF Shield so you can verify the circuits match the diagrams provided by the manufacturer. Fully reprogrammable with manufacturer provided software+cable (must be bought separately). Where to add it? Since Whonix depends on a host operating system, the Whonix-Gateway and the Whonix-Workstation, where it does make most sense to add it? Perhaps adding it to the host and using a entropy broker could be the most effective method.

==List==
* http://noosphere.princeton.edu/reg.html
* http://en.m.wikipedia.org/wiki/Noosphere
* http://www.idquantique.com/random-number-generators/products/quantis-usb.html
* http://onerng.info
* http://www.entropykey.co.uk
* https://en.wikipedia.org/wiki/Comparison_of_hardware_random_number_generators
* http://www.seeedstudio.com/wiki/FST-01

= Resources =
* [http://holdenc.altervista.org/avalanche/ Random Sequence Generator based on Avalanche Noise]
* https://groups.google.com/forum/#!forum/randomness-generation
* https://groups.google.com/forum/#!topic/randomness-generation/pIdFa3iarhI
* turbid - High-Entropy Symbol Generator http://www.av8n.com/turbid/
* turbid - Debian RFP - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=59147
* On Linux entropy issues generally. Must read. - https://www.av8n.com/computer/htm/secure-random.htm

{{Footer}}

[[Category:Design]]
