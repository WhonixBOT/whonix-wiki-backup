{{Header}}
{{#seo:
|description=How Bitcoin can be stolen even when using a Hardware Wallet.
|image=https://www.whonix.org/w/images/4/40/Cryptohardwarethreat.jpg
}}
{{Title|
title=Cryptocurrency Hardware Wallet: Threat Model
}}
[[image:Cryptohardwarethreat.jpg|thumb]]
'''How Bitcoin can be stolen even when using a hardware wallet.'''

= Introduction =

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = Hardware wallets <u>might</u> increase security under some threat models but this requires knowledge. Most users lack the required background knowledge and would still loose their cryptocurrency under many different attack models. <ref>
https://twitter.com/JWWeatherman_/status/1327712434572947456
</ref>
}}

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = <u>Note</u>: The term "account number" rather than "address" is used throughout this wiki entry in order to avoid confusion.
}}

[https://theycallitcrypto.com/tutorial/what-is-a-hardware-wallet-the-definitive-guide/ Hardware wallets] are:

<blockquote>... a physical device on which a user stores their private keys to access their blockchain wallets. These devices donâ€™t have to be electronic. Any physical item that can store a private key is considered a hardware wallet.

From a general perspective, hardware wallets are convenient, secure, and immune to many of the hazards other wallet types can fall victim too.</blockquote>

It is absolutely crucial to understand the concept of an <code>insecure display</code> versus a <code>secure display</code>.

In essence, hardware wallets seek to secure users' funds under the sane assumption that the computer in use may be compromised by [[Malware|malware]]. Once infected this way, malware can:

* secretly view all user actions without obvious signs;
* manipulate the screen, such as showing one account number instead of another correct account number; and
* capture all key strokes (sniff passwords), download files and perform other malicious actions.

For these reasons the computer display is considered an untrustworthy, an <code>insecure display</code>, while the display of the hardware device is considered trustworthy, a <code>secure display</code>. The reason for considering the hardware device's display to be trustworthy is that vendors of hardware wallets enforce a requirement that only signed software must be used. Unless the cryptographic verification process that prevents unsigned software from running on the hardware wallet can be subverted, the hardware wallet is considered to be free of malware and therefore a secure display. In other arenas, this security concept is referred to as "What you see is what you sign" ([https://en.wikipedia.org/wiki/WYSIWYS WYSIWYS]). <ref>
In other words, just sign what you see.
</ref>

= Threat Model =

In order to perform cryptocurrency transactions securely, a number of threats must be averted so funds are not lost to attackers. While funds stored on the devices are safe, it is not easy to transfer funds onto the device in a secure fashion; consider the risks below.

'''Table:''' ''Hardware Wallet Threats''

{| class="wikitable"
|-

! scope="col"| '''Threat Domain'''
! scope="col"| '''Description and Recommendations'''
|-

! scope="row"| Failure to Understand Basic Threat Model Risk
| 
* <u>Threat</u>: Many users lack basic background knowledge such as the difference between a <code>secure display</code> and an <code>insecure display</code> as mentioned in the [[#Introduction|Introduction chapter of this page]].
* <u>Conclusion</u>: The computer screen could be modified by malware to fraudulently ask the user to enter the backup recovery seed phrase (mnemonic phrase) (perhaps under pretense of seed phrase verification) which would then give the attacker full access to all cryptocurrency holdings of the user.
* <u>Workarounds</u>:
** Learn how to use hardware wallets in combination with a malware free computer first with tiny amounts of cryptocurrency for testing purposes to learn the basic process. Later be suspicious about changes in the workflow and ask for trustworthy advice before proceeding.
|-

! scope="row"| Recipient Account Number Discovery Risk
| 
* <u>Threat</u>: It is difficult to view one's recipient account number on the hardware wallet's secure display.
** The [https://chrome.google.com/webstore/detail/ledger-wallet-bitcoin/kkdpmhnladdopljabkgpacgpliggeeaf Ledger Wallet Bitcoin] has a "show address on device" ("show account number") button, which shows the account number on the secure hardware wallet display.
** The [https://www.ledgerwallet.com/apps/ethereum Ledger Wallet Ethereum] and other wallets did not have this function at the time of writing (2019).
** [https://www.myetherwallet.com/ myetherwallet] has a "show account number on device" feature, however: 
*** myetherwallet is browser-based and should therefore be avoided (even when running locally).
*** The online version of myetherwallet should be avoided at all cost since the myetherwallet server is an obvious target for hackers.
*** It is difficult to us myetherwallet locally in conjunction with a ledger hardware wallet due to browser issues. <ref>https://github.com/kvhnuke/etherwallet/issues/558#issuecomment-307307105</ref>
** In some devices, even if the account number is shown it is difficult to read from the display.
*** The [https://shop.ledger.com/products/ledger-nano-s Ledger Nano S] only has a small display and the account number -- which can be 35-45 random characters long -- and is displayed as ticker text which automatically scrolls over the display at high speed. This means at best it is only possible to view the first few and last few characters, while skipping all those in the middle. This provides an opportunity for attackers to try to create an address where the start and end of the address match, but the middle section is under their control.
*** The [https://shop.ledger.com/products/ledger-blue Ledger Nano Blue] does not have the above problem and shows the full account number at once, providing an opportunity to verify it in full.
* <u>Conclusion</u>: The regular user of a ledger hardware wallet will have difficulty in discovering their own recipient account number in a secure manner, due to the risk of fraudulent modification by malware running on the computer. This means it is also difficult to tell senders of the correct recipient account number without potentially being misled by [[Malware|malware]].
* <u>Workaround</u>: Use multiple computers to discover the account number in the hope they are not all compromised.
|-

! scope="row"| Receiving Account Number Transmission Risk
| 
* <u>Threat</u>: When receiving coins -- such as when withdrawing cryptocurrency from the cryptocurrency exchange -- the user's recipient account number is entered into their computer, which is utilizing an insecure display. 
* <u>Conclusion</u>: The screen could be modified by malware to fraudulently redirect the withdrawal to an account number held in the attacker's wallet.
* <u>Workarounds</u>:
** Use withdrawal account number whitelists if they are offered by the sender.
** This issue does not apply if the user can transmit the recipient account number through a trusted channel. 
|-

! scope="row"| Account Balance Discovery Risk
| 
* <u>Threat</u>: Even if cryptocurrency has been received on the device, the balance is not shown on the hardware wallet secure display.
* <u>Conclusion</u>: The user might mistakenly believe they have received more value than was actually transferred.
* <u>Workaround</u>: Use multiple computers to check the balance (watch-only accounts), in the hope they are not all compromised.
|-

! scope="row"| Recipient Account Number Transmission Risk
| 
* <u>Threat</u>: When sending cryptocurrency to merchants or cryptocurrency exchanges, the recipient account number is shown on the computer's insecure display. It could be modified by malware to redirect the receiving account number to the attacker. Since the hardware wallet secure display will ask for confirmation (account number and amount), at least smaller transactions are protected. For example if the user has 1 Bitcoin but only wants to send 0.1 Bitcoin, there is an option to abort the transaction if the ledger display asks to confirm a transaction that is larger than expected.
* <u>Workarounds</u>:
** This issue does not apply if the recipient account number can be verified through a trusted channel. For example, multiple devices can be used (since it is unlikely they are all infected) or a personal meeting with the sender can occur beforehand.
** It is possible to send funds in small installments and then confirm with the recipient via a secure channel they were received. This limits the amount of funds that may be lost to the size of the installment.
|-

! scope="row"| Time of Compromise Matters
| 
* Once funds are on the hardware wallet they are safe until the user attempts to spend them.
* This means if/when the user's computer is compromised later on (after stocking up funds), less funds are lost but all the aforementioned threats apply.
|-

! scope="row"| Physical Security
| 
* If the hardware wallet and/or computer are stolen, all funds are safe as long as the user still has the backup recovery seed phrase (mnemonic phrase). <ref>This assumes the attacker is unable to circumvent the hardware wallet PIN entry and/or extract the keys from the device.</ref>
* If the user stores the hardware wallet and PIN in the same place and loses it, all funds will be lost.
* If the mnemonic phrase is lost and hardware wallet or PIN code is lost all funds are irretrievable.
* Compared to full disk encryption, it is easier to keep private keys secured. <ref>The protections afforded by hardware wallet security are not necessarily stronger than computer full disk encryption (such as LUKS in Linux).</ref>
|-

! scope="row"| Usability
| 
* easier to safely split bitcoin / bitcoin cash / bitcoin gold
* easy to carry: yes
* easy to backup: yes
* easy to replace device: yes
* easier than Qubes OS (offline vault VM): yes
|-

! scope="row"| Usability Issues
| 
* browser support on/off
* ledger device applications do not auto start
|-

! scope="row"| Miscellaneous
| 
* more obscure to attack than a "simple trojan horse": yes
|-

! scope="row"| Low Quality of Randomness
| 
* <u>Threat</u>:
** The quality of randomness required by the device to create the backup recovery seed phrase (mnemonic phrase) might be too low. An attack might find a a weakness in the Random Number Generator (RNG) which helps to attacker to guess other other user's mnemonic phrase and thereby steal their cryptocurrency.
* Since well encrypted data is indistinguishable from random data, it would even be possible for an attacker to subvert the production process of a hardware wallet, thereby compromising the RNG. All tests for verification of randomness would pass but the attacker could have user a cryptographic algorithm and private key which turns the apparently random data into predictable data for the attacker only. Thereby the attacker could wait for the hardware wallet to be widely used before stealing huge amounts of cryptocurrency.
** Suspicious and even proven to be broken RNG's exist. [[Dev/Entropy#RDRAND|See this list of references]].
** [https://github.com/Whonix/security-misc security-misc] (installed by default in Kicksecure and Whonix) distrusts the CPU for initial entropy at boot as it is not possible to audit, may contain weaknesses or a backdoor.
** [[Kicksecure]] and [[Whonix]] improve entropy generation due to pre-installed entropy generators. See wiki page [[Dev/Entropy#RDRAND|Dev/Entropy]] for details.
** Quote [https://support.ledger.com/hc/en-us/articles/360010073520-Quality-of-randomness ledger hardware wallet on Quality of randomness]:
*** <blockquote>Hardware RNGs like the one used in Ledger hardware wallets use several sources of randomness.</blockquote>
*** But does not elaborate on that page what these several sources of randomness are.
* <u>Conclusion</u>: A hardware wallet should not be trusted with mnemonic phrase creation.
* <u>Workarounds</u>: Create the mnemonic phrase on a device with high quality randomness (i.e. a computer). This will be very difficult for most users since this requires a malware free computer to begin with.
|-

! scope="row"| Impracticality of Workarounds Risk
| 
* <u>Threat</u>: As denoted by the term, a 'workaround' is not an actual fix. For workarounds to be effective, they require: awareness (of which there is probably very little); wide adoption (very few people are applying these), and easy steps (most are cumbersome due to bad usability).
* <u>Conclusion</u>: It is likely most workarounds will be neglected during various phases due to limited awareness/skills or time pressure.
|-

|}

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
