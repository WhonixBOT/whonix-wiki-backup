{{Header}}
{{#seo:
|description=Using a Tor Controller with Whonix. Arm. Vidalia. Change your Tor circuit. Monitor Tor.
}}

= Tor Controller =
There are three options: [[#Arm]], [[#tor-ctrl]] or [[#Vidalia]]. [[#Arm]] and [[#tor-ctrl]] are already {{Code2|pre-installed}} on Whonix.

[[#Arm]] is {{Code2|recommended}}.'''

= Vidalia =
'''[[#Vidalia_recommended_against|Not recommended]].'''<ref>
{{Anchor|Vidalia_recommended_against}}
Vidalia is recommended against, because:

* Vidalia is unmaintained (no one is working on it anymore).
** Vidalia has been removed from Tor Browser Bundle 3.x by The Tor Project.
** Vidalia has been removed from Debian jessie by the Debian developers.
** So this project is dead.
* Vidalia has issues with controlling Tor, i.e. Vidalia can't stop the Tor which comes from the Debian package, which is started as user "debian-tor". It also can not edit {{Code2|/etc/tor/torrc}}. Not sure if control commands such as New Identity are correctly processed (easy to find out).
* Vidalia does not understand obfuscated bridges.
* Which overall makes a pretty bad and confusing user experience. Therefore recommended against.
* However, if it's Vidalia's nice network map you're after, that will work.
</ref> Better use [[#Arm]]. See below. (See [[Vidalia]].)

= Arm =
== Arm Usage ==
Arm is '''recommended'''. It's already pre-installed on Whonix-Gateway. <ref>Since [[#Vidalia]] is [[#Vidalia_recommended_against|recommended against]].</ref>

[[Image:screenshot_arm_page1_cropped.png|arm, Tor Controller|thumb]]

If you are using a <u>graphical</u> Whonix-Gateway, go to:

<pre>
Start Menu -> Applications -> System -> Arm
</pre>

If you are using a <u>terminal</u> Whonix-Gateway:

<pre>
arm
</pre>

To get a new circuit, press:

<pre>
n
</pre>

To exit arm, press:

<pre>
q
q
</pre>

== Arm FAQ ==

{| class="wikitable" style="background-color: #fff;text-align: center"

! message / question
! answer

|-
| <u>{{Code2|Am I compromised? Does Arm report leaks?}}
| Arm is conceptually not a tool to find out about serious issues such as compromise or leaks.</u> <ref>

Arm works on a different level. It's a Tor Controller. It talks to Tor using Tor's ControlPort. It's an interface to show what Tor thinks. Neither Tor nor Arm implement anything such as virus detection, compromise detection, leak detection etc. Messages by Arm are interesting, useful but usually no reason for grave concern.
</ref>


|-
| {{Code2|Tor is preventing system utilities like netstat and lsof from working. This means that arm can't provide you with connection information. You can change this by adding 'DisableDebuggerAttachment 0' to your torrc and restarting tor. For more information see... https://trac.torproject.org/3313}}
| Not of concern. If you want to learn about the technical details, read https://trac.torproject.org/3313.

|-
| DisableDebuggerAttachment even when running as root:
| This is a [https://trac.torproject.org/projects/tor/ticket/7709 bug] in arm.

|-
| {{Code2|man page (GENERAL OPTIONS and COMMAND-LINE OPTIONS)}}
| This is not of concern. This is a bug in arm.

|-
| {{Code2|[WARN] Socks version 71 not recognized. (Tor is not an http proxy.)}}
| 
This is caused by [[whonixcheck]] (by function {{Code2|check_tor_socks_port_reachability}}). It checks if a Tor SocksPort is reachable by trying to fetch it using curl. <ref>
<pre>
curl.anondist-orig 10.152.152.10:9100
</pre>
</ref> It will not report anything if it worked, but would complain if it failed.

|-
| {{Code2|[WARN] Rejecting request for anonymous connection to private address [scrubbed] on a TransPort or NATDPort.  Possible loop in your NAT rules?}}
| This happens for example if you run "curl 192.168.0.15", because when you type "curl", by default in Whonix, you are not directly using curl, but a uwt wrapped (stream isolated) [https://www.whonix.org/wiki/Stream_Isolation Stream Isolation] curl. It would not try to directly connect to 192.168.0.15, but to connect to 192.168.0.15 through Tor and this is what Tor is mentioning. This is not of concern for security. It only means, that you attempted something, that will not work that way. Deactivate the curl stream isolation wrapper or use the non-wrapped version (see [https://www.whonix.org/wiki/Stream_Isolation Stream Isolation]).

|-
| {{Code2|[NOTICE] You configured a non-loopback address '10.152.152.10:9179' for SocksPort. This allows everybody on your local network to use your machine as a proxy. Make sure this is what you wanted. [1 duplicate hidden]}} (Or other port number or DnsPort or TransPort.)
| This is not of concern. Tor really listens on that IP/port. It is Whonix-Gateway's network interface, that is only available to Whonix-Workstations, because it is an internal network with Whonix-Workstation and because Whonix-Gateway is firewalled (see ''{{WhonixFirewall}}'' or in Whonix source code).

|-
| {{Code2|[NOTICE] New control connection opened. [2 duplicates hidden]}} (Or more duplicates.)
| This is not of concern. This is caused by [[whonixcheck]]'s Tor Bootstrap Status Test, which uses Tor's ControlPort or [[Dev/CPFP|CPFP]].

|-
| {{Code2|[NOTICE][ARM_WARN] The torrc differ from what tor's using. You can issue a sighup to reload the torrc values by pressing x. Configuration value is missing from the torrc: RunAsDaemon}}
| This is not of concern. Arm usability bug. <ref>https://trac.torproject.org/projects/tor/ticket/16459</ref>

|}

= tor-ctrl =
== On Whonix-Gateway ==
tor-ctrl <ref>https://github.com/Whonix/tor-ctrl</ref> comes with Whonix by default.

Example usage to get a new circuit, on Whonix-Gateway:

<pre>
tor-ctrl -a /var/run/tor/control.authcookie -P 9051 -c "signal newnym"
</pre>

See also:

<pre>
man tor-ctrl
</pre>

== On Whonix-Workstation ==
=== Example: Get a New Identity using Whonix-Workstation Terminal ===
Do this every time you want a new circuit. Run {{Code2|tor-ctrl}} (installed by default) with {{Code2|signal newnym}}.

<pre>
bash -x tor-ctrl -p notrequired -c "signal newnym"
</pre>

If you see at the bottom of the output.

<pre>
+ sendcmd signal newnym
+ echo signal newnym
+ sleep 1
+ sendcmd QUIT
+ echo QUIT
+ sleep 1
+ STR='Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '\''^]'\''.
250 OK
250 OK'
+ vecho 'Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '\''^]'\''.
250 OK
250 OK'
+ '[' 0 -ge 1 ']'
+ echo 'Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '\''^]'\''.
250 OK
250 OK'
++ grep -c '^250 '
+ '[' 2 = 3 ']'
+ exit 1
</pre>

Then it succeeded. ({{Code2|exit 1}} is a bug in {{Code2|tor-ctrl}}, because it doesn't understand the double {{Code2|250 OK}}.)

= netcat =
'''For advanced users.'''

A handy way to send Tor ControlPort protocol commands to Tor's ControlPort. <ref>Or depending on if you are doing this from Whonix-Workstation only to [[Dev/CPFP|Control Port Filter Proxy]].</ref>

Do once. Install netcat.

<pre>
sudo apt-get install netcat-openbsd
</pre>

On Whonix-Gateway or Whonix-Workstation. Connect to Tor's ControlPort. <ref>This works also on Whonix-Workstation, because the [https://github.com/Whonix/anon-ws-disable-stacked-tor anon-ws-disable-stacked-tor] package has set up rinetd listening for connections on localhost and forwarding them Tor Whonix-Gateway's, where [[Dev/CPFP|Control Port Filter Proxy]] is listening.</ref>

<pre>
nc 127.0.0.1 9051
</pre>

Example command to change your Tor circuit.

<pre>
signal newnym
</pre>

Should reply.

<pre>
250 OK
</pre>

= Footnotes =
<references />

= License =
<font size="-3">
Thanks to [https://www.torproject.org/projects/arm.html.en| torproject.org] for the arm screenshot, which is under [http://creativecommons.org/licenses/by/3.0/us/ Creative Commons Attribution 3.0 United States License].; [http://www.atagar.com/arm/screenshots.php Other screenshots of Arm]; [https://www.torproject.org/projects/arm.html.en Arm project page]</font>

{{Footer}}

[[Category:Documentation]]
