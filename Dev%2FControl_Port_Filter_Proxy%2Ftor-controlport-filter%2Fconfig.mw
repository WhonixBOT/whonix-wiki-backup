{{Header}}
{{#seo:
|description=Control Port Filter Proxy - filtering dangerous Tor Control Port commands - Design Documentation
}}

__TOC__

----

==== Use Case ====
Whonix by default needs to ship some default config so Whonix deployed in its default setup will work out of the box. 30_whonix.conf

Now, sometimes users want to modify the config that Whonix is provided by default. Either by the user changing the setting themselves or by installing some package that changes the config.

The problem is, we really don't want users to modify 30_whonix.conf. This is because, next time Whonix is updated, we might need to modify 30_whonix.conf. If both, the user and Whonix wants to modify that file, it won't work. apt-get/dpkg will throw an interactive conflict resolution dialog, asking the user to keep its user modified version or the new Whonix version or to manually merge these changes. This usually confuses users. If they keep their old file, something might not work. If they install the new config by Whonix, they loose their settings. And merging the files is difficult during upgrading for users. Also it makes the upgrade process interactive rather than easy non-interactive.

Also other packages who want to extend tor-controlport-filter config must not modify 30_whonix.conf. dpkg does not allow another package to modify an existing file on the system. (without hacks such as dpkg-divert which should be avoided due to issues) And some echo/sed style replacement by the new package would also throw an interactive dpkg confict resolution dialog when Whonix is updated.

Whonix will ship by default a locked down config. Opening as little attack surface as possible. If users want to use other functions such as onionshare they need to compromise security. They need to allow additional Tor control protocol commands so their application such as onionshare can work.

==== on various .d style implementation flavors ====
Different software packages such as apt vs grub all implement their '.d' folders a bit differently. They're most times sources in lexical order and the new convention is to only use configs ending with '.conf'.

* For example for /etc/grub.d lets one add additional boot menu entries. It however does not allow (without bad hacks) to remove/modify existing boot menu entries.

* /etc/default/grub.d lets users (and packages) change global grub settings. Such as /etc/default/grub.d/30_debian.conf could say "resolution=640x480" (made up that variable name for the sake of an example) and /etc/default/grub.d/50_user.conf "resolution=1024x768". Ultimately "resolution=1024x768" would win.

* With /etc/default/grub.d it's also possible to unset changes. (I think.) /etc/default/grub.d/60_test.conf could say "resolution=". So "resolution=" would win.

* /etc/bashrc.d does something like this

<pre>
for file_name in /etc/bashrc.d ; do
   source "$file_name"
done
</pre>

* For /etc/tor-controlport-filter.d which is complicated enough, I guess, best we can do is merging all config files
** This means, higher priority config files will probably not be able to disable settings my lower priority config files. However, that should not matter. At the moment there is no use case where this would be useful.
** While 30_whonix.conf comes by default, Whonix user documentation will explain how to get onionshare, ricochet etc. to work. 
** For onionshare ideally we can just say "create a file /etc/tor-controlport-filter.d/50_onionshare.conf with the following content".
** Similarly we ideally we can just say for ricochet "create a file /etc/tor-controlport-filter.d/50_ricochet.conf with the following content".
** So users who just have both 50_onionshare.conf and 50_ricochet.conf can use both programs.
** Creating files and pasting stuff is usually something that users easily understand. What they don't easily understand is to explain "open file 30_whonix.conf and then inject X at that line and Y and that line etc.".

==== How ====
tor-controlport-filter in Whonix cannot filter per application. Whonix-Gateway won't have access to the program name talking to it. So Whonix can only have one global whitelist. However, it would be nice if that global whitelist could be split into multiple files.

They're supposed to be processes in lexical order.

* /etc/tor-controlport-filter.d gets processed first (lower priority)
* /usr/local/etc/tor-controlport-filter.d gets processed second (higher priority)


pseudo code in shell / bash? Like this:

<pre>
for file_name in /etc/tor-controlport-filter.d/*.yml ; do
   file_list="$file_list $file_name"
done

for file_name in /usr/local/etc/tor-controlport-filter.d/*.yml ; do
   file_list="$file_list $file_name"
done

for item in $file_list ; do
   source "$item"
done
</pre>

==== match-exe-paths ====
<pre>
 match-exe-paths:
   - '*'
</pre>

This is because that information gets lost during the workstation -> gateway transfer. Hard to have it both way - Fine tuned restricted application white lists (which are great) vs Whonix workstation -> gateway split model.

==== match-users ====
<pre>
  match-users:
    - '*'
</pre>

Same as above.

==== match-hosts ====
<pre>
  match-hosts:
    - '*'
</pre>

This actually might make sense in Whonix. A user using multiple Whonix-Workstations could configure the "default" match host <code>*</code> for Tor Browser / whonixcheck. And then configure another workstation (with IP <code>10.152.152.12</code> with <code>match-hosts '10.152.152.12'</code>.

This is currently not implemented.

If that gets to complicated, just forget about it.

==== comparison with Whonix legacy control-port-filter-python config parsing code ====
If you like to look at 'legacy control-port-filter-python' (that's how I call the script that Whonix had before moving to tor-controlport-filter code by Tails due to lack of a better term)... Here is how config parsing worked back then:

https://github.com/Whonix/control-port-filter-python/blob/164411fb7c8914022a5def02b5aea7118e7ca8a8/usr/sbin/cpfpd#L29-L75

The whitelist was simply concatenated. A lot simpler, what? 

Using plain text config files (no yaml / yml).

https://github.com/Whonix/control-port-filter-python/blob/164411fb7c8914022a5def02b5aea7118e7ca8a8/etc/cpfpy.d/30_default.conf#L72-L91

However, likely not possible with rewriting and whatnot.

==== variables at the python level ====
For python everything in a yaml file is a _recursive_ key value pair. E.g.

<pre>
{'match-exe-paths:',''*''}
</pre>

<pre>
{'Command','a bunch of key value pairs'}
{'Command','{'SIGNAL',NEWNYM},{'SAVECONF',CRLF}',....}
</pre>

<pre>
{'events',bunch of key value pairs}
{'events',{'SIGNAL',another key value pair},{'CONF_CHANGED',another key value pair},....}
{'events',{'SIGNAL',{'suppress',false}},{'CONF_CHANGED',{'suppress',false}},....}
</pre>

==== overwriting vs merge/union ====
There need to be rules for:

* 1) *overwriting *a "value" for a key
* b) *keeping both* the "value"s for a single key - i.e. merge/union them.

==== list ====
We need to list out all such exceptions. i.e. we need to list out all cases where we are overwriting[#1] and not.

Any change in "pattern" under GETINFO should be merged/unionised(#2).

But what about "pattern" under "response"?

==== Current Rules Implemented in Whonix fork ====
We will merge/unionise in all cases except

* 1) {suppress, true/false} - Should be overwritten
* 2) {match-hosts, ipaddress} - Should be overwritten
* 3) {match-exe, '*'} - so overwrite with * always
* 4) {match-user,'*'} - so overwrite with * always
*5) If Response: Pattern is same, then overwrite values of the "replacement" [ else, merge]


Typically [as I explained before], everything is key value pair. What we should do with "value", depends upon *its* "key".
But in case of #5, what we do with "replacement"s value depends on the value of previous element "pattern".

==== suppress overwriting example ====
1_file.yml
<pre>
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: true
</pre>

2_file.yml
<pre>
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: false
</pre>

merged_file.yml
<pre>
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: false
</pre>

==== proposal on yml config file merging ====
Perhaps the following will become Whonix minimal config file. It white lists everything required by Tor Browser and whonixcheck. Perhaps we name it 30_whonix.conf.

{{CodeSelect|code=
---
- match-exe-paths:
    - '*'
  match-users:
    - '*'
  match-hosts:
    - '*'
  commands:
    SIGNAL:
      - 'NEWNYM'
    GETINFO:
      - 'status/circuit-established'
      - 'version'
      - pattern: 'net/listeners/socks'
        response:
        - pattern:     '250-net/listeners/socks=".*"'
          replacement: '250-net/listeners/socks="127.0.0.1:9150"'
  confs:
    __owningcontrollerprocess:
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: true
}}

-----

Most likely the following config file allows all stuff that is required for onionshare. Perhaps we name it 40_onionshare.conf.

{{CodeSelect|code=
---
- match-exe-paths:
    - '*'
  match-users:
    - '*'
  match-hosts:
    - '*'
  commands:
    GETINFO:
      - 'onions/current'
    ADD_ONION:
      - pattern:     'NEW:BEST Port=80,(176[0-5][0-9])'
        replacement: 'NEW:BEST Port=80,{client-address}:{} Flags=DiscardPK'
    DEL_ONION:
      - '.+'
  confs:
    __owningcontrollerprocess:
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: true
    HS_DESC:
      response:
        - pattern:     '650 HS_DESC CREATED (\S+) (\S+) (\S+) \S+ (.+)'
          replacement: '650 HS_DESC CREATED {} {} {} redacted {}'
        - pattern:     '650 HS_DESC UPLOAD (\S+) (\S+) .*'
          replacement: '650 HS_DESC UPLOAD {} {} redacted redacted'
        - pattern:     '650 HS_DESC UPLOADED (\S+) (\S+) .+'
          replacement: '650 HS_DESC UPLOADED {} {} redacted'
        - pattern:     '.*'
          replacement: ''
}}

-----

Now, ideally, once tor-controlport-filter start it would read both (or any number) config files and for internal use merge them to the following. It still does everything that 30_whonix.conf is white listing and goes beyond that, also allows everything 40_onionshare.conf is white listing.

{{CodeSelect|code=
---
- match-exe-paths:
    - '*'
  match-users:
    - '*'
  match-hosts:
    - '*'
  commands:
    SIGNAL:
      - 'NEWNYM'
    GETINFO:
      - 'status/circuit-established'
      - 'version'
      - pattern: 'net/listeners/socks'
        response:
        - pattern:     '250-net/listeners/socks=".*"'
          replacement: '250-net/listeners/socks="127.0.0.1:9150"'
      - 'onions/current'
    ADD_ONION:
      - pattern:     'NEW:BEST Port=80,(176[0-5][0-9])'
        replacement: 'NEW:BEST Port=80,{client-address}:{} Flags=DiscardPK'
    DEL_ONION:
      - '.+'
  confs:
    __owningcontrollerprocess:
  events:
    SIGNAL:
      suppress: true
    CONF_CHANGED:
      suppress: true
    HS_DESC:
      - pattern:     '650 HS_DESC CREATED (\S+) (\S+) (\S+) \S+ (.+)'
        replacement: '650 HS_DESC CREATED {} {} {} redacted {}'
      - pattern:     '650 HS_DESC UPLOAD (\S+) (\S+) .*'
        replacement: '650 HS_DESC UPLOAD {} {} redacted redacted'
      - pattern:     '650 HS_DESC UPLOADED (\S+) (\S+) .+'
        replacement: '650 HS_DESC UPLOADED {} {} redacted'
      - pattern:     '.*'
        replacement: ''
}}

==== Whonix fork commits ====
* https://github.com/joysn/control-port-filter-python/commit/22ce6ba6ff6513e45d9166e6004d8748fd407eb0
* https://github.com/joysn/control-port-filter-python/commit/98eaef3dc7eb23ab9ec90297f1eccab74646f684#diff-700d916dcb6f72233745db056c63f43c

{{Footer}}

[[Category:Development]]
