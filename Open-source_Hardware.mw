{{Header}}
{{#seo:
|description=Establishing Hardware Trust, Open-source Hardware Alternatives
|image=https://www.whonix.org/w/images/6/69/Opensourcehardware.png
}}
[[image:Opensourcehardware.png|thumb]]
= Introduction =

{{mbox
| type    = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text    = This chapter contains general security advice and is unspecific to {{project_name}}. Readers interested in this topic should undertake significant research before purchasing any open-source hardware. It is also recommended to learn more about [https://www.gnu.org/philosophy/free-hardware-designs.en.html free hardware designs].
}}

= Hardware Trust in Modern Computing =

Security researcher and Qubes founder, Joanna Rutkowska, has noted that modern computing and networking security relies upon a critical foundation - trusted hardware and firmware domains. Even high-security operating systems have an security upper bound, since that is defined by the trustworthiness of hardware components that are ideally placed to compromise the entire system if bugs or backdoors are present: <ref name=x86_harmful.pdf>https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf</ref>

<blockquote>... for years we have been, similarly, assuming the underlying hardware, together with all the firmware that runs on it, such as the BIOS/UEFI and the SMM, GPU/NIC/SATA/HDD/EC firmware, etc., is all. . . trusted.
<br />
But isn’t that a rational assumption, after all?<br />
<br />
Well, not quite: today we know it is rather unwise to assume all hardware and firmware is trusted. Various research from the last ten years, as discussed below, has provided enough evidence for that, in the author’s opinion. We should thus revisit this assumption. And given what’s at stake, the sooner we do this, the better.
</blockquote>

Rutkowska has concluded the following hardware components and mechanisms are all vulnerable to exploitation and often flawed in their implementation, making them easy to "backdoor": <ref name=x86_harmful.pdf />
<div style="column-count:2;-moz-column-count:2;-webkit-column-count:2">
* x86 boot security (BIOS implementation).
* Vt-d (CPU-enforced sandboxing of networking).
* Graphics cards (GPUs) and sub-systems.
* USB controllers.
* Disk controllers (SATA etc.).
* Embedded controllers (for keyboard operation, battery charging etc.).
* Audio cards.
* Peripheral devices.
* Intel Management Engine (ME) and AMD Security Processor (embedded microcontrollers).
* Built-in speakers, microphones and cameras.
</div>
This is particularly true for privileged, out-of-band hardware components like Intel ME's AMT which can read or write any of the host computer's memory, without any constraints - the perfect, undetectable rootkiting infrastructure. <ref name=x86_harmful.pdf /> In short, it appears that modern computing architectures are impossible to secure properly, especially since popular, proprietary hardware options (Intel and AMD) dominate the market. <ref>AMD-based x86 platforms have analogous hardware mechanisms to Intel, so they are not theoretically safer.</ref>

= Open-source Hardware Alternatives =

People who are motivated to avoid proprietary hardware solutions are in a bind. There are few options available that are truly "free" (as in freedom), affordable and which provide suitable processing power to run "secure" operating systems like [[{{q_project_name_short}}|{{q_project_name}}]], because specific hardware requirements like VT-d and VT-x are necessary for compatibility with future software releases. 

Open-source hardware is also not perfectly secure since it is not "stateless". Meeting this standard requires there be no persistent storage at all. <ref name=x86_harmful.pdf /> Further, "free" hardware does not really exist, since by definition it requires that hardware is free at all levels, including: licensing, the chip and circuit board designs, the field-programmable gate array, source code, relevant repositories and so on. Also, proprietary "soft cores" which are often incorporated in various hardware circuits need to be purged to meet the necessary criteria. <ref>https://www.wired.com/2015/03/richard-stallman-how-to-make-hardware-designs-free/</ref> <ref>https://www.wired.com/2015/03/need-free-digital-hardware-designs/</ref>

== ARM-based Platforms ==

ARM architecture dominates smartphone and tablet markets, providing a good level of performance. However, an open-source "ARM processor" is non-existent, because only the specifications and other intellectual property (IP) are released to manufacturers under specific licenses. This leads to NVIDIA, Samsung and others combining the ARM IP with their own, leading to the actual, customized processors called System-on-Chips (SoCs). <ref name=x86_harmful.pdf /> ARM SoCs also often have a TrustZone extension, with implementation providing similar functionality to Intel's ME. There is nothing special in ARM architecture that prevents the possible introduction of backdoors.

== Open-source Processors ==

Unfortunately, a fully open-source, [https://www.lowrisc.org Linux-capable based processor (SoC)] is not yet available, with the design still being finalized. While this project will eventually allow a 64-bit RISC-V instruction set architecture (ISA) and the development of low-cost boards, the wait may be lengthy (many years) and it is not clear such processors will perform well enough for typical desktop workflows like watching movies, running browsers, using office suites and so on. It is also unknown whether this design will allow for security technologies like IOMMU and memory virtualization. <ref>https://www.lowrisc.org/about/</ref> <ref name=x86_harmful.pdf />

Another initiative related to this topic is the [https://openpowerfoundation.org/ OpenPOWER Foundation], which was established in 2013. The foundation has a number of influential partners, including IBM, Google, NVIDIA, Samsung Electronics and Canonical. Critically, IBM is "...opening up technology surrounding their Power Architecture offerings, such as processor specifications, firmware and software with a liberal license, and will be using a collaborative development model with their partners." <ref name=OpenPOWER>https://en.wikipedia.org/wiki/OpenPOWER_Foundation</ref> <ref>Primarily the Power8 chip technology, but previous designs will also be available for licensing.</ref> The initiative will also include opensource software, firmware, the KVM hypervisor and a little endian Linux operating system. <ref>Firmware to boot Linux was released in 2014.</ref> OpenPOWER code can be found on [https://github.com/open-power GitHub].

= Final Hardware Purchase =

The Free Software Foundation (FSF) makes a number of relevant recommendations: <ref>https://www.fsf.org/resources/hw</ref>

* Find devices which support fully free distributions of GNU/Linux.
* Purchase hardware:
** From manufacturers who support GNU/Linux.
** Which supports coreboot/libreboot as a proprietary BIOS replacement.
** Without the need for proprietary drivers or firmware; see [http://h-node.org/ hdnode.org].
* Check the [https://www.fsf.org/resources/hw/endorsement/criteria FSF criteria] for hardware certification requirements.
* If looking for a single-board computer (SBC), check the [https://www.fsf.org/resources/hw/single-board-computers list] of available (flawed) hardware. <ref>None of these options are completely free in their design.</ref>
* Check the list of [http://www.coreboot.org/Supported_Motherboards motherboards] that are compatible with coreboot. <ref>Some motherboards still require proprietary CPU microcode.</ref>

A list of suppliers selling or providing [https://libreboot.org/ Libreboot] pre-installed on laptops, desktops, servers and motherboards can be found [https://libreboot.org/suppliers.html here]. Readers interested in purchasing hardware with Coreboot pre-installed can start their search [https://www.coreboot.org/users.html here].

== Buyer Considerations ==

Based on the preceding information and links, those seeking an open-source solution need to make a compromise. Since an open source LowRISC processor based on the RISC-V ISA -- which can support a fully-fledged operating system -- does not yet exist, <ref>The [https://www.lowrisc.org/faq/ LowRISC FAQ] notes the rough processor speed that is expected: <blockquote>The clock rate achieved will depend on the technology node and particular process selected. As a rough guide we would expect ~0.5-1GHz at 40nm and ~1.0-1.5GHz at 28nm.</blockquote></ref> the closest thing available is [https://www.fsf.org/resources/hw/single-board-computers single-board computers (SBCs)], which are delivered as one circuit board that are powerful enough to run a real operating system. These systems generally contain a SoC with an ARM processor, with options like [http://spectrum.ieee.org/consumer-electronics/portable-devices/novena-a-laptop-with-no-secrets Novena] and [http://www.mouser.com/new/pandaboardorg/pandaboardES/ PandaBoardES] falling into this category. However, they still have a number of closed-source binary blobs and the FSF also notes "severe flaws" in these products due to proprietary design concerns.

[https://puri.sm/ Purism] also seek to remove as many proprietary blobs as possible, for example by using coreboot in place of the standard BIOS implementation. Unfortunately, this solution is expensive and still relies on an Intel processor. Despite the claims that ME is "neutralized", the ME still poses potential security threats to the user as highlighted in Rutkowska's research.

The following options may be suitable, depending on user requirements:
* <u>Low-end computers:</u> Check [https://www.fsf.org/resources/hw/endorsement/respects-your-freedom this list] from the FSF, as they are certified "RYF" (Respects Your Freedom hardware product certification). 
* <u>High-end computers:</u> Options like [https://store.vikings.net/libre-friendly-hardware/vikings-d16-workstation VKGS-WORK-D16] are compatible with Coreboot/Libreboot BIOS and are capable of booting Qubes OS. It also has no proprietary software or firmware blobs.
* <u>Worthy mention:</u> [https://www.raptorcs.com/ Raptor Computing Systems] have built their processors based on IBM OpenPOWER technology. 
** It is unclear if OpenPOWER is merely source available or whether foundation members can freely modify and release processors based on remixes of the ISA. 
** Available user guides <ref>For example, see the [https://wiki.raptorcs.com/w/images/e/e3/T2P9D01_users_guide_version_1_0.pdf T2P9D01 Mainboard document].</ref> appear to at least partially meet [https://en.wikipedia.org/wiki/Open-source_hardware opensource hardware principles]. <ref>This requires: <blockquote>... that information about the hardware is easily discerned so that others can make it – coupling it closely to the maker movement. Hardware design (i.e. mechanical drawings, schematics, bills of material, PCB layout data, HDL source code and integrated circuit layout data), in addition to the software that drives the hardware, are all released under free/libre terms.</blockquote></ref> 
** Unfortunately it is not compatible with Qubes OS, but it will run Linux. It is possible to run the [https://wiki.raptorcs.com/wiki/Whonix {{project name}} KVM version as it is documented in the Raptor Computing Systems Wiki], but this is [[unsupported]] by {{project name}} developers. For further information, see footnotes. <ref>https://www.fsf.org/blogs/licensing/support-the-talos-ii-a-candidate-for-respects-your-freedom-certification-by-pre-ordering-by-september-15</ref> <ref>https://twitter.com/Whonix/status/1190634591045865472</ref>

In the coming years when open-source processors and hardware designs further mature and the necessary functionality is provided for virtualization, reasonable and fairly-priced alternatives to proprietary architectures will start to emerge.

== Firmware Considerations ==

[https://en.wikipedia.org/wiki/Open-source_hardware Open-source hardware] is not affected by the non-free firmware updates issue described in the previous chapter. Such hardware might be more trustworthy, but open-source firmware can be just as insecure as a proprietary one. Fortunately, open source firmware increases the chances of actually making it secure, with options like coreboot appearing to be a promising solution. <ref name=x86_harmful.pdf />

= References =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
