<!--
Copyright:

   Copyright (C) Amnesia <amnesia at boum dot org>
   Copyright (C) 2012 -2014 Patrick Schleizer <adrelanos@riseup.net>
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
         
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
      
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to:

    Free Software Foundation, Inc. 
    51 Franklin St, Fifth Floor
    Boston, MA 02110-1301, USA.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License can be found in the /usr/share/common-licenses' directory.

The complete text of the GNU General Public License can also be found online on gnu.org <https://www.gnu.org/licenses/gpl.html>, in Whonix virtual machine images in /usr/share/common-licenses/GPL-3 file or on Github <https://github.com/Whonix/Whonix/blob/master/GPLv3>.
-->
<!--
This wiki page is a fork of the Tails Trusting Tails signing key page, from this exact source <http://git.immerda.ch/?p=amnesia.git;a=blob;f=wiki/src/doc/get/trusting_tails_signing_key.mdwn;hb=63b68fb4970361131cbd1713b40521244e88c204>.
-->
{{Header}}
{{#seo:
|description=OpenPGP, gpg, Related Tools, Links, Advanced Topics, The OpenPGP Web of Trust, Bootstrapping OpenPGP keys from the web
}}
= Introduction =
'''TODO: To be written.'''

= Common Misconceptions =
{{gpg_signature_timestamp}}

{{GnuPG_file_names}}

= Related Tools =
[[Software#Encrypt.2C_decrypt.2C_sign.2C_and_verify_text_using_OpenPGP.3B_GnuPG_frontend|Encrypt, decrypt, sign, and verify text using OpenPGP; GnuPG frontend]]

= Links =
== In English Language ==
* [http://userbase.kde.org/Concepts/OpenPGP_For_Beginners OpenPGP For Beginners]
* [http://userbase.kde.org/Concepts/OpenPGP_Getting_Started OpenPGP Getting Started]
* [http://www.openpgp-courses.org/ Free OpenPGP Courses]
* [http://userbase.kde.org/Concepts/OpenPGP_Help_Spread OpenPGP Help Spread]
* See also if there are any [https://www.cryptoparty.in/location crypto parties] in your vicinity.
* Try typing "crypto party" followed by the nearest city in a search engine of your choice.

== In German Language ==
[http://www.openpgp-schulungen.de/fuer/alle/ Informationen über OpenPGP] | [https://www.cryptoparty.in/location#germany kostenlose Schulungsangebote] | [http://www.openpgp-schulungen.de/fuer/unterstuetzer/ Förderung von OpenPGP]

= Advanced Topics =
== Air Gapped OpenPGP Key ==
See [[Air Gapped OpenPGP Key]].

== Clearsign with Multiple Keys ==
[http://lists.gnupg.org/pipermail/gnupg-users/2013-July/047118.html Clearsign text document with multiple keys?]

== The OpenPGP Web of Trust ==
[[Image:hauke_laging_gepruefter_artikel.en.png|400px|link=http://www.openpgp-schulungen.de/fuer/webautoren/|[http://www.hauke-laging.de/ Hauke Laging]'s clearsigned version of this text can be found here: [[OpenPGP_Certified]]. <br />
<br />
The [http://www.openpgp-schulungen.de/fuer/webautoren/ certification] image ([https://www.whonix.org/wiki/File:Hauke_laging_gepruefter_artikel.en.png hauke_laging_gepruefter_artikel.en.png]) is copyrighted by [http://www.hauke-laging.de/ Hauke Laging].|thumb]]

If you want to be extra cautious and really authenticate a OpenPGP key in a stronger way than what standard HTTPS offers you, you could use the OpenPGP Web of Trust.

One of the inherent problems of standard HTTPS is that the trust we usually put on a website is defined by certificate authorities: a hierarchical and closed set of companies and governmental institutions approved by web browser vendors. This model of trust has long been criticized and proved several times to be vulnerable to attacks [[Warning|as explained on our warning page]].

We believe instead that users should be given the final say when trusting a website, and that designation of trust should be done on the basis of human interaction.

The OpenPGP [https://en.wikipedia.org/wiki/Web_of_trust Web of Trust] is a decentralized trust model based on OpenPGP keys. Let's see that with an example.

''You're a friend of Alice and really trust her way of managing OpenPGP keys. You've validated Alice's key.''

''Furthermore, Alice met Bob in a conference, and signed Bob's key.''

This scenario creates a trust path from you to Bob's key that could allow you to validate it without having to depend on certificate authorities.

This trust model is not perfect either and requires both caution and intelligent supervision by users. The technical details of creating, managing and trusting OpenPGP keys are outside of the scope of this document.

We also acknowledge that not everybody might be able to create good trust path since it based on a network of direct human relationships and the knowledge of quite complex tools such as GnuPG.

== Bootstrapping OpenPGP keys from the web ==
What in case you want to totally stay anonymous or have no trust path to a OpenPGP key?

Some people just write an unencrypted mail to the recipient and ask them to send their public key. The recipient will most likely either send its public key or at least its fingerprint.

This works against passive attacks. An observer wouldn't know what they have been talking about in the following encrypted mails. This totally fails against active attacks. A man-in-the-middle could replace the recipient's key with its own malicious key. The sender would use the wrong key, the man-in-the-middle would decrypt the message, read it, and re-encrypt it with the legit key and forward it to the recipient. Neither sender nor recipient would ever find out that their messages are being read by an adversary. - This is the whole reason, why the trust model path and key signing is recommended in the first place.

As an alternative, some people also publish their OpenPGP fingerprint or their OpenPGP public key on their personal or other websites. This gets more secure, if the website is accessible over SSL (more when both server and client are using [https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security HSTS] [and [https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions DNSSEC]]) and/or as a hidden service with a .onion domain. Of course, this presupposes, that the visitor is aware what kind of transportation mechanism is provided. In this case, the adversary would have to break the SSL or onion encryption while someone wants to obtain the key or fingerprint or to compromise the server, which may take, depending on the adversary more resources. Note, that both, the public CA system of SSL and Tor hidden services have security issues, see [[SSL]] and [[Hidden_Services#Hidden_Services_Security]] for more information.

For such a model, it is best if the same website is accessible over both, http'''s''' and .onion and the user visits both sites and compares if the results match.

To further improve the situation the key holder can spread its fingerprint and/or OpenPGP key to other websites. Some key holders attach their OpenPGP fingerprint to their e-mail signature (a short attachment of any mail) and participate(d) various public mailing lists. It will be difficult for an adversary to spoof all those information. This only helps, if the one trying to obtain the key is either aware of that or researching that on their own initiative.

== Hardware Protection vs gpg key encryption ==

'''UNFINISHED!''' 

{| class="wikitable" style="background-color:#fff;text-align:center"
|- style="background-color: #f9f9f9"
| style="height:30px"| || style="width:125px"| gpg encryption of private key || style="width:125px"| hardware protection
|-
| style="height:35px;width:70px;background-color: #f9f9f9"| private key can be protected by software
| {{Yes}} <ref>If a secure password has been chosen to protect the private OpenPGP key.</ref>
| {{No}} <ref>The private OpenPGP key is stored unencrypted on the storage of the smartcard or token.</ref>
|-
| style="height:35px;width:70px;background-color: #f9f9f9"| implementation of software or device 100% Libre Software
| {{Yes}}
| {{No}} <ref>Specification may be Libre Software, but currently there are no blueprints for smartcards or tokens that are Libre Software.</ref>
|-
| style="height:35px;width:70px;background-color: #f9f9f9"| can be independently reproduced and audited
| {{Yes}}
| {{No}} <ref>Due to the absence of blueprints and copyright, no other company can reproduce/audit security.</ref>
|-
| style="height:35px;width:70px;background-color: #f9f9f9"| private key protected by hardware
| {{No}}
| {{Yes}} <ref>It is very difficult to read the storage of smartcards and tokens. Professional data recovery companies usually decline requests for recovery from such storage.</ref>
|}

= Footnotes =
<references />

= License =
The [http://www.openpgp-schulungen.de/fuer/webautoren/ certification] image ([https://www.whonix.org/wiki/File:Hauke_laging_gepruefter_artikel.en.png hauke_laging_gepruefter_artikel.en.png]) is copyrighted by [http://www.hauke-laging.de/ Hauke Laging].

The rest of this page is under the following license.

<pre>Whonix OpenPGP wiki page Copyright (C) Amnesia <amnesia at boum dot org>
Whonix OpenPGP wiki page Copyright (C) 2012 -2014 Patrick Schleizer <adrelanos@riseup.net>

This program comes with ABSOLUTELY NO WARRANTY; for details see the wiki source code.
This is free software, and you are welcome to redistribute it
under certain conditions; see the wiki source code for details.</pre>

{{Footer}}

[[Category:Documentation]]
