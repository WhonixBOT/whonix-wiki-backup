{{Header}}
{{#seo:
|description=Control Port Filter Proxy - filtering dangerous Tor Control Port commands - Design Documentation
}}

= Control Port Filter Proxy =
== Introduction ==
https://github.com/Whonix/control-port-filter-python

Tor's control port has in context of Whonix, dangerous features. The answer to the Tor control command {{Code2|GETINFO address}} will be the real external IP of the Tor client. Other dangerous commands include {{Code2|SETCONF}}, {{Code2|LOADCONF}} and {{Code2|GETCONF}}. This can not be limited any other way, since the feature request [https://trac.torproject.org/projects/tor/ticket/8369 Option to limit information Tor's control port discloses] against Tor has not been implemented. By the way, this Tor control port feature makes also a [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO/BridgeFirewall Bridge Firewall] impossible. Therefore before Whonix {{Whonix6}}, Whonix-Workstation had no access to Tor's control port. This was because, Whonix-Workstation is not supposed to have an way of finding out its own external IP address.

Before Whonix {{Whonix6}}, this also broke Tor Button's New Identity feature, which essentially sends {{Code2|SIGNAL NEWNYM}} to Tor's control port. While Tor Button's New Identity is still the only feature that was not available when using Tor Browser in Whonix, Tor Button in future will get more and more dependent on Tor's control port.

TBB [https://trac.torproject.org/projects/tor/ticket/6546#comment:33 by default performs its own control port verification]. It checks using Tor's control port(!), that the socks port Tor reports, is the same one as Tor Browser is configured to use. If it fails, and it would fail in Whonix 0.5.6, Tor Button would look like disabled and show a failure message. Recently we disabled this check anyhow using [https://trac.torproject.org/projects/tor/ticket/13079 environment variable to skip TorButton control port verification] (<code>export TOR_SKIP_CONTROLPORTTEST=1</code>).

In future, Tor Button will likely also use something like [https://trac.torproject.org/projects/tor/ticket/3652 {{Code2|GETINFO clockskew}}]. TBB developer [https://trac.torproject.org/projects/tor/ticket/8032 rejected] the idea of not adding the statement {{Code2|require no access to Tor's control port}} to TBB's design.

Therefore all requirements, Whonix-Workstation having no way of finding its own external IP address, joining Tor Browser's fingerprint for Whonix users, having no access for Whonix-Workstation to Tor's control port with Tor Buttons new requirement to have access to Tor's control port contradicted itself.

Control Port Filter Proxy (CPFP or sometimes called cpfpy) has been implemented as a solution. It gives Whonix-Workstation access to a limited selection of Tor's control port commands, using white listing (not blacklisting). For example, it allows {{Code2|SIGNAL NEWNYM}} to make Tor Buttons New Identity feature available for users who use Tor Browser in Whonix-Workstation.

Therefore when CPFP gets asked {{Code2|GETINFO net/listeners/socks}}, it lies, and answers '250-net/listeners/socks="127.0.0.1:9150"'. This makes Tor Button happy and therefore it shows a "Congratulations!" (success) welcome page on its default homepage about:tor and not the failure page, which would confuse users. Since bug [https://trac.torproject.org/projects/tor/ticket/9224 TorButton about:tor fails when using additional socks listeners] has been fixed by Tor Tor Project, it that lie wouldn't be necessary anymore. <font size=-3>We're keeping it, because it is not necessary for Tor Button get a full list of all ports Tor is listening on. If an attacker compromised Whonix-Workstation, hiding that list has an advantage. The attacker can probe what ports are available to that Whonix-Workstation, but if the user added extra ports not available to the compromised Whonix-Workstation (only available to another Whonix-Workstation listening on another IP), at least those remain secret. (This is a bit theoretical, because a compromised Whonix-Workstation can spoof it's LAN IP and most likely very few users are using ARP spoofing defenses. Should we add ARP spoofing defenses by default at some point, we at least don't have to worry about this point.)</font>

For eventual further Tor control port access requirements by Tor Button, the configuration file of accepted commands has to be extended. If Tor Button would ever ask for anything which violates Whonix's design (Whonix-Workstation has no way of finding out its own external IP address in particular), such as {{Code2|GETINFO address}}, for example if Tor Button wanted to ensure, that the user isn't using its own external IP address, a new lie would have to be added to the CPFP script. In case many more lies are required, lies should go into the config file as well, for now, hard coding is sufficient.

[[whonixcheck]] asks CPFP {{Code2|status/bootstrap-phase}} <ref>
Find out what {{Code2|status/bootstrap-phase}} answers yourself in Whonix-Gateway.
<pre>
/usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.py 127.0.0.1 9051 1
</pre>
Example answer.
<pre>
NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"
</pre>
</ref> as well as {{Code2|status/circuit-established}} <ref>
Find out what {{Code2|status/circuit-established}} answers yourself in Whonix-Gateway.
<pre>
/usr/lib/anon-shared-helper-scripts/tor_circuit_established_check.py 127.0.0.1 9051 1
</pre>
Example answer.
<pre>
1
</pre>
</ref> in Tor Bootstrap Status Check <ref>
https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/check_tor_bootstrap
<pre>
whonixcheck --function check_tor_bootstrap
</pre>
<pre>
whonixcheck --function check_tor_bootstrap --verbose --debug
</pre>
</ref> (usability feature).

CPFP limits maximum accepted command string length to 128 (configurable) (credits: <ref>[https://mailman.boum.org/pipermail/tails-dev/2014-February/005041.html As done by Tails.]</ref> <ref>Thanks to [https://www.whonix.org/forum/index.php?action=profile;u=87 HulaHoop] for [https://www.whonix.org/forum/index.php/topic,342.0.html suggesting this].</ref>) for better security.

Advanced users who do not wish to use CPFP can disable it, see [[Advanced Security Guide#Disable Control Port Filter Proxy]].

== Whonix-Workstation ==
Whonix sets appropriate environment variables for control port (9151), control port ip (127.0.0.1) and control port password "password". The latter is not really in use, its just to make Tor Button happy, because it doesn't default to some password. Tor Button sends it, but its ignored by Control Port Filter Proxy.

rinetd redirects 127.0.0.1:9151 to Whonix-Gateway 10.152.152.10:9052.

This functionality is implemented by the [https://github.com/Whonix/anon-ws-disable-stacked-tor anon-ws-disable-stacked-tor] package.

Tor Browser points to Tor control port 127.0.0.1:9151 by default (no changes by Whonix).

== Whonix-Gateway ==
Control Port Filter proxy listens on 0.0.0.0 port 9052, filters (white list) incoming control port messages and forwards them to the real Tor Control Port listening in 127.0.0.1:9051. Control Port Filter Proxy itself uses cookies authentication to authenticate Tor's control port. The latter is not important, since Whonix-Gateway's only purpose is running Tor, its not a multi user operating system, and if it were compromised, cookie authentication wouldn't be of help anymore either.

== Attack Scenarios ==
Once Whonix-Workstation has been compromised, the adversary could continuously and/or using a pattern, send white listed commands to Tor. At the moment, only {{Code2|NEWNYM}} would be of interest. When the adversary is also an ISP level adversary, the adversary might be able to see the pattern being produced. This however isn't a big risk, since once Whonix-Workstation is compromised, more powerful attacks are available - An adversary could also use "Morse Code", i.e. limit the victims traffic for a few seconds to zero or close to zero, then push the traffic to its maximum. 

More worrying is the extended attack surface.

== Debugging Inspiration ==
=== Introduction ===
Quickly install files from package to system.

<pre>
sudo make install
</pre>

Restart CPFP after making changes to it.

<pre>
sudo service controlportfiltd restart
</pre>

Watch CPFP's log on Whonix-Gateway while using it.

<pre>
tail -f /var/log/controlportfilt.log
</pre>

To get a list of Tor ControlPort commands, that TorButton uses, get into TorButton source code, extract TorButton, then run.

<pre>
grep -r -i torbutton_send_ctrl_cmd *
</pre>

<pre>
grep -r -i sendCommand *
</pre>

To get a list of Tor ControlPort commands, that TorLauncher uses, get into TorLauncher source code, extract TorLauncher, then run.

<pre>
grep -r -i getconf
</pre>

Watch kern.log for eventual iptables log messages, run this on Whonix-Gateway.

<pre>
tail -f /var/log/kern.log
</pre>

To see what's being send to CPFP's port, run this on Whonix-Gateway.

<pre>
sudo tcpdump -i eth1 -l -s0 -w - tcp dst port 9052 | strings
</pre>

Connect to CPFP from Whonix-Workstation to simulate using it.

<pre>
nc 127.0.0.1 9051
</pre>

Command.

<pre>
authenticate                                                                                                                                                                        
</pre>

Output.

<pre>
250 OK
</pre>

Command.

<pre>
GETINFO net/listeners/socks
</pre>

Output.

<pre>
250-net/listeners/socks="127.0.0.1:9150"
</pre>

Command.

<pre>
GETINFO address
</pre>

Output.

<pre>
510 Prohibited command "GETINFO address"
</pre>

Command.

<pre>
QUIT
</pre>

=== cpfpy ===
Debugging start command.

<pre>
sudo bash -x /etc/init.d/control-port-filter-python start
</pre>

Debugging stop command.

<pre>
sudo bash -x /etc/init.d/control-port-filter-python stop
</pre>

To find any eventual leftovers, stale processes, try this.

<pre>
ps aux | grep cpf
</pre>

or

<pre>
ps aux | grep python
</pre>

On the gateway, talk to cpfpy directly.

<pre>
nc 10.152.152.10 9052
</pre>

To check if the port is free, if cpfpy really has shut down.

<pre>
sudo lsof -i :9052
</pre>

<pre>
COMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
cpfp.py 27653 debian-tor    4u  IPv4  73153      0t0  TCP 10.152.152.10:9052 (LISTEN)
</pre>

=== Talking to the real Tor Control Port ===
On Whonix-Gateway. ({{Code2|test}} is the example password being used. Feel free to use a different/stronger one.

<pre>
tor --hash-password test
</pre>

Will show something like this.

<pre>
16:1CEAF6E6A08E0CF460AFD71772461C5F56BD9738FA8824B882FCA4A785
</pre>

Add to /etc/tor/torrc.

<pre>
HashedControlPassword 16:1CEAF6E6A08E0CF460AFD71772461C5F56BD9738FA8824B882FCA4A785
</pre>

Reload Tor.

<pre>
sudo service tor reload
</pre>

Connect to Tor's ControlPort.

<pre>
nc 127.0.0.1 9051
</pre>

Authenticate.

<pre>
authenticate "test"
</pre>

Should reply.

<pre>
250 OK
</pre>

Test your commands. For example.

<pre>
setevents stream
</pre>

Will do nothing after this, but when you start using Tor, it will show something like this (events).

<pre>
650 STREAM 211 NEW 0 pop.riseup.net:995 SOURCE_ADDR=10.152.152.11:47036 PURPOSE=USER
...
</pre>

= Future Tor ControlPort Commands =
== Tor Browser 4.5 ==
Tor Browser 4.5 uses a few more Tor ControlPort commands. Let's consider which we are going to add, about which ones we are going to "lie" etc. and what we do about them (providing patches to make it better work on systems were Tor is running on a different system than Tor Browser.

=== setevents stream and getinfo config-text ===
CPFP (bash) log as of Whonix 9.4.

<pre>
10a9cf8a-0ecc-4742-b274-662806c5a877 INFO: Getting connection... cpf_pid: 9460 | LD_PRELOAD: 
b625272c-3bd7-42a7-ab2b-fae4bde38b13 INFO: Getting connection... cpf_pid: 9471 | LD_PRELOAD: 
10a9cf8a-0ecc-4742-b274-662806c5a877 GOT: authenticate "password"
10a9cf8a-0ecc-4742-b274-662806c5a877 BACK: 250 OK
10a9cf8a-0ecc-4742-b274-662806c5a877 GOT: setevents stream
10a9cf8a-0ecc-4742-b274-662806c5a877 BACK: 510 Prohibited command "setevents stream"
10a9cf8a-0ecc-4742-b274-662806c5a877 GOT: getinfo config-text
10a9cf8a-0ecc-4742-b274-662806c5a877 BACK: 510 Prohibited command "getinfo config-text"
b625272c-3bd7-42a7-ab2b-fae4bde38b13 GOT: AUTHENTICATE "password"
b625272c-3bd7-42a7-ab2b-fae4bde38b13 BACK: 250 OK
b625272c-3bd7-42a7-ab2b-fae4bde38b13 GOT: GETINFO net/listeners/socks
b625272c-3bd7-42a7-ab2b-fae4bde38b13 BACK: 250-net/listeners/socks="127.0.0.1:9150"
b625272c-3bd7-42a7-ab2b-fae4bde38b13 INFO: End.
</pre>

<pre>
   "setevents stream"
   "getinfo config-text"
</pre>

* "getinfo config-text" seems problematic, because it would be best if the workstation had no way of knowing what bridges or other interesting settings a user might have set on the gateway.
* "setevents stream" what is it good for? Problematic, because neither cpfp (bash) nor cpfpy support subscribing to Tor ControlPort events yet.

=== TorButton Preferences ===
<pre>
TorButton -> Preferences...
</pre>

Needs nothing new?

=== TorButton Network Settings ===
<pre>
TorButton -> Open Network Settings...
</pre>

Is using.

<pre>
   "GETCONF Socks4Proxy"
   "GETCONF Socks5Proxy"
   "GETCONF HTTPSProxy"
   "GETCONF ReachableAddresses"
   "GETCONF ReachableAddresses"
   "GETCONF UseBridges"
   "GETCONF Bridge"
</pre>

As the next logical step by the way, they are likely going to add.

<pre>
   "GETCONF HTTPProxy"
</pre>

Would be best if the whole "TorButton -> Open Network Settings..." menu would be hidden on the workstation, because setting such settings would fit better into the gateway.

== Indicator for current Circuit Status and Exit IP ==
* The Tor Project Ticket: [https://trac.torproject.org/projects/tor/ticket/8641 Create Browser UI indication for current circuit status and exit IP ]
* <html><img src="https://trac.torproject.org/projects/tor/raw-attachment/ticket/8641/tor_circuit_diagram_screenshot.png" alt="loading..."></html>
* -----
* <html><img src="https://trac.torproject.org/projects/tor/raw-attachment/ticket/8641/mockup_torCircuitStatus.png" alt="loading..."></html>
* https://gitweb.torproject.org/torbutton.git/tree/src/chrome/content/tor-circuit-display.js
* Only in TorButton git master as of 03.01.2015?
* Probably requires "setevents stream" and would most likely require a new CPFP feature for relaying events back to TorButton.

== UI for ExitNode country selection in tor-launcher ==
https://trac.torproject.org/projects/tor/ticket/11406

== feedback mechanism for clock-skew and other bad problems ==
https://trac.torproject.org/projects/tor/ticket/9675

== Whonix Forum Discussion ==
[https://www.whonix.org/forum/index.php/topic,851 new Tor ControlPort commands wanted by TBB 4.5 and above]

= Comparison of Control Port Filters  =
[https://git-tails.immerda.ch/tails/plain/config/chroot_local-includes/usr/local/sbin/tor-controlport-filter tor-controlport-filter] by Tails

* Does not support parallel connections.
* Written in python.
* Only white lists signal newnym.
* Not configurable.
* No support to answer {{Code2|getinfo net/listeners/socks}} with the lie '250-net/listeners/socks="127.0.0.1:9150"'.
* No logging.
* Does not honors signals sigterm, sigint.
* Does not support wildcards yet.
* Does not support subscribing Tor ControlPort events ({{Code2|setevent}}) yet.
* [https://git-tails.immerda.ch/tails/plain/config/chroot_local-includes/etc/init.d/tor-controlport-filter Incomplete sysvinit script.]
* No {{Code2|/debian}} folder.

<hr>

[https://github.com/Whonix/control-port-filter-python control-port-filter-python] ([https://github.com/Whonix/control-port-filter-python/blob/master/usr/lib/control-port-filter-python/cpfp.py main script]) [Whonix 10 and above] ([https://phabricator.whonix.org/maniphest/?statuses=open%2Creview&allProjects=PHID-PROJ-fp3oeoqzy3l47dorvbvw#R issue tracker])

* A fork of [https://git-tails.immerda.ch/tails/plain/config/chroot_local-includes/usr/local/sbin/tor-controlport-filter tor-controlport-filter] by Tails. (See above.)
* Written in python.
* Configurable by dropping .d-style<ref>[[Whonix_Configuration_Files#.d_Style_Configuration_Folders]]</ref> configuration snippets into {{Code2|/etc/cpfpy.d}}.
* Support to answer {{Code2|getinfo net/listeners/socks}} with the lie '250-net/listeners/socks="127.0.0.1:9150"'.
* Supports logging.
* Honors signals sigterm, sigint.
* Supports parallel connections.
* Does not support wildcards yet. (Would be useful to allow commands that take an argument, that is not predictable in source code, such as "SETCONF HiddenServiceDir /some/variable/dir" for tools such as [[Next#onionshare|onionshare]].)
* Does not support subscribing Tor ControlPort events ({{Code2|setevent}}) yet.
* Complete sysvinit script. [Whonix 10]
* Complete systemd unit file. [Whonix 11]
* Lintian clean {{Code2|/debian}} packaging folder.

<hr>

control-port-filter [up to Whonix 9.x] [deprecated]

* Supports parallel connections.
* Written in bash. ([https://github.com/Whonix/control-port-filter github]) [https://www.whonix.org/forum/index.php/topic,560.0.html Rewrite in python in progress]. Also see above.
* White lists multiple useful Tor ControlPort commands (https://github.com/Whonix/control-port-filter/blob/master/etc/controlportfilt.d/30_controlportfilt_default).
* Configurable using /etc/controlportfilt.d drop-in files.
* Support to answer {{Code2|getinfo net/listeners/socks}} with the lie '250-net/listeners/socks="127.0.0.1:9150"'.
* Supports logging.
* Honors signals sigterm, sigint.
* Does not support wildcards yet.
* Does not support subscribing Tor ControlPort events ({{Code2|setevent}}) yet.
* Complete sysvinit script.
* Lintian clean {{Code2|/debian}} packaging folder.
* Will be deprecated after the release of Whonix 10.

= See Also =
* [https://labs.riseup.net/code/issues/6384 Tails' ticket: Filtering proxy for the Tor control port]
* [https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=control-spec.txt Tor Control Protocol]

= Footnotes =
<references />

{{Footer}}

[[Category:Design]]
