{{Header}}
{{#seo:
|description=Control Port Filter Proxy - filtering dangerous Tor Control Port commands - Design Documentation
}}

= Control Port Filter Proxy =
== Introduction ==
https://github.com/Whonix/control-port-filter

Tor's control port has in context of Whonix, dangerous features. The answer to the Tor control command {{Code2|GETINFO address}} will be the real external IP of the Tor client. Other dangerous commands include {{Code2|SETCONF}}, {{Code2|LOADCONF}} and {{Code2|GETCONF}}. This can not be limited any other way, since the feature request [https://trac.torproject.org/projects/tor/ticket/8369 Option to limit information Tor's control port discloses] against Tor has not been implemented. By the way, this Tor control port feature makes also a [https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO/BridgeFirewall Bridge Firewall] impossible. Therefore before Whonix {{Whonix6}}, Whonix-Workstation had no access to Tor's control port. This was because, Whonix-Workstation is not supposed to have an way of finding out its own external IP address.

Before Whonix {{Whonix6}}, this also broke Tor Button's New Identity feature, which essentially sends {{Code2|SIGNAL NEWNYM}} to Tor's control port. While Tor Button's New Identity is still the only feature that was not available when using Tor Browser in Whonix, Tor Button in future will get more and more dependent on Tor's control port.

TBB [https://trac.torproject.org/projects/tor/ticket/6546#comment:33 by default performs its own control port verification]. It checks using Tor's control port(!), that the socks port Tor reports, is the same one as Tor Browser is configured to use. If it fails, and it would fail in Whonix 0.5.6, Tor Button would look like disabled and show a failure message.

In future, Tor Button will likely also use something like [https://trac.torproject.org/projects/tor/ticket/3652 {{Code2|GETINFO clockskew}}]. TBB developer [https://trac.torproject.org/projects/tor/ticket/8032 rejected] the idea of not adding the statement {{Code2|require no access to Tor's control port}} to TBB's design.

Therefore all requirements, Whonix-Workstation having no way of finding its own external IP address, joining Tor Browser's fingerprint for Whonix users, having no access for Whonix-Workstation to Tor's control port with Tor Buttons new requirement to have access to Tor's control port contradicted itself.

Control Port Filter Proxy (CPFP) has been implemented as a solution. It gives Whonix-Workstation access to a limited selection of Tor's control port commands, using white listing (not blacklisting). For example, it allows {{Code2|SIGNAL NEWNYM}} to make Tor Buttons New Identity feature available for users who use Tor Browser in Whonix-Workstation.

Therefore when CPFP gets asked {{Code2|GETINFO net/listeners/socks}}, it lies, and answers '250-net/listeners/socks="127.0.0.1:9150"'. This makes Tor Button happy and therefore it shows a "Congratulations!" (success) welcome page on its default homepage about:tor and not the failure page, which would confuse users. Since bug [https://trac.torproject.org/projects/tor/ticket/9224 TorButton about:tor fails when using additional socks listeners] has been fixed by Tor Tor Project, it that lie wouldn't be necessary anymore. <font size=-3>We're keeping it, because it is not necessary for Tor Button get a full list of all ports Tor is listening on. If an attacker compromised Whonix-Workstation, hiding that list has an advantage. The attacker can probe what ports are available to that Whonix-Workstation, but if the user added extra ports not available to the compromised Whonix-Workstation (only available to another Whonix-Workstation listening on another IP), at least those remain secret. (This is a bit theoretical, because a compromised Whonix-Workstation can spoof it's LAN IP and most likely very few users are using ARP spoofing defenses. Should we add ARP spoofing defenses by default at some point, we at least don't have to worry about this point.)</font>

For eventual further Tor control port access requirements by Tor Button, the configuration file of accepted commands has to be extended. If Tor Button would ever ask for anything which violates Whonix's design (Whonix-Workstation has no way of finding out its own external IP address in particular), such as {{Code2|GETINFO address}}, for example if Tor Button wanted to ensure, that the user isn't using its own external IP address, a new lie would have to be added to the CPFP script. In case many more lies are required, lies should go into the config file as well, for now, hard coding is sufficient.

[[whonixcheck]] asks CPFP {{Code2|status/bootstrap-phase}} <ref>
Find out what {{Code2|status/bootstrap-phase}} answers yourself in Whonix-Gateway.
<pre>
/usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.py 127.0.0.1 9051 1
</pre>
Example answer.
<pre>
NOTICE BOOTSTRAP PROGRESS=100 TAG=done SUMMARY="Done"
</pre>
</ref> as well as {{Code2|status/circuit-established}} <ref>
Find out what {{Code2|status/circuit-established}} answers yourself in Whonix-Gateway.
<pre>
/usr/lib/anon-shared-helper-scripts/tor_circuit_established_check.py 127.0.0.1 9051 1
</pre>
Example answer.
<pre>
1
</pre>
</ref> in Tor Bootstrap Status Check <ref>
https://github.com/Whonix/whonixcheck/blob/master/usr/lib/whonixcheck/check_tor_bootstrap
<pre>
whonixcheck --function check_tor_bootstrap
</pre>
<pre>
whonixcheck --function check_tor_bootstrap --verbose --debug
</pre>
</ref> (usability feature).

CPFP limits maximum accepted command string length to 128 (configurable) (credits: <ref>[https://mailman.boum.org/pipermail/tails-dev/2014-February/005041.html As done by Tails.]</ref> <ref>Thanks to [https://www.whonix.org/forum/index.php?action=profile;u=87 HulaHoop] for [https://www.whonix.org/forum/index.php/topic,342.0.html suggesting this].</ref>) for better security.

Advanced users who do not wish to use CPFP can disable it, see [[Advanced Security Guide#Disable Control Port Filter Proxy]].

== Whonix-Workstation ==
Whonix sets appropriate environment variables in /etc/profile.d/ for control port (9151), control port ip (127.0.0.1) and control port password "password". The latter is not really in use, its just to make Tor Button happy, because it doesn't default to some password. Tor Button sends it, but its ignored by Control Port Filter Proxy.

rinetd redirects 127.0.0.1:9151 to Whonix-Gateway 10.152.152.10:9052.

This functionality is implemented by the [https://github.com/Whonix/anon-ws-disable-stacked-tor anon-ws-disable-stacked-tor] package.

Tor Browser points to Tor control port 127.0.0.1:9151 by default (no changes by Whonix).

== Whonix-Gateway ==
Control Port Filter proxy listens on 0.0.0.0 port 9052, filters (white list) incoming control port messages and forwards them to the real Tor Control Port listening in 127.0.0.1:9051. Control Port Filter Proxy itself uses cookies authentication to authenticate Tor's control port. The latter is not important, since Whonix-Gateway's only purpose is running Tor, its not a multi user operating system, and if it were compromised, cookie authentication wouldn't be of help anymore either.

== Attack Surface ==
* tcpserver (ucspi-tcp debian package) (The server handling connections.)
* /bin/bash (The script interpreter.)
* controlportfilt and cpf-tcpserver (The scripts.)
* netcat-traditional (Whonix 8) / netcat-openbsd (Whonix 9) [Forum discussion about [https://www.whonix.org/forum/index.php/topic,444.0.html netcat-traditional, netcat-openbsdm tcpcat and possibly replacing netcat with tcpcat].]

== Attack Scenarios ==
Once Whonix-Workstation has been compromised, the adversary could continuously and/or using a pattern, send white listed commands to Tor. At the moment, only {{Code2|NEWNYM}} would be of interest. When the adversary is also an ISP level adversary, the adversary might be able to see the pattern being produced. This however isn't a big risk, since once Whonix-Workstation is compromised, more powerful attacks are available - An adversary could also use "Morse Code", i.e. limit the victims traffic for a few seconds to zero or close to zero, then push the traffic to its maximum. 

More worrying is the extended attack surface. See [[#Attack Surface]] above. We're not aware of anyone having audited {{Code2|tcpserver}} or {{Code2|/bin/bash}} for vulnerabilities. Please add this information if you know more.

== Files ==
* https://github.com/Whonix/control-port-filter/blob/master/usr/bin/controlportfilt
* https://github.com/Whonix/control-port-filter/blob/master/usr/lib/cpf-tcpserver
* https://github.com/Whonix/control-port-filter/blob/master/etc/controlportfilt.d/30_controlportfilt_default
* https://github.com/Whonix/control-port-filter/blob/master/etc/init.d/control-port-filter

== Debugging Inspiration ==
Quickly install files from package to system.

<pre>
sudo make install
</pre>

Restart CPFP after making changes to it.

<pre>
sudo service controlportfiltd restart
</pre>

Watch CPFP's log on Whonix-Gateway while using it.

<pre>
tail -f /var/log/controlportfilt.log
</pre>

To get a list of Tor ControlPort commands, that To Button uses, get into TorButton source code, extract TorButton, then run.

<pre>
grep -r -i torbutton_send_ctrl_cmd *
</pre>

<pre>
grep -r -i getconf
</pre>

Watch kern.log for eventual iptables log messages, run this on Whonix-Gateway.

<pre>
tail -f /var/log/kern.log
</pre>

To see what's being send to CPFP's port, run this on Whonix-Gateway.

<pre>
sudo tcpdump -i eth1 -l -s0 -w - tcp dst port 9052 | strings
</pre>

Connect to CPFP from Whonix-Workstation to simulate using it.

<pre>
nc 127.0.0.1 9051
</pre>

Command.

<pre>
authenticate                                                                                                                                                                        
</pre>

Output.

<pre>
250 OK
</pre>

Command.

<pre>
GETINFO net/listeners/socks
</pre>

Output.

<pre>
250-net/listeners/socks="127.0.0.1:9150"
</pre>

Command.

<pre>
GETINFO address
</pre>

Output.

<pre>
510 Prohibited command "GETINFO address"
</pre>

Command.

<pre>
QUIT
</pre>

= Comparison of control-port-filter and  tor-controlport-filter =
control-port-filter by Whonix

* Supports parallel connections.
* Written in bash. ([https://github.com/Whonix/control-port-filter github]) [https://www.whonix.org/forum/index.php/topic,560.0.html Rewrite in python in progress]. ([https://github.com/troubadoour/control-port-filter-python github])
* White lists multiple useful Tor ControlPort commands (https://github.com/Whonix/control-port-filter/blob/master/etc/controlportfilt.d/30_controlportfilt_default).
* Configurable using /etc/controlportfilt.d drop-in files.
* Does not support wildcards yet. (Would be useful to allow commands that take an argument, that is not predictable in source code, such as "SETCONF HiddenServiceDir /some/variable/dir" for tools such as [[Next#onionshare|onionshare]].)

[https://git-tails.immerda.ch/tails/plain/config/chroot_local-includes/usr/local/sbin/tor-controlport-filter tor-controlport-filter] by Tails

* Does not support parallel connections.
* Written in python.
* Only white lists signal newnym.
* Not configurable.
* Does not support wildcards yet.

= See Also =
* [https://labs.riseup.net/code/issues/6384 Tails' ticket: Filtering proxy for the Tor control port]
* [https://github.com/Whonix/Whonix/issues/290 consider rewrite control-port-filter in python]
* [https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=control-spec.txt Tor Control Protocol]

= Footnotes =
<references />

{{Footer}}

[[Category:Design]]
