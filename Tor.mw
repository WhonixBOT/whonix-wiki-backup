{{Header}}
{{#seo:
|description=Tor
}}

= See Also =
<translate>
* [[<tvar|36>Why_does_Whonix_use_Tor|</> Why does Whonix use Tor?]]
* [[<tvar|37>Why is Tor slow|</> Why is Tor slow?]]
* [[<tvar|64>Bridges|</> Tor Bridge Mode, using (private) (obfuscated) bridges]]
* [[<tvar|164>Hide Tor and Whonix from your ISP|</> Hide the fact that you are using Tor/Whonix]] 
* [[<tvar|76>Tor Controller|</> Controlling Tor]]
* [[<tvar|88>Hidden Services|</> Hosting Tor Hidden Services, ANY, Hidden Webserver]]
* [[Comparison Of Tor Proxies CGI proxies Proxy Chains And VPN Services|Comparison of Tor, Proxies, CGI proxies, Proxy Chains and VPN Services]]
</translate>

= Advanced Topics =
== Non-Persistent Entry Guards ==
=== Introduction ===

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
What are Tor Entry Guards? If you do not know that yet, please press on expand on the right side.
<div class="mw-collapsible-content">

{{Box|text=
Tor (like all current practical low-latency anonymity designs) fails when the attacker can see both ends of the communications channel. For
example, suppose the attacker controls or watches the Tor relay you choose to enter the network, and also controls or watches the website you
visit. In this case, the research community knows no practical low-latency design that can reliably stop the attacker from correlating volume and timing information on the two sides.
</p>
<p>
So, what should we do? Suppose the attacker controls, or can observe, <i>C</i> relays. Suppose there are <i>N</i> relays total. If you select
new entry and exit relays each time you use the network, the attacker will be able to correlate all traffic you send with probability around <i>(c/n)<sup>2</sup></i>. But profiling is, for most users, as bad as being traced all the time: they want to do something often without an attacker noticing, and the attacker noticing once is as bad as the attacker noticing more often. Thus, choosing many random entries and exits gives the user no chance of escaping profiling by this kind of attacker.
</p>
<p>
The solution is "entry guards": each Tor client selects a few relays at random to use as entry points, and uses only those relays for her first hop. If those relays are not controlled or observed, the attacker can't win, ever, and the user is secure. If those relays <i>are</i> observed or controlled by the attacker, the attacker sees a larger <i>fraction</i> of the user's traffic â€” but still the user is no more profiled than before. Thus, the user has some chance (on the order of <i>(n-c)/n</i>) of avoiding profiling, whereas she had none before.
</p>
<p>
You can read more at [http://freehaven.net/anonbib/#wright02 An Analysis of the Degradation of Anonymous Protocols], [http://freehaven.net/anonbib/#wright03 Defending Anonymous Communication Against Passive Logging Attacks], and especially [http://freehaven.net/anonbib/#hs-attack06 Locating Hidden Servers].
</p>
<p>
Restricting your entry nodes may also help against attackers who want to run a few Tor nodes and easily enumerate all of the Tor user IP
addresses. (Even though they can't learn what destinations the users are talking to, they still might be able to do bad things with just a list of users.) However, that feature won't really become useful until we move to a "directory guard" design as well.
</p>

Source and License, see footnote: <ref>
source:<br />
[https://www.torproject.org/docs/faq.html.en#EntryGuards torproject.org What are Entry Guards?] ([http://www.webcitation.org/6eIN0hE4Y w])

[https://www.torproject.org/docs/trademark-faq.html.en license] ([http://www.webcitation.org/6eIN7qhTe w]):<br />
Content on this site is Copyright The Tor Project, Inc.. Reproduction of content is permitted under a [https://creativecommons.org/licenses/by/3.0/us/ Creative Commons Attribution 3.0 United States License] ([http://www.webcitation.org/6eINBPOrb w]). All use under such license must be accompanied by a clear and prominent attribution that identifies The Tor Project, Inc. as the owner and originator of such content. The Tor Project Inc. reserves the right to change licenses and permissions at any time in its sole discretion.
</ref>
}}
</div>
</div>

Persistent Tor entry guards are beneficial for security, however in some situations it is safer to not use your usual guard relay.

The guard relays picked by your Tor client can make your Tor use fingerprintable across different physical locations and access points, potentially deanonymizing you in some corner cases such as the one described below. This attack is less severe that now upstream Tor Project is moving from using three relays to a single one.

Consider this scenario: You run Tor from home. Then there is some prominent event or protest in your city that you attend and anonymously blog about it from there. The fact that your client is using the same entry guard from this other location gives network adversaries a high certainty that the anonymous posts came from the same person that was connected to that specific guard relay from their home. The relative uncommonness of Tor usage already exasperates the problem even more.

This is similar to tracking users by [[Pre_Install_Advice#MAC_Address|MAC addresses]], so if this matters to you, you should keep care of that also.

=== Alternating Bridges ===
If you are using [[bridges|bridges]] already, use different bridges for different locations. Or if you are not a bridge user, you could consider to sometimes use alternate bridges in different locations and entry guards in your main location or so.

On your Whonix-Gateway.

1. {{Disable_Tor}}

2. Configure Tor to use bridges. Refer to the [[Bridges|Bridges]] documentation.

3. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

4. Before you leave this location, disable Tor and add a different bridge address if going to a different place. To go back to your usual guard nodes at home, remove the torrc bridge settings before you enable the network or rollback to a vm snapshot you created there.

=== Fresh Tor Entry Guards by regenerating Tor State File ===
Usually something to avoid unless you know what you are doing (see [[#Introduction|Introduction]]). This is a method you could use if you just once wanted to change your Tor entry guards, such as before you permanently relocate to a new location.

On your Whonix-Gateway.

1. {{Disable_Tor}}

2. Delete Tor's state file.

{{CodeSelect|code=
sudo rm /var/lib/tor/state
}}

3. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

=== Always Non-Persistent Entry Guards ===
You could consider to always use non-persistent entry guards. In most cases, this is something to avoid because persistent entry guards is a security feature as explained in the [[#Introduction|introduction]]. A much more secure, but more time expensive approach would be [[#Alternating Bridges|Alternating Bridges]].

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you would like to see more information anyway, please press on expand on the right.
<div class="mw-collapsible-content">
On your Whonix-Gateway.

1. Adjust whonixcheck settings (applies until Whonix 12):

{{Open with root rights|filename=
/etc/whonix.d/50_user.conf
}}

Add.

{{CodeSelect|code=
whonixcheck_skip_functions+=" check_tor_pid "
}}

Save.

2. {{Disable_Tor}}

3. Modify Tor settings.

{{Open /etc/tor/torrc}}

Add.

{{CodeSelect|code=
DataDirectory /var/run/tor
}}

Save.

4. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

5. Before you leave this location, disable Tor and repeat the above steps if going to a different place. To go back to your usual guard nodes at home, remove the torrc setting before you enable the network or rollback to a vm snapshot you created there.
</div>
</div>

=== Notes ===

* The proposed Tails solutions towards AdvGoalTracking have disadvantages<ref>https://tails.boum.org/blueprint/persistent_Tor_state/</ref><ref>https://blog.torproject.org/blog/tor-weekly-news-%E2%80%94-june-17th-2015#A_persistent_Tor_state_for_Tails</ref> and are not options for Whonix because we don't connect directly to a user's internet LAN anyway, so trying to remember a network based on its SSID will not work. Unlike wireless access points, wired networks (physical or virtual) lack SSIDs and cannot be "remembered" that way.

* Even if it were possible, it is best to avoid letting adversaries influence guard changes in any way. Spoofing MAC addresses or SSIDs would trigger use of the other entry guard recorded for another "location profile". Also global networks have generic characteristics that cannot be differentiated from the point of view of a connecting device leading to the same guards being used on different networks.

* Developers/Auditors-only: Development discussion related to this documentation chapter: [https://phabricator.whonix.org/T94 research non-persistent entry guards]

== Blacklist Certain Hidden Services from Connecting ==
'''Experimental'''

{{Open /etc/tor/torrc}}

Example. Add to {{Code2|/etc/tor/torrc}}. Replace {{Code2|bbbbbb6qtmqg65g6.onion}} with the actual hidden service you want to blacklist.

{{CodeSelect|code=
MapAddress bbbbbb6qtmqg65g6.onion 127.0.0.1
}}

{{Reload_Tor}}

== Additional SocksPorts ==
Adding additional Tor SocksPorts to /etc/tor/torrc is kinda non-intuitive. <ref>https://trac.torproject.org/projects/tor/ticket/15261</ref>

Quote Tor man page.
<blockquote>
By default, an option on the command line overrides an option found in the configuration file, and an option in a configuration file overrides one in the defaults file.
</blockquote>

<blockquote>
This rule is simple for options that take a single value, but it can become complicated for options that are allowed to occur more than once: if you specify four SOCKSPorts in your configuration file, and one more SOCKSPort on the command line, the option on the command line will replace __all__ of the SOCKSPorts in the configuration file.  If this isn't what you want, prefix the option name with a plus sign, and it will be appended to the previous set of options instead.
</blockquote>

Quote Nick Mathewson <ref>https://trac.torproject.org/projects/tor/ticket/15261#comment:1</ref>:
<blockquote>
So to make sure that the SocksPort in the torrc does what you want, write it as <code>+SocksPort</code>.
</blockquote>

After adding custom ports, you would also have to edit Whonix's firewall. But you are lucky, you don't need to do that. Various custom ports for such use cases have already been added.

Those are documented here:<br />
[[Stream_Isolation#How_to_mitigate_identity_correlation]]

= UDP =
{{Tor_UDP}}

= Footnotes / References =
<references />

{{Footer}}

[[Category:Documentation]]
