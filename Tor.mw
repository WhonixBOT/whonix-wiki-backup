{{Header}}
{{#seo:
|description=Notes about Tor (The Onion Router) on Log Analysis, Non-Persistent Entry Guards, Blacklist Certain Hidden Services from Connecting, Additional SocksPorts, UDP and more.
|og:image=https://www.whonix.org/w/images/3/32/Menger-702837640.jpg
}}

= Version Number =
To find out what Tor version you are running, run the following command inside Whonix-Gateway.

{{CodeSelect|code=
dpkg-query --show --showformat='${Version}\n' tor
}}

Should show something like this.

<pre>
0.2.8.6-1~d80.jessie+1
</pre>

= Permissions on directory /var/run/tor are too permissive Error =
To find out if you are affected by the Permissions on directory /var/run/tor are too permissive Error, run the following command inside Whonix-Gateway. (In Qubes, in sys-whonix.)

<pre>
sudo cat /var/run/tor/log | grep permissive
</pre>

If you are affected, it would show something like the following.

<pre>
Aug 03 17:36:33.000 [warn] Permissions on directory /var/run/tor are too permissive.
</pre>

The only workaround (needs to be manually re-done after every reboot) for now.

{{CodeSelect|code=
sudo chmod --recursive 700 /var/run/tor
}}

= Log Analysis =
== Introduction ==
Analysis of Tor's log can be useful in case of connectivity issues.

== Open Tor Log ==
* /var/log/tor/log - persistent Tor log
* /var/run/tor/log - Tor log since last boot

{{open with root rights|filename=
/var/run/tor/log
}}

<ref>
{{Code2|/var/run/tor/log}} is a Whonix Tor configuration specific file. An alternative to {{Code2|/var/log/tor/log}}. The former only contains Tor's output since last boot of Whonix-Gateway. The latter is a permanent log that persists across reboots. The former has a small usability advantage. It's shorter. Should therefore contain more relevant information.
</ref>

== Non-Issues ==
{| class="wikitable" style="background-color: #fff;text-align: center"

! message / question
! answer

|-
| <u>{{Code2|Am I compromised? Does Tor's log report leaks?}}
| Tor's output is conceptually not a tool to find out about serious issues such as compromise or leaks.</u>

|-
| {{Code2|[WARN] Socks version 71 not recognized. (Tor is not an http proxy.)}}
| 
This is caused by [[whonixcheck]] (by function {{Code2|check_tor_socks_port_reachability}}). It checks if a Tor SocksPort is reachable by trying to fetch it using curl. <ref>
{{CodeSelect|code=
curl.anondist-orig 10.152.152.10:9100
}}
</ref> It will not report anything if it worked, but would complain if it failed.

|-
| {{Code2|[NOTICE] You configured a non-loopback address '10.152.152.10:9179' for SocksPort. This allows everybody on your local network to use your machine as a proxy. Make sure this is what you wanted. [1 duplicate hidden]}} (Or other port number or DnsPort or TransPort.)
| This is not of concern. Tor really listens on that IP/port. It is Whonix-Gateway's network interface, that is only available to Whonix-Workstations, because it is an internal network with Whonix-Workstation and because Whonix-Gateway is firewalled (see ''{{WhonixFirewall}}'' or in Whonix source code).

|-
| {{Code2|[NOTICE] New control connection opened. [2 duplicates hidden]}} (Or more duplicates.)
| This is not of concern. This is caused by [[whonixcheck]]'s Tor Bootstrap Status Test, which uses Tor's ControlPort or [[Dev/CPFP|CPFP]].

|}

= See Also =
<translate>
* [[<tvar|36>Why_does_Whonix_use_Tor|</> Why does Whonix use Tor?]]
* [[<tvar|37>Why is Tor slow|</> Why is Tor slow?]]
* [[<tvar|64>Bridges|</> Censorship Circumvention - Tor Bridge Mode, using (private) (obfuscated) bridges]]
* [[<tvar|164>Hide Tor and Whonix from your ISP|</> Hide the fact that you are using Tor/Whonix]] 
* [[<tvar|76>Tor Controller|</> Controlling Tor]]
* [[<tvar|88>Hidden Services|</> Hosting Tor Hidden Services, ANY, Hidden Webserver]]
* [[Comparison Of Tor Proxies CGI proxies Proxy Chains And VPN Services|Comparison of Tor, Proxies, CGI proxies, Proxy Chains and VPN Services]]
</translate>

= Advanced Topics =
== Non-Persistent Entry Guards ==
=== Introduction ===

{{Persistent Tor Entry Guards Introduction}}

<ref>
As concluded in ticket [https://phabricator.whonix.org/T469 research non-persistent Tor directory guards], these are covered by the following instructions.
</ref>

=== Alternating Bridges ===
If you are using [[bridges|bridges]] already, use different bridges for different locations. Or if you are not a bridge user, you could consider to sometimes use alternate bridges in different locations and entry guards in your main location or so.

On your Whonix-Gateway.

1. {{Disable_Tor}}

2. Configure Tor to use bridges. Refer to the [[Bridges|Bridges]] documentation.

3. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

4. Before you leave this location, disable Tor and add a different bridge address if going to a different place. To go back to your usual guard nodes at home, remove the torrc bridge settings before you enable the network or rollback to a vm snapshot you created there.

=== Fresh Tor Entry Guards by regenerating Tor State File ===
Usually something to avoid unless you know what you are doing (see [[#Introduction|Introduction]]). This is a method you could use if you just once wanted to change your Tor entry guards, such as before you permanently relocate to a new location.

On your Whonix-Gateway.

1. {{Disable_Tor}}

2. Delete Tor's state file.

{{CodeSelect|code=
sudo rm /var/lib/tor/state
}}

3. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

=== Always Non-Persistent Entry Guards ===
You could consider to always use non-persistent entry guards. In most cases, this is something to avoid because persistent entry guards is a security feature as explained in the [[#Introduction|introduction]]. A much more secure, but more time expensive approach would be [[#Alternating Bridges|Alternating Bridges]].

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
If you would like to see more information anyway, please press on expand on the right.
<div class="mw-collapsible-content">
On your Whonix-Gateway.

1. Adjust whonixcheck settings (applies until Whonix 12):

{{Open with root rights|filename=
/etc/whonix.d/50_user.conf
}}

Add.

{{CodeSelect|code=
whonixcheck_skip_functions+=" check_tor_pid "
}}

Save.

2. {{Disable_Tor}}

3. Modify Tor settings.

{{Open /etc/tor/torrc}}

Add.

{{CodeSelect|code=
DataDirectory /var/run/tor
}}

Save.

4. Enable Tor using whonixsetup / whonix-setup-wizard at your new location.

5. Before you leave this location, disable Tor and repeat the above steps if going to a different place. To go back to your usual guard nodes at home, remove the torrc setting before you enable the network or rollback to a vm snapshot you created there.
</div>
</div>

=== Notes ===

* The proposed Tails solutions towards AdvGoalTracking have disadvantages<ref>https://tails.boum.org/blueprint/persistent_Tor_state/</ref><ref>https://blog.torproject.org/blog/tor-weekly-news-%E2%80%94-june-17th-2015#A_persistent_Tor_state_for_Tails</ref> and are not options for Whonix because we don't connect directly to a user's internet LAN anyway, so trying to remember a network based on its SSID will not work. Unlike wireless access points, wired networks (physical or virtual) lack SSIDs and cannot be "remembered" that way.

* Even if it were possible, it is best to avoid letting adversaries influence guard changes in any way. Spoofing MAC addresses or SSIDs would trigger use of the other entry guard recorded for another "location profile". Also global networks have generic characteristics that cannot be differentiated from the point of view of a connecting device leading to the same guards being used on different networks.

* Developers/Auditors-only: Development discussion related to this documentation chapter: [https://phabricator.whonix.org/T94 research non-persistent entry guards]

== Blacklist Certain Hidden Services from Connecting ==
'''Experimental'''

{{Open /etc/tor/torrc}}

Example. Add to {{Code2|/etc/tor/torrc}}. Replace {{Code2|bbbbbb6qtmqg65g6.onion}} with the actual hidden service you want to blacklist.

{{CodeSelect|code=
MapAddress bbbbbb6qtmqg65g6.onion 127.0.0.1
}}

{{Reload_Tor}}

== Additional SocksPorts ==
Adding additional Tor SocksPorts to /etc/tor/torrc is kinda non-intuitive. <ref>https://trac.torproject.org/projects/tor/ticket/15261</ref>

Quote Tor man page.
<blockquote>
By default, an option on the command line overrides an option found in the configuration file, and an option in a configuration file overrides one in the defaults file.
</blockquote>

<blockquote>
This rule is simple for options that take a single value, but it can become complicated for options that are allowed to occur more than once: if you specify four SOCKSPorts in your configuration file, and one more SOCKSPort on the command line, the option on the command line will replace __all__ of the SOCKSPorts in the configuration file.  If this isn't what you want, prefix the option name with a plus sign, and it will be appended to the previous set of options instead.
</blockquote>

Quote Nick Mathewson <ref>https://trac.torproject.org/projects/tor/ticket/15261#comment:1</ref>:
<blockquote>
So to make sure that the SocksPort in the torrc does what you want, write it as <code>+SocksPort</code>.
</blockquote>

After adding custom ports, you would also have to edit Whonix's firewall. But you are lucky, you don't need to do that. Various custom ports for such use cases have already been added.

Those are documented here:<br />
[[Stream_Isolation#How_to_mitigate_identity_correlation]]

= UDP =
{{Tor_UDP}}

= Disable Tor =
{{Disable_Tor}}

= Footnotes / References =
<references />

{{Footer}}

[[Category:Documentation]]
