<languages />
{{#seo:
|description=Stelle jedweden Server anonym mit Whonix und Tor Hidden Services bereit.
}}
{{Header}}
= Tor Hidden Services - Einfach =

== Einführung ==

Bitte lies und verstehe [https://www.torproject.org/docs/hidden-services.html.en Tor: Hidden Service Protokoll] (Allgemeine Informationen) sowie [https://www.torproject.org/docs/tor-hidden-service.html.en Konfiguration eines Hidden Service] (Standard Einrichtung, kein isolierter proxy) vorher. Bitte behalte im Kopf, dass Hidden Service nur über Tor oder Tunnel Service wie tor2web ([https://trac.torproject.org/projects/tor/wiki/doc/tor2web sei vorsichtig]) erreicht werden können.

SSL ist nicht notwendig <ref>https://en.wikipedia.org/wiki/Secure_Sockets_Layer</ref>, da Verbindungen zu Tor Hidden Services standardmäßig "End-zu-End-Verschlüsselt" sind <ref>http://www.quora.com/Is-there-an-SSL-equivalent-for-Tor-Hidden-Services</ref>. <ref>To be exact, only tor-to-tor, see [[Hidden_Services#Notes_about_End-to-end_security_of_Hidden_Services|Notiz über Tor End-zu-End-Verschlüsselung]].</ref> Dies ist in so fern praktisch, da du dich nicht mit selbst signierten Zertifikaten oder Zertifikatsausstellern herumschlagen musst.

Ein Gegner kann allerdings auch erkennen, ob der Hidden Service (und daher auch Tor) aktuell eingeschalten ist, oder nicht.

== Irgendeinen Hidden Service bereitstellen == 
Jedweder Service, welcher auf dem Übertragungssteuerungsprotokoll (kurz TCP) basiert, wie beispielsweise Webserver, IRC Server, Chat Server oder ähnliche, lässt sich als Hidden Service bereitstellen. UDP und auch IPv6 sind aktuell vom TOR-Netzwerk nicht unterstützt, können aber mit [[OnionCat]] provisorisch genutzt werden.

Auf dieser Seite findet ihr ein Beispiel, wie man einen Webserver als Hidden Service anbieten kann. Auf der [[Voip]] Seite gibt es eine Anleitung für einen Hidden Voip Sevice, basierend auf Mumble.

Selbst wenn jemand es schafft, die Software des Servers deines Hidden Services (lighttpd, thttpd, apache, etc.) zu hacken, so kann er dennoch nicht auf den Hidden Service Schlüssel zugreifen, oder TOR umgehen, siehe: [[Comparison with Others#Attacks|Attacken gegen Whonix]]. Der Schlüssel befindett sich auf der Whonix-Gateway. Sobald die Whonix-Workstation vom Angriff gesäubert worden ist, ist es niemandem mehr möglich, deinen Hidden Service nachzuahmen.

Wir sind uns zwar sehr sicher, dass es bei der Nutzung von Whonix zu keinen IP/DNS Leaks kommen kann, dennoch liegen erweiterte Schutzmaßnahmen in der Hand des Nutzers. Im [[Security Guide]] und im [[Advanced Security Guide]] sind einige praktische Tipps um die Sicherheit zu verbessern.

Behalte Leaks auf Programmbasis im Kopf. Siehe [[Protocol-Leak-Protection and Fingerprinting-Protection]] für genaueres. Zum Beispiel,

* Nutzt du den Apache Web Server, so ist es empfohlen, [http://packages.debian.org/source/wheezy/libapache-mod-removeip libapache-mod-removeip]<ref><code>sudo apt-get install libapache-mod-removeip</code></ref> zu insallieren. Eine Kombination von Apache und Mediawiki ohne libapache-mod-removeip, wäre alles andere als optimal, da Mediawiki per Standard die IPs anonymer Schreiber zu speichern. Die IP wäre dann 10.152.152.10. Dies wäre zwar nicht zum identifizieren geeignet, da dies nicht deine echte IP Addresse ist, aber es würde den Server als Hidden Service hinter einem Whonix-Gateway identifizieren.<ref>Da es einfach ist, herauszufinden, dass 10.152.152.10 die IP ist, welche standardmäßig von Whonix-Gateway für das interne LAN genutzt wird.</ref>

Daher sollte jedwede Möglichkeit, die IP deiner Server Software zu verschleiern, genutzt werden. Weitere Schutzmaßnahmen werden ebenfalls empfohlen, z.B.:

* Nutzt du den Apache Web Server, so sieh dir bitte die folgenden Fußnoten an. <ref>
(Quelle: [http://sourceforge.net/p/whonix/discussion/general/thread/407fce8f/?limit=25#478a old forum])

Stoppe Apache.

In {{Code|ports.conf}}:

<pre>
NameVirtualHost 127.0.0.1:80
Listen 127.0.0.1:80
ServerName localhost
</pre>

In {{Code|sites-available/default}}:
<pre>
</pre>

Starte Apache.

Nun lauscht Apache nicht mehr unter {{Code|10.152.152.10}}, sondern nur noch {{Code|127.0.0.1}}. Daher müssen wir nun {{Code|10.152.152.10:80}} auf {{Code|127.0.0.1:80}} umleiten.

Dies ist mit einer Firewall Regel oder Netcat möglich:

<pre>
sudo ncat -l 10.152.152.10 80 -c 'ncat 127.0.0.1 80'
</pre>
</ref>

== Webserver als Hidden Service ==

=== Einrichtung ===
Auf der Whonix-Gateway:

Öffne {{Code2|''/etc/tor/torrc''}}.

<pre>sudo nano /etc/tor/torrc</pre>

Lies den gesammten Text, welcher in der Datei steht. Er erklärt dir, wo die .onion URL zu finden ist und wie der Hidden Service Key gesichert werden kann. Schreibe am Ende der Datei die folgenden zwei Textzeilen.

<pre>
HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 10.152.152.11:80
</pre>

Starte Tor mit dem nächsten Befehl neu.

<pre>sudo service tor reload</pre>
Tippe nun das Folgende um dir den Hidden Service URL zu holen.

<pre>
sudo cat /var/lib/tor/hidden_service/hostname
</pre>

Erinnerung: Sichere deinen Hidden Service Key, um deinen Hidden Service zu wiederherstellen oder auf eine neuere Version von Whonix, bzw. neuere Hardware zu wechseln. Mit dem folgenden Kommando kannst du es finden. Root-rechte sind hierfür notwendig.

<pre>
/var/lib/tor/hidden_service/private_key
</pre>

Das Folgende ist auf der Whonix-Workstation zu tun:

Installiere lighttpd (einen Webserver) mit dem folgenden Kommando.

<pre>
sudo apt-get update
sudo apt-get install lighttpd
</pre>

Das wars.

'''Bedenke''', dass es bis zu 30.Minuten dauern kann, bis eine neue .onion Domain erreichbar ist.

'''Note''', accessing 127.0.0.1 {{Tor_Browser_Local_Connections}}.

=== Fehlersuche ===
Überprüfe Berechtigungen.

<pre>ls -la /var/lib/tor/hidden_service/</pre>

Solltest du deinen Hidden Service Key von Hand als Root wiederhergestellt haben, so wird Tor nicht mehr starten. Der Ordner muss von debian-tor besessen werden. Ist dies der Fall, so repariere bitte die Berechtigungen.

<pre>sudo chown debian-tor:debian-tor /var/lib/tor/hidden_service/</pre>
Bedenke: Der Tor Browser erlaubt Verbindungen zu ''127.0.0.1:80'' aber nicht zu ''10.152.152.11:80''.

Überprüfe in der Whonix-Workstation ob der Service unter 127.0.0.1:80 verfügbar ist.

<pre>## Circumventing Whonix uwt wget stream isolation wrapper.
/usr/bin/curl.anondist-orig 127.0.0.1:80</pre>

Überprüfe über die Whonix-Workstation ob der Service unter 10.152.152.11:80 erreichbar ist.

<pre>## Circumventing Whonix curl wget stream isolation wrapper.
/usr/bin/curl.anondist-orig 10.152.152.11:80</pre>

== Tipps für jeden Hidden Service ==

Versuch dich bitte am Hidden Webserver welcher oben erklärt wurde, da es hilft, das Prinzip von Hidden Services im generellen zu verstehen und es ein suchen nach Fehlern vereinfacht.

Zitat vom Tor Manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServiceDir DIRECTORY

Speicher Daten für den Hidden Service in VERZEICHNIS. JEDER Hidden Service braucht ein eigenes Verzeichnis. Dies kann genutzt werden, um mehrere Hidden Services bereitzustellen. Das Verzeichnis muss eines sein, welches existiert.</pre>
Zitat aus dem Tor Manual<ref>https://www.torproject.org/docs/tor-manual.html.en</ref>:

<pre>HiddenServicePort VIRTPORT [TARGET]

Stelle einen virtuellen Port (VIRTPORT) für den Hidden Service bereit. Eventuell muss dies mehrfach getan werden; jedes mal wird es auf den Service angewendet,welcher den letzten hiddenservicedir genutzt hat. An sich wird hierbei der virtuelle Port über TCP mit dem für 127.0.0.1 verbunden. Du könntes den Zielport, die Adresse, oder beides überschreiben, wenn du ein Ziel für addr, port, oder addr:port definierst. Du könntest auch mehrere Zeilen mit dem selben VIRTPORT haben: verbindet sich dann ein User mit diesem VIRTPORT, so
wird einer der VIRTPORTS aus den Zeilen per Zufall gewählt.</pre>
Lies hierfür das [[Security Guide]].

== Erhebliche Upstream Bugs ==
Verbindungsbugs:

* [https://trac.torproject.org/projects/tor/ticket/3825 Hidden Service Eintrittspunkte können überlastet werden, was Verbindungsfehler verursacht]
* [https://trac.torproject.org/projects/tor/ticket/8940#comment:15 Möglicher Bug, wenn zu viele gleichzeitig einen Hidden Service aufrufen]

== Skalierbarkeit ==
* [https://www.whonix.org/forum/index.php/topic,714.0.html Der Hidden Service von Whonix aufgrund von Problemen offline]

= Tor Hidden Services - Erweitert =
== Die Sicherheit von Hidden Services ==
'''Das folgende gilt nicht nur für Whonix! Hier geht es um Tor im generellen.'''

Wie sicher sind Tor Hidden Services?

Dies ist bis auf weiteres eine schwere Frage. Hier sind einige Fakten zu dem Thema.

* Aktuell sind keine Attacken bekannt, welche eingesetzt werden, um Tor Hidden Services permanent zu deanonymisieren.
* 80 bit Hash-Namen und RSA-1024 lange Schlüssel.
* Zitat von Mike Perry: {{Code|Tor core people}}<ref>https://www.torproject.org/about/corepeople.html.en</ref>: http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05418.html
* Ein weiteres Zitat von Mike Perry: http://www.mail-archive.com/liberationtech@lists.stanford.edu/msg05462.html
* Siehe auch, [https://blog.torproject.org/blog/hidden-services-need-some-love The Tor Project Blog: Hidden Services need some love].

== Hidden Services Authentifizierung ==
Standardmäßig sind die Namen von Hidden Service der Allgemeinheit bekannt, da diese zum Hidden Service Directory übertragen werden. Diese Information wird von Web Crawlern zusammengetragen, wodurch jeder, egal ob du dies möchtest oder nicht, sich mit dem Hidden Service verbinden kann.

Es gibt ein nicht allzu bekanntes Feature in Tor, welches es erlaubt, einen Hidden Service im "Privaten Modus" zu nutzen, wodurch nur du, oder andere, vertraute Personen auf diesen zugreifen können. 

Eine praktische Funktion von Tor nennt sich "Hidden Service Authentifizierung". <ref>http://tor.stackexchange.com/questions/219/how-to-use-hidden-service-authentication Wie nutze ich die Hidden Service Authentifizierung?</ref><ref>https://gitweb.torproject.org/torspec.git/blob/HEAD:/proposals/121-hidden-service-authentication.txt</ref>

Laut [https://www.torproject.org/docs/tor-manual.html.en Tor Guide], gibt es zwei Einstellungsmöglichkeiten (also Dinge, welche man in torrc eintragen kann):

'''HiddenServiceAuthorizeClient''' ist eine Server seitige Einstellung welche sich in der torrc Datei befindet. Dies generiert einen einzigartigen geheimen Code, welcher zusammen mit der .onion Adresse nötig ist, um sich mit deinem Service zu verbinden. Ohne diesen ist es unmöglich die Eintrittspunkte zu deinem Server zu finden, was im Umkehrschluss dazu führt, dass sich niemand mit deinem Server verbinden kann. Dies gilt auch für "Hidden Service Directories".

Editiere torrc <pre>sudo nano edit /etc/tor/torrc</pre>

und füge das Folgende hinzu:

<pre>HiddenServiceAuthorizeClient auth-type client-name,client-name,…</pre>



So eingerichtet, ist der Hidden Service nur für autorisierte Clients erreichbar. Die Art der Authentifikation kann einfach sein, für Standardprotokolle oder "stealth" für schlecht skalierbare Protokolle, welche auch Aktivitäten von unautorisierten Clienten verschleiern kann. Nur Clienten, welche hier aufgelistet sind, sind autorisiert, sich mit dem Hidden Service zu verbinden. Die Namen dieser Clienten können zwischen einem und sechzehn Zeichen lang und nur aus den Zeichen A-Za-z0-9+-_ (keine Leerzeichen) bestehen. Ist diese Einstellung aktiviert, so kann der Hidden Service von unautorisierten Clienten nicht mehr erreicht werden. In der Hostdatei kann hierfür die generierte authentifizierungs Information gefunden werden. Clienten müssen diese Information in ihre Konfigurationsdatei mit HidServAuth eintragen, um sich verbinden zu können.


'''HidServAuth''' ist eine torrc Einstellung welche von Tor im Client Modus genutzt werden kann. Um sich zu verbinden muss der Authentikationscookie welcher im vorherigen Schritt erschaffen wurde angegeben werden. Dieser sollte nur über ein sicheres Medium (am besten persönlich oder per verschlüsseltem OTR Chat über TOR) verbreitet werden.

<pre>
HidServAuth <onion-address> <auth-cookie>
</pre>


Für jeden, welchem du Zugang erteilst, lässt sich ein individuelles Cookie erstellen. Hierdurch lässt sich Zugang, so nötig, einfach entziehen. Die Regeln für da limitieren von Zugang bei Hidden Services sind ganz oder gar nicht. Möchtest du nur eine Subdomain limitieren, so empfiehlt es sich daher, den Hidden Service über mehrere Workstations aufzuteilen.

== Informationen über End-zu-End Verschlüsselung bei Hidden Services ==

Hidden Services sind eigentlich nicht direkt "End-Zu-End" verschlüsselt, sondern nur "Tor-Zu-End" (bzw. "Tor-Zu-Tor"). Die Kommunikation zwischen Browser und Server findet im Klartext statt. Dies birgt allerdings KEINEN Sicherheitsnachteil, da Localhost (oder Workstation zu Gateway im Falle eines isolierten Netzwerks), an sich sicher sein soll. Dies hat jedoch dennoch einige sicherheitsbedingte Konsequenzen:

With hidden services alone, without TLS enabled, the adversary only needs to compromise Whonix-Gateway to get knowledge of the content of the connection and the clients identity/location. To compromise the content of the connection, the adversary only needs to compromise either the gateway or the workstation.

Wird ein Hidden Service mit TLS genutzt, so müsste ein Angreifer die Whonix -Workstation kompromittieren, um etwas über den Inhalt der Verbindung herauszufinden. Des Weiteren müsste er das Whonix-Gateway kompromittieren, um die Identität/die Lage des Clients herauszufinden.

Man kann gleichzeitig Hidden Service und TLS nutzen, siehe: https://****************.onion. Nur wenige Hidden Service sind über TLS erreichbar. https://pad.riseup.net/ kann z.B.: über https://5jp7xtmox6jyoqd5.onion/ erreicht werden. Da dies aber nur Nutzern von Whonix (und anderen Implementierungen von Tor Gateways) nutzt, gibt es hierfür keine Nachfrage. Es würde aber weiteren Schutz bieten, da es einen Angriffspunkt eliminiert.

Hier stellt sich nun die Frage, wie die Identität des Zertifikatsstellers verifiziert werden könnte.

Für private Seiten ist dies einfach, da der Server, wie der Client sich kennen. Diese könnten sich einfach über einen vorher vereinbarten, sicheren Kanal, verifizieren.

Und was ist mit öffentlichen Hidden Services? Aktuell ist es unwahrscheinlich, dass Zertifizierungsstellen Zertifikate für .onion Seiten vergeben. Stratssl.com hat dies z.B.: verweigert, da es sich bei .onion um keine "generic top-level domain (gTLD)" handelt, siehe: [https://trac.torproject.org/projects/tor/ticket/6116 Bug #6116: Antrag für .onion gTLD bei IANA]. Andere Zertifizierungsstellen könnten natürlich gefragt werden, ob sie SSL-Zertifikate für Menschen bereitstellen, welche beweisen können, dass sie die .onion Domain besitzen. Dies kann z.B.: durch editieren der Seite nach Absprache mit der Zertifizierungsstelle geschehen.

Auf Zertifizierungsstelle sollte man sich generell nicht verlassen. Siehe [[SSL]].

Hidden Services über Whonix sind sicherer als das Nutzen von TOR und der Server Software auf dem selben Host, da, selbst wenn falsch eingerichtet, IP oder DNS-Leaks per Design nicht möglich sind.

== Siehe ==
* [[Hosting_Location_Hidden_Services|Service mit verschleiertem Ursprung bereitstellen]]
* [[Hidden_Services_Guides|Hidden Service Guides]]
* [[Hosting|Third Party Hosting Service]]

= Einzelnachweise =
<references/>

{{Footer}}

[[Category:Documentation]]
