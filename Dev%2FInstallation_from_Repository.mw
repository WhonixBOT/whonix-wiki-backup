{{Header}}
{{#seo:
|description=Also known as proverbial 'sudo apt-get install whonix' or 'distro-morphing'.
}}
{{forkme}}

An installation of Debian can be transformed into {{project name}} or {{kicksecure}}. Also known as proverbial "{{Code2|sudo apt-get install whonix}}". This is also called <code>distro-morphing</code>. <ref>
Is this technically feasible? Yes. This is how [[{{q project name short}}|{{q project name}}]] is build.

[[Dev/Source_Code_Intro#Chroot_Scripts|chroot scripts]] are negligible since {{project name}} 13.

old tickets:

* https://phabricator.whonix.org/T461
* https://phabricator.whonix.org/T498
</ref>

The following meta packages:

* <code>non-qubes-whonix-gateway-cli</code>
* <code>non-qubes-whonix-gateway-xfce</code>
* <code>non-qubes-whonix-workstation-cli</code>
* <code>non-qubes-whonix-workstation-xfce</code>
* <code>kicksecure-cli</code>
* <code>kicksecure-cli-vm</code>
* <code>kicksecure-xfce</code>
* <code>kicksecure-xfce-vm</code>

can be installed on Debian as per instructions [[{{project name short}} Packages for Debian Hosts|{{project name}} Packages for Debian Hosts]].

This is [[unsupported]], not tested by any [[Contributors|{{project_name}} contributors]] and might need some work. What's missing?

* instructions
* a [[Contribute#Contributor|contributor]]
* testing

'''[https://forums.whonix.org/t/sudo-apt-get-install-whonix-part-i/2346/3 This is being used in the wild.]'''

= From Source Code =
Above instructions use packages from {{project name}} binary repository. Transforming Debian to {{project name}} or {{kicksecure}} is also possible from a local APT repository, i.e. without touching {{project name}} binary repository. If you want to install from source code, info and scripts for automation (package building, creating a local repository, installation) are available <ref>
[[Dev/Build_Documentation/Upgrading_Derivative_Deb_Packages_from_Source_Code]]
</ref> <ref>
https://github.com/{{project_name_short}}/{{project_name_short}}/blob/master/build-steps.d/1200_create-debian-packages
</ref> <ref>
https://github.com/{{project_name_short}}/whonix-developer-meta-files/blob/master/debug-steps/locally-upgrade-whonix-debian-packages
</ref> but could use better documentation.

= Forum Discussion =
https://forums.whonix.org/t/sudo-apt-get-install-whonix-part-i-distro-morphing/2346

= Distro Morphing vs Builds =
What is the difference between a build (image downloaded or created from source code) versus distro morphing installation method?

* It is quite similar as it should be.

Advantages of builds are that these are "cleaner":

* Have tighter control over the packages getting installed. Using Debian installer is kinda like a "wonder box" what packages get installed. Difficult to predict what packages will be installed without skills to understand Debian installer. When using builds one can see what packages will be installed by studying mostly 1 file + dependency packages.
* More likely to get the same tested build that developers and users received.
* More likely to really get the distribution. Distro morphing might fail due to user error and not get noticed by novice users.
* Redistributable.
** No daemons where ever started inside the chroot. (Builds where created by mounting the image and <code>chroot</code>'ing into it while preventing daemons from starting.)
*** Start of daemons inside the image creates several persistent private user data files which must not be re-used by third parties such as the public. In other words, the public should not be using these private user data files as this would be insecure. Such private user data files are for example entropy seeds or Tor state files such as Tor entry guards.
*** Cleaning such files at the end of the creation of the image is not a reliable method either since that depends on what packages are installed by default which changes over time and what private data daemons create which also changes over time. There is no such list or research into that topic.
*** By creating a clean image, it used to be created twice and then compared to check what kinda of private data leaked into it.
** Fewer non-deterministic artifacts which would hinder accomplishment of the [https://reproducible-builds.org/ reproducible builds] goal.
** Fewer superfluous packages. Build dependencies are only installed on the build machine. Not installed inside the build.

= See Also =
* [[{{project name short}} Packages for Debian Hosts|{{project name}} Packages for Debian Hosts]]
* [[{{project name short}}_Debian_Packages|{{project name}} Debian Packages]]
* [[Dev/Build Documentation‏‎|Building/upgrading {{project name}} debian packages from source code]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Development]]
