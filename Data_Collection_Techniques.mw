{{DISPLAYTITLE:Titel}}
{{Header}}
{{#seo:
|description=How is Data Mining on the Web technically done? Overview of Data Collection Techniques.
|image=https://www.whonix.org/w/images/5/5a/Cookies.png
}}
{{Maintainer|
|status=stable
|about=About this {{Code2|{{PAGENAME}}}} Page
|difficulty=easy
|maintainer=[https://forums.whonix.org/users/torjunkie torjunkie]
|support=[[Support]]
}}
= Data Collection Techniques =

Some of the techniques employed by data miners on the Internet are briefly introduced below.

== Cookies ==

=== Introduction ===

Cookies have been in existence since 1994, when they were conceived by a programmer working for Netscape Communications as a reliable method for e-commerce applications. According to Wikipedia: <ref>https://en.wikipedia.org/wiki/HTTP_cookie</ref>

<blockquote>An HTTP cookie (also called web cookie, Internet cookie, browser cookie, or simply cookie) is a small piece of data sent from a website and stored on the user's computer by the user's web browser while the user is browsing. Cookies were designed to be a reliable mechanism for websites to remember stateful information (such as items added in the shopping cart in an online store) or to record the user's browsing activity (including clicking particular buttons, logging in, or recording which pages were visited in the past). They can also be used to remember arbitrary pieces of information that the user previously entered into form fields such as names, addresses, passwords, and credit card numbers.</blockquote>

=== Cookie Classification ===

Whonix users are probably most familiar with [https://en.wikipedia.org/wiki/HTTP_cookie#Third-party_cookie third-party cookies] since they can be used to track browsing history via web page content sourced from external websites, such as banner advertisements. However, cookies have a range of both useful and potentially harmful applications: <ref>https://en.wikipedia.org/wiki/HTTP_cookie</ref>

*<b>Authentication cookies:</b> Used by web servers to know whether a user is logged in, and the account being used.
* <b>Session cookies:</b> Exist temporarily in memory while a website is navigated and are normally deleted when the browser is closed.
* <b>Persistent cookies:</b> Expire after a specific period of time, or on a set date. They transmit information to servers every time a user browses websites that are associated with the cookie. Persistent cookies can track a user's browsing habits over an extended period, possibly years. <ref>They also have legitimate functions such as keeping users logged into specific accounts.</ref>
* <b>Secure cookies:</b> Transmitted over encrypted (HTTPS) connections, making them less vulnerable to cookie theft.
* <b>Third-party cookies:</b> Belong to domains that are different from the URL shown in the web browser address bar. Tracking is enabled via the following process:
** Website A contains an advertisement served by {{Code|eviladvertiser.org}}
** A cookie belonging to {{Code|eviladvertiser.org}} is downloaded and stored on the user's computer.
** Website B is visited and also contains advertising content from {{Code|eviladvertiser.org}}, setting another cookie belonging to that domain.
** Both cookies are eventually sent to {{Code|eviladvertiser.org}}, and an extensive profile of browsing history is gradually acquired over time.
* <b>Supercookies:</b> Have an origin of a [https://en.wikipedia.org/wiki/Top-level_domain top-level domain] like {{Code|.org}} or a public suffix such as {{Code|.com.de}}. If not blocked by the browser, adversaries in control of malicious websites can set supercookies and then impersonate or disrupt user requests to another website sharing the same top-level domain or public suffix.

==== Evercookies ====

With 80% of users disapproving of tracking while browsing the Internet, they have progressively started to delete cookies with relevant browser settings and extensions. Advertisement and tracking networks have responded in kind, using more sophisticated methods - evercookies - to distinguish users.

Evercookies come in various forms:

* <b>Entity tag (ETag) cookies:</b> HTTP supports simple cache control mechanisms, including ETags which store either a version number or a user identifier (ETag cookie). The purpose is to save bandwidth and have browsers use caches for web content when it has not changed, instead of reloading the complete web server content again. <ref>https://en.wikipedia.org/wiki/HTTP_ETag</ref> Unfortunately this provides a tracking mechanism which can be persistently stored, and has been used by various websites including {{Code|Hulu.com}}. ETag cookies can be, and often are respawned. <ref>http://cyberlaw.stanford.edu/blog/2011/08/tracking-trackers-microsoft-advertising</ref>
* <b>Zombie cookies:</b> Automatically recreated after being deleted. Cookie content is stored in multiple locations such as [https://en.wikipedia.org/wiki/Web_storage HTML5 web storage], [https://en.wikipedia.org/wiki/Web_storage Flash Local shared object], client-side and server-side locations. When the cookie is deleted on a user's computer, this is detected and restored from one of the other cookie storage locations.
* <b>Flash cookies (LSOs):</b> Flash cookies are also known as [https://en.wikipedia.org/wiki/Flash_cookies local shared objects (LSOs)] and store data from websites that use Adobe Flash. User permission is not sought when cookies are stored, and they are stored outside of normal browser local storage system. <ref>http://www.popularmechanics.com/technology/security/how-to/a6134/what-are-flash-cookies-and-how-can-you-stop-them/</ref> Previously, it was difficult to delete Flash cookies, as they could not be located easily with browsers. <ref>https://www.ghacks.net/2007/05/04/flash-cookies-explained/</ref> However, modern browsers, extensions and [https://en.wikipedia.org/wiki/Flash_cookies#Editors_and_toolkits software] have [https://support.mozilla.org/en-US/questions/939710?db=5 relevant settings] to easily remove them. <ref>In Linux, LSOs are normally stored in:

* {{Code|~/.macromedia/Flash_Player/#SharedObjects/}}
* {{Code|~/.macromedia/Flash_Player/macromedia.com/support/flashplayer/sys/}}
</ref> LSOs can be used to: <ref>https://en.wikipedia.org/wiki/Flash_cookies</ref>
** Store and retrieve information from local storage when a user access webpages with a Flash application. 
** Store user preferencs.
** Save data from Flash games.
** Track users' Internet activity, even across different browsers. For example:
*** Firefox is used to visit a site showing a relevant product.
*** Firefox is closed, but that information was stored in a LSO.
*** The same person on the same machine uses Chrome to access a website viewed in Firefox.
*** The website is able to read the LSO value(s) in Chrome, and display relevant content or targeted information.
* <b>[https://www.w3schools.com/jsref/prop_doc_cookie.asp HTML5 DOM] [https://en.wikipedia.org/wiki/Web_storage cookies]:</b> Allow web application software to store data persistently in a manner similar to cookies. Local storage and session-only storage are both possible. The storage size is far greater than that available to cookies, but it is not automatically transmitted on every HTTP request. Instead, client-side scripts allow the desired interaction with the server. It is possible to remove DOM cookies without about:config changes in Firefox <ref>Set <code>dom.storage.enabled</code> to false.</ref>, by using relevant extensions (like Click&Clean or BetterPrivacy), or by waiting for Firefox 58 which will disable them by default. [[Tor Browser]] defends against this by default. <ref>https://nakedsecurity.sophos.com/2017/10/30/firefox-takes-a-bite-out-of-the-canvas-super-cookie/</ref>
* Samy Kamkar has shown that there are other [http://samy.pl/evercookie/ possible methods] to track Internet users using evercookies.


In a [http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1898390 study by the University of California, Berkeley] the methods of Space Pencil Inc. (aka KISSmetrics) were exposed. In addition to cookies and flash cookies, KISSmetrics used cache cookies via ETags, DOMStorage and IE-userData to distinguish each user. KISSmetrics was sued as a result and dispensed with using ETags. It also allegedly now respects the [http://donottrack.us/ Do Not Track] HTTP header. <ref>Users should never relay on DNT preferences, since they are [https://en.wikipedia.org/wiki/Do_Not_Track#Effectiveness rarely respected by industry].</ref>

[[Tor Browser]], which comes with Whonix, resists evercookies.

=== Cookie Threats ===

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Over 95 percent of websites use cookies <ref>https://www.digitaltrends.com/computing/history-of-cookies-and-effect-on-privacy/</ref> and embedded, external advertisement and analytics services are increasingly common.
}}


It is evident that cookies are useful for website personalization, logins, monitoring purchases and other functions, but they also present a dire tracking threat. The average website places 34 cookies on a device on the first visit, and 70 percent of these are third-party cookies. Expiry dates are often set to the year "9999", indicating there is no intention to ever stop recording user behavior. <ref>https://www.digitaltrends.com/computing/history-of-cookies-and-effect-on-privacy/</ref> 

The tracking service [http://help.yahoo.com/l/us/yahoo/ywa/documentation/install_guide/ig_get_started.html Yahoo! Web Analytics] has made claims of being able to set cookies on 99.9% of users. This [http://smorgasbork.com/component/content/article/84-a-study-of-internet-users-cookie-and-javascript-settings indicates] that [http://www.truststc.org/reu/10/Reports/GomezG,YalajuJ_paper.pdf cookie-generating JavaScript] and/or Flash cookies are deployed as the primary mechanisms.

A 2011 [http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1898390 study by the University of California, Berkeley] found that the top 100 websites at that time stored a total of 5,675 cookies. Of these, 4,914 cookies were set by third party domains and not the first-party domain being purposefully visited by the user. When browsing these 100 websites, data was transmitted to 600 servers.

Cookie security is dependent on whether cookie data is encrypted, since adversaries may otherwise use this information to gain access to user data or to access websites with the user's credentials. Examples of this attack include [https://en.wikipedia.org/wiki/Cross-site_scripting cross-site scripting] and [https://en.wikipedia.org/wiki/Cross-site_request_forgery cross-site request forgery].

As well as gathering the IP address and/or the HTTP referrer field of the computer requesting the web page, cookies can also store the requested URL and the date/time of the request. Web hosts are therefore capable of recording a large proportion of browsing behavior over many years, and correlating the accumulated profile data with individuals. The typical Internet user has collected hundreds of cookies from various websites on their PC without their knowledge. For instance, the following figure exhibits a small number of the cookies that are stored when a request is made to {{Code|www.nytimes.com}}.

'''Figure:''' ''Cookies set by the New York Times''

[[Image:cookies_nytimes.png|frame|none]]


Most modern browsers integrate an optional function to block cookies, but the option has to be first set by the user.  [[Tor Browser]], which comes bundled with Whonix, has activated cookie blocking by default. Firefox has also adopted Tor Browser's [https://www.bleepingcomputer.com/news/software/another-tor-browser-feature-makes-it-into-firefox-first-party-isolation/ first party isolation] feature since version 55, meaning cookies are separated on a per-domain basis. Advertisement trackers are unable to see all the cookies stored on a user's computer (only the cookie for the currently viewed domain), meaning they cannot aggregate persistent cookie data for profiling. In the future, it is expected that more functions will become available to administrate preferences and acquired cookie collections.

== Active Web Contents ==

Web content that is accessible by browser plugins such as [https://en.wikipedia.org/wiki/Adobe_Flash Flash], [https://en.wikipedia.org/wiki/Java_(software_platform) Java], [https://en.wikipedia.org/wiki/ActiveX ActiveX] and [https://en.wikipedia.org/wiki/Microsoft_Silverlight Silverlight] renders the Web more dynamic and colorful. However, permissions are also granted to websites to execute code locally on a machine, increasing the security risks. If executed, these plugins can read a host of details about the user's computer and network configuration and send it to a remote server. Certain techniques even permit files to be read and edited on the user's machine, and in extreme cases this allows complete control over it.

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Signed Java applets are particularly hazardous. By accepting its signature and by extension the applet, the visited webserver automatically receives all user rights on the computer. The applet may then read the [[#IP address|IP address]], [[#MAC Address|MAC address]], and even HDD/SSD contents. 
}}


Limiting browsing to trusted websites does not mitigate the risk from applets. In the recent past, numerous popular websites have been hacked and infected with malicious code. Greater security requires these plugins to be blocked, deactivated or removed.

In Whonix, an adversary will not benefit from learning the IP address via this method: it is either a local IP address shared among all Whonix users or the IP address of a Tor exit relay, both of which do not reduce the user's anonymity set. Further, the [[#MAC Address|MAC address]] is a virtual one which is also shared among all Whonix users, and is therefore worthless to attackers. Although active content will not reveal the real [[#IP address|IP address]], it is deactivated in Tor Browser by default. See [[Browser Plugins]] for a detailed discussion of browser plugins in Whonix and the potential effects on anonymity, security, and privacy.

== JavaScript ==

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Do not confuse JavaScript with [https://www.java.com/en/download/faq/java_javascript.xml Java] or the active [https://stackoverflow.com/questions/11568648/difference-between-jre-and-java-plugin Java plugin], which are [http://www.differencebetween.com/difference-between-java-and-javascript/ completely different things] despite the similar name (see above). <ref>In short, JavaScript is not part of the Java platform and is a scripting language, while Java is an object-oriented programming language. The Java plugin is bundled with Java runtime and runs inside the browser; allowing Java code to run inside a client's browser process.</ref>
}}

=== Introduction ===

[https://en.wikipedia.org/wiki/JavaScript JavaScript] is one of the fundamental core technologies for Internet content production, alongside [https://en.wikipedia.org/wiki/HTML HTML] and [https://en.wikipedia.org/wiki/CSS CSS]. It allows sites to be interactive and dynamic, as well as provide for online applications such as video games. In contrast, HTML is a markup language that is used to create static content on sites, and Cascading Style Sheets (CSS) are designed for user formatting like interfaces, layout, colors and fonts. Modern browsers frequently use JavaScript ("scripts", "active scripting") and it is marginally safer against security and privacy vulnerabilities compared to the aforementioned plugins.

In the past, JavaScript has been responsible for an estimated 84% of all security vulnerabilities on the Internet via [http://en.wikipedia.org/wiki/Cross-site_scripting cross-site scripting]. This attack allows adversaries to inject malicious client-side script into web pages, leading to users redirecting to malicious sites that phish for login credentials, bank accounts, personal information, or other sensitive data. <ref>https://gizmodo.com/why-are-javascript-attacks-so-dangerous-1453269240</ref> Similarly, JavaScript can be used by web hosts to access detailed information about a user's browser, desktop setting, operating system and hardware specifications, which forms a unique digital fingerprint of an individual. <ref> Refer to the following [http://ip-check.info/?lang=en ip-check.info anonymity test] to view some sample values which can be gathered via JavaScript (if enabled).</ref> <ref>[https://anonymous-proxy-servers.net/forum/viewtopic.php?f=10&t=7319 ip-check.info returns some false values and confuses TBB users] ([http://www.webcitation.org/6cJ0l5mvC w])</ref>

=== JavaScript Attack Classification ===

JavaScript is essential to a fully functional browsing experience, but several classes of attacks rely upon it and are often successful: <ref>https://www.sophos.com/en-us/security-news-trends/security-trends/malicious-javascript.aspx</ref> <ref>http://worldcomp-proceedings.com/proc/p2016/SAM9734.pdf</ref> <ref>https://en.wikipedia.org/wiki/Cross-site_scripting#Related_vulnerabilities</ref>

* <b>Malicious JavaScript email attachments:</b> When a harmless looking document is opened by the user, ransomware is downloaded to the HDD/SSD, later encrypting the computer and demanding a ransom to unlock the files.
* <b>Drive-by download attacks:</b> When users visit a compromised website running malicious code, <ref>82% of malicious sites are hacked legitimate ones</ref> users are redirected to another site controlled by the attackers. Attackers then run code in the victim's web browser that loads an exploit kit which probes the user's OS, browser and software to find vulnerabilities. Payloads/malware are then downloaded that access personal data, encrypt the computer or other intended criminal activity.
* <b>[https://en.wikipedia.org/wiki/Cross-site_scripting Cross-site scripting]:</b> Since the 1990s it has been possible to inject JavaScript client-side into web-based applications, servers or plug-in systems, bypassing the [https://en.wikipedia.org/wiki/Same-origin_policy same-origin policy]. After successful exploitation, users visiting the compromised site are served malicious content which is presumed to be from a trusted source. Attackers can then access sensitive page content, session cookies and other information.
* <b>Universal cross-site scripting:</b> Vulnerabilities in the browser or plugins are exploited to take control over the network. For example Firefox and other browsers, as well as plugins like Flash and ActiveX controls, all have flaws which can lead to [https://en.wikipedia.org/wiki/Buffer_overflow buffer overflows]. These are often exploitable via JavaScript and allows attackers to gain access to to OS's [https://en.wikipedia.org/wiki/API Application Programming Interface (API)] with root privileges. <ref>Sandbox implementation errors can also lead to Javascript running outside of the sandbox and with elevated privileges e.g. create or delete files.</ref>
* <b>[https://en.wikipedia.org/wiki/Cross-site_request_forgery Cross-site request forgery]:</b> Unauthorized commands are transmitted from a user by trusted web applications. Malicious websites can use specially crafted image tags, hidden forms, and JavaScript XMLHttpRequests for this purpose. Depending on the specific vulnerability, when these elements are clicked by the user, the attacker may be able to: 
** Execute remote code with root privileges.
** Forge login requests and view private information.
** Change personal information or fully compromise online accounts.
** Conduct illicit money transfers.
** Performance nearly all actions of a logged in user.

=== Session Replay Scripts ===

Enabling Javascript does more than reveal additional information about a user's system and increase the probability of a successful browser exploit. It can also lead to a complete, literal recording of the entire browsing session if the user is unlucky enough to browse one of nearly [https://webtransparency.cs.princeton.edu/no_boundaries/session_replay_sites.html 500 sites] in the Alexa top 50,000: <ref>https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/</ref> <ref>This includes the usual privacy offenders such as microsoft.com, skype.com and adobe.com, along with various sites providing banking, media, torrenting, educational, telecommunications, forums, shopping, and anti-virus services.</ref>

<blockquote>You may know that most websites have third-party analytics scripts that record which pages you visit and the searches you make. But lately, more and more sites use “session replay” scripts. These scripts record your keystrokes, mouse movements, and scrolling behavior, along with the entire contents of the pages you visit, and send them to third-party servers. Unlike typical analytics services that provide aggregate statistics, these scripts are intended for the recording and playback of individual browsing sessions, as if someone is looking over your shoulder.</blockquote>

The law as it stands allows corporate entities to embed Javascript functions on sites in order to record highly personal information. This includes what is typed, exact movements of the mouse, and even "co-browsing", whereby an unseen intruder can watch what it is done in real time, without any form of notification. There are few limits to the data harvested;  name, email, phone number, address, social security numbers and date of birth are all considered fair game by companies like FullStory, Hotjar, and Smartlook. Many offer the option to [https://web.archive.org/web/20171114004942/https://www.smartlook.com/docs/identify-visitors explicitly] [https://web.archive.org/web/20170623160320/http://help.fullstory.com/develop-js/identify link] recordings to real identities.

Although full or part redactions are attempted on passwords, credit card numbers, CVC numbers, and credit card expiry dates, sensitive information was found to leak in many instances, such as: <ref>https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/</ref>

* Passwords entered into registration forms.
* Leaking of credit card details on payment pages, even in real time.
* Leaking of specific medical conditions and prescriptions.


The same tracking companies often use insecure HTTP pages to deliver the recording playbacks or publisher page contents,  providing an enticing man-in-the-middle attack opportunity for advanced adversaries. <ref>Reinforcing the perception that the private sector really is a comfortable and principal ally in the surveillance-industrial complex.</ref> Fortunately, disabling Javascript is sufficient to prevent this activity completely, and ad-blocking lists are also useful in preventing data exfiltration. <ref>For instance, the EasyList and EasyPrivacy blocking lists that are available in popular extensions. However, they did not block all the major companies at the time of writing.</ref> Users should not solely rely on ad-blockers for general tracking protection, as [https://ericmathison.com/blog/bypass-ad-blockers-and-track-your-visitors-with-piwik/ tools have already been developed] which successfully defeat the most popular extensions, including Adblock Plus, Adblocker Ultimate, Ghostery and uBlock Origin.

=== Conclusion ===

==== Enabling or Disabling JavaScript ====

JavaScript is a clear and present danger for a host of attack vectors, however, there is a [[Tor_Browser#Security_vs_Usability_Trade-off|security versus privacy trade-off]] to consider before disabling JavaScript completely: <ref>See also [https://lists.torproject.org/pipermail/tor-talk/2012-May/024224.html Tor Browser disabling JavaScript anonymity set reduction].</ref>

<blockquote>The take-home message is disabling all JavaScript with white-list based, pre-emptive script-blocking may better protect against vulnerabilities (many attacks are based on scripting), but it reduces usability on many sites and acts as a fingerprinting mechanism based on the select sites where it is enabled. On the other hand, allowing JavaScript by default increases usability and the risk of exploitation, but the user also has a fingerprint more in common with the larger pool of users.</blockquote>

==== Safest Browser Against Exploitation ====

It is clearly unwise to browse the Internet without a well secured browser, otherwise there is a danger of a browser exploit leading to an infected system. Personally configuring a browser to be secure is an enormous effort requiring expertise and significant trial and error. The safer path is to use [[Tor Browser]], preferably on a Whonix platform, since it is already hardened against data leakage. As noted in the [[Tor Browser]] chapter:

<blockquote>Tor Browser is a fork of the Mozilla Firefox web browser. It is developed by The Tor Project and optimized and designed for Tor, anonymity and security.<br />
... <br />
<br />
Features like proxy obedience, state separation, network isolation, anonymity set preservation and a host of others are simply unsupported by other browsers.<br />
<br />
In stark contrast to regular browsers, Tor Browser is optimized for anonymity and has a plethora of privacy-enhancing patches and add-ons. With Tor Browser, the user "blends in" and shares the Fingerprint of nearly three million other users, which is advantageous for privacy.</blockquote>


Tor Browser blocks most dangerous technologies by default, but most popular websites like Youtube will still resolve correctly. For media portals which rely on Flash or alternative plugins, the user can download the relevant files with special software and then view it with an open source media player like [[Software#Media_Player|VLC]]. Websites should be avoided if they insist on the use of active plugins, see [[Browser Plugins]].

== Browser Fingerprinting ==

Research from a pool of 500,000 Internet users has shown that the vast majority (84%) have unique browser configurations and version information which makes them trackable across the Internet. When Java or Flash is installed, this figures rises to 94%. <ref>https://www.eff.org/deeplinks/2010/05/every-browser-unique-results-fom-panopticlick</ref> Considering this research relied only on a relatively small number of variables, <ref>Supercookie test, hash of canvas fingerprint, screen size and color depth, browser plugin details, time zone, DNT header enabled, HTTP_Accept headers, has of WebGL fingerprint, language, system fonts, platform, user agent, touch support, cookies enabled.</ref> companies with advanced fingerprinting capabilities may be approaching 100%, particularly in combination with cookies.

=== Fingerprinting and Anonymity ===

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = Academics suggest that around 33 bits of information is required to positively identify one person out of several billion! <ref>https://33bits.wordpress.com/about/</ref>
}}


For anonymity, it is necessary to reduce the number of bits of information (entropy) the browser provides to an acceptable lower bound; for instance, 18.1 bits of entropy means that a browser chosen at random will share the fingerprint with one in 286,777 other browsers. <ref>https://wiki.mozilla.org/Fingerprinting</ref> Browser uniqueness research has revealed the entropy associated with various pieces of browser information: <ref>https://panopticlick.eff.org/browser-uniqueness.pdf</ref>

{| class="wikitable"
|-
! scope="col"| Variable
! scope="col"| Entropy (bits)
|-
! scope="row"| Plugins
|     15.4
|-
! scope="row"| Fonts
|     13.9
|-
! scope="row" | User agent
|     10.0
|-
! scope="row" | HTTP accept
|     6.09
|-
! scope="row" | Screen resolution
|     4.83
|-
! scope="row" | Time zone
|     3.04
|-
! scope="row" | Supercookies
|     2.12
|-
! scope="row" | Cookies enabled
|     0.353
|-
|}

The primary browser fingerprinting methods that are used include: <ref>Many require active JavaScript code.</ref>  <ref>https://wiki.mozilla.org/Fingerprinting</ref>

* <b>Plugins:</b> The PluginDirect JavaScript library checks for common plugins on the respective platform, and code is run to check for the Acrobat Reader version. Other information may be leaked, including the CPU type.
* <b>Fonts:</b> System fonts are collected by Flash or Java applets, or by CSS introspection.
* <b>User Agent string:</b> When websites are visited, the browser sends precise information on the operating system and web browser being used. <ref>Research suggests this is useful for profiling and tracking Internet users, as it reveals [https://www.eff.org/deeplinks/2010/01/tracking-by-user-agent 10.5 bits of identifying information] on average. This means only one person in 1,500 shares the same User Agent.</ref>
* <b>HTTP Accept headers:</b> With every webpage request, the browser sends information within the HTTP protocol framework that can be analyzed. This includes language, browser type and version, operating system and version, supported character sets, files codecs, and the last visited webpage.
* <b>Screen resolution:</b> The exact resolution is revealed to websites, for example <code>1280x800x24</code>. <ref>In Tor Browser, Torbutton reduces the available entropy by quantising AvailWidth and AvailHeight, and setting the actual Width and Height to the values of AvailWidth and AvailHeight.</ref>
* <b>Supercookies:</b> Reported entropy depends on whether the following are enabled: DOM localStorage, DOM sessionStorage, userData, Flash LSOs, Silverlight cookies, HTML5 databases, or DOM globalStorage.
* <b>Clock skew/precision measurements:</b> Differential parameters are used to measure the time difference (down to milliseconds) between a user's computer and that of the server. Clock precision measurements rely upon how long operations take on a partricular system.
* <b>HTML5 canvas:</b> A precise fingerprint is provided by the rendering of WebGL, font and color data to a canvas element. This is then extracted from the image buffer, and an identifying hash is computed. For more information, see [[Data_Collection_Techniques#HTML5_Canvas_Image_Data|here]].

=== Fingerprinting Resistance ===

The [https://www.eff.org/deeplinks/2010/05/every-browser-unique-results-fom-panopticlick EFF has found] that while most browsers are uniquely fingerprintable, resistance is afforded via four methods:

* Disabling JavaScript with tools like [http://www.noscript.net/ NoScript].
* Use of [https://www.torproject.org/docs/torbutton/index.html.en Torbutton], which is bundled with Tor Browser and enabled by default. <ref>Torbutton automatically disables many types of active content.</ref>
* Use of mobile devices like Android and iPhone.
* Corporate desktop machines which are clones of one another.


With JavaScript disabled, [[Tor Browser]] provides significant resistance to browser fingerprinting: <ref>https://blog.torproject.org/effs-panopticlick-and-torbutton</ref>

* The User Agent is uniform for all Torbutton users.
* Plugins are blocked. 
* The screen resolution is rounded down to 50 pixel multiples.
* The timezone is set to GMT.
* DOM Storage is cleared and disabled.  


At the time of writing, [https://panopticlick.eff.org Panopticlick] only returns 6.63 bits of information for Tor Browser with JavaScript disabled. This is equivalent to sharing the same fingerprint as 1 in 99 other browsers due to the 3 million strong pool of near-identical users. That said, fingerprinting defense is not perfect in any browser and there are still open bugs, see [https://trac.torproject.org/projects/tor/query?status=accepted&status=assigned&status=needs_information&status=needs_review&status=new&status=reopened&order=priority&col=id&col=summary&col=keywords&col=status&col=owner&col=type&col=priority&keywords=tbb-linkability TBB-linkability] and [https://trac.torproject.org/projects/tor/query?status=accepted&status=assigned&status=needs_review&status=needs_revision&status=new&status=reopened&order=priority&col=id&col=summary&col=keywords&col=status&col=owner&col=type&col=priority&keywords=tbb-fingerprinting TBB-fingerprinting].

{{mbox
| type      = notice
| image   = [[File:Ambox_notice.png|40px|alt=Info]]
| text       = Users should not rely solely on different filtering applications and services that hide or change problematic headers, like Privoxy. <ref>Privoxy manipulates cookies and modifies web page data and HTTP headers before the page is rendered.</ref> They cannot filter encrypted (HTTPS) connections and the setting of special values for variables actually ''worsens'' the user's fingerprint.
}}

== Browser History and Cache ==

A [http://cseweb.ucsd.edu/users/lerner/papers/ccs10-jsc.pdf publication from the University of California] provides an analysis of the top 50,000 websites. 1% of these websites collect information about web surfers via history sniffing. Using malicious JavaScript code and CSS hacks, information about previously visited websites were collected. Webmasters who are not familiar with sniffing technologies can use services like Tealium or Beencounter for real-time history sniffing.

Collected information is not only used for advertisements. It can be used for de-anonymization of surfers too. A [http://www.iseclab.org/papers/sonda-TR.pdf publication from Isec] shows one possible way. Using the browser history the visited groups of the social network site Xing were collected. Because there are generally no two people who are members of the exact same set of groups in a social network, it was possible to get the real names and e-mail addresses of the users.

By certain trickery, websites can tell which websites are saved in your browser history. For this, the visited website embeds special formatting commands (CSS Stylesheets) that contain external links "of interest" on the pages you visit. If you have visited one of the external websites before, your browser will react by executing a command defined in the format, e.g. download a small picture from the website. The website can thereby largely guess the contents of your browser history.

From the contents of your browser cache one can conclude already cached, thus previously visited, websites. Together with every website an ETag is sent by the server and stored in the browser cache. If the website was called again, the Etag is sent first to ask for changes. This tag may contain a unique user ID. [http://www.kissmetrics.com/ KISSmetrics] was using ETags in this way to identify visitors of some TOP100 websites.

Additionally, the time required for loading a website changes when part of it is already in the browser cache. By subtle placement of the images on the website, the server can analyze the cache one by one.

At the moment, there is no reliable protection against the analysis of browser histories apart from deactivating this feature, which has been made the default in Tor Browser.

Unlike deactivating your browser history, deactivating your cache would have tremendous effect on your surfing speed, which is why we don't recommend it. In Tor Browser a protective mechanism has been integrated instead which bypasses the cache for third party content. Also, the cache is deleted automatically when you close the browser. A website can thus only gain information about itself, not about other websites.

== Webbugs and Banner Ads ==

Very likely, you will find one or more [[#cookies]] in your browser from data miners such as [http://www.doubleclick.com/ doubleclick.com], [http://www.advertisement.com/ advertisement.com] or [http://www.google.com Google], although you may have never even visited their websites. This is due to the fact that these enterprises use, on other web sites, a simple trick to nevertheless plant cookies in your browser and watch your browsing: ''Webbugs''.

"Webbugs" are usually pictures of 1 pixel by 1 pixel which are therefore invisible to the viewer. However, they can also be coded into banner ads embedded in a website. The website contains a picture (webbug) that is loaded from another server running a statistics service (such as Doubleclick or Google Analytics). Thereby the statistics service may set or edit a cookie in your browser unnoticeably. The browser will then send this cookie back to the statistics service with every new request for a site where any webbug of this service is embedded. If the service is used on many different websites, it can now track large parts of your browsing session. If the owner of the statistics service moreover collaborates with the owner of your preferred search engine, he gets an almost complete picture of your Internet activities.

The privacy functions of most current browsers of simply rejecting cookies and/or deleting them upon browser shutdown do not achieve optimal protection from web bugs.

<s>To prevent session tracking, all cookies should be blocked by default if possible and only allowed in if needed for the duration of the session. Tor Browser is therefore preconfigured to deny all cookies but allow single websites at the expense of two mouse clicks. We recommend allowing cookies only on a temporary basis, so that they will be automatically blocked again after the session.</s>

Another nasty feature of webbugs is, that they send, besides cookies, also your [[#IP address]] to the statistics service upon request. Even with a very good browser configuration, including switching off cookies and using webbug filters, you are never able to reliably prevent this. The only effective methods of protection against this are anonymization services like Tor.

== TCP Timestamps ==

The Transmission Control Protocol (TCP) is a session-layer protocol for transferring data between computers. It is necessary for using Internet protocols like http (WWW), smtp (E-Mail) and ftp. When your computer sends a request for a web site, for example, this data is sent within many small TCP packets. Besides that request data, a TCP packet also contains some optional information fields in the header (metadata). One of those optional fields is the TCP timestamp. The value of this timestamp is proportional to the current time of your computer and is incremented according to your computer's internal clock.

The timestamp may be used by the client and/or server machine for performance metrics and optimization. However, an Internet server may recognize and track your computer by observing those timestamps: By measuring the clock skew of the timestamps, it may calculate an [http://www.cs.washington.edu/homes/yoshi/papers/PDF/ individual clock skew profile] for your computer. Moreover, it may estimate the time when your machine was last booted. These tricks work even if you have otherwise perfectly anonymised your Internet connections.

If you are using Whonix, however, you are protected against being observed this way. The clock in Whonix-Workstation does not match your clock on the host and the clock in Whonix-Workstation is set securely by [[Dev/TimeSync|sdwdate]] over https, which will result in slightly different results compared to using the more accurate NTP.

If you are using Tor, you are also being protected against being profiled in another way: The Tor relays automatically replace your potentially insecure TCP packets with their own.

<font size="-3"> [https://trac.torproject.org/projects/tor/ticket/8169 source 1: Tor trac #8169 replace TCP timestamp] [https://trac.torproject.org/projects/tor/wiki/doc/TorFAQ#DoesTorresistremotephysicaldevicefingerprinting source 2: Tor wiki FAQ] </font>

== IP Address ==

The IP address is given to you by your provider on dialing into the Internet. The provider usually saves it for months or even years together with your customer data and your online time. It is your distinct identifier on the Internet which is sent along whenever you make a direct connection to any Internet service. The IP address tells the server where to send his response. As long as your IP does not change, it is easy to monitor when and what website you have contacted. The IP also reveals your provider, your location (many times) and sometimes (in case of a company or computer center) even what terminal you are on. In many cases, an IP address relates directly to one person.

All that your IP-address is revealing:

* Your current whereabouts

The country and the city/region where you are. With the help of databases [http://www.netop.org/services/ip-geolocation free of charge] or [http://www.maxmind.com/app/ip-location with costs] even districts and office buildings can be identified. This is called geolocation.

* Your Internet-provider

Personal data can be retrieved using your provider.

* Your access technology

With the help of databases one can find out whether you are using, for instance, DSL, a modem or a mobile device to surf the Web.

* Your company / your authority

In the case where you are surfing from within the network of a company or an authority, its name can be found out.

Some of the information that is given away by your IP or browser can be reviewed on [http://ip-check.info/?lang=en ip-check.info].

While the traces mentioned so far can be blurred without any special services needed, the same cannot be said about your IP address. That is why Tor has been developed: In order to blur any connection between your IP and the websites you visit. Whonix connects to the service Tor network. <font size="-3">[https://www.torproject.org/about/overview.html.en How Tor works]</font>

== MAC Address ==

The MAC address (MAC=Media-Access-Control, sometimes also called ''Ethernet-ID'', ''Airport-ID'' or ''physical address'') is the hardware address of each individual network device. Each computer may have several of such physical or virtual network devices (bound to a cable ''(LAN)'', wireless ''(WLAN)'', mobile ''(GPRS, UMTS)'', virtual ''(VPS)'', ...). The MAC address serves as a unique identifier for the respective device in a local area network. On the Internet, it is neither used nor transmitted. Also, your access provider may only see it if your computer is not connected to the Internet over a router, but directly, for example by a modem. You may moreover [http://translate.google.com/translate?hl=en&sl=de&tl=en&u=http://de.wikipedia.org/wiki/MAC-Adresse change the MAC address yourself].

There is an extra chapter about the [[Computer Security Education#MAC Address|MAC address later in documentation in the Computer Security Education]].

== HTML5 Canvas Image Data ==

Websites routinely request browser configuration settings in order to help select the best page format for the visitor. One of those variables is HTML5 canvas image data, because it relates to graphical rendering. Canvas is a drawable region in HTML code with height and width attributes, and Javascript code can access this area though a large set of drawing functions related to animation, games, images and so on.<ref>https://en.wikipedia.org/wiki/Canvas_element</ref> 

When combined with other exposed browser settings, this can be enough to uniquely identify an individual, even without access to the specific IP address. <ref>https://tor.stackexchange.com/questions/4029/html-5-canvas-imagedata-extraction-what-does-it-actually-mean</ref>

The Tor Project provides a good explanation of this fingerprinting method: <ref>https://www.torproject.org/projects/torbrowser/design/</ref>

<blockquote>After plugins and plugin-provided information, we believe that the [https://developer.mozilla.org/en-US/docs/HTML/Canvas HTML5 Canvas] is the single largest fingerprinting threat browsers face today. [https://cseweb.ucsd.edu/~hovav/dist/canvas.pdf Studies] [https://securehomes.esat.kuleuven.be/~gacar/persistent/the_web_never_forgets.pdf show] that the Canvas can provide an easy-access fingerprinting target: The adversary simply renders WebGL, font, and named color data to a Canvas element, extracts the image buffer, and computes a hash of that image data. Subtle differences in the video card, font packs, and even font and graphics library versions allow the adversary to produce a stable, simple, high-entropy fingerprint of a computer. In fact, the hash of the rendered image can be used almost identically to a tracking cookie by the web server.</blockquote>

The Tor Browser is patched to prompt before returning valid image data to the Canvas APIs. By default, if the site hasn't been given previous permission to extract canvas image data, then white image data is returned to the Javscript APIs. Third parties are not allow to extract canvas image data though.

If users are browsing and are prompted with a message like the following, they are recommended to select {{code|n}}.

<pre>This website (github.com) attempted to extract HTML5 canvas image data, which may be used to uniquely identify your computer.

Should Tor browser allow this website to extract HTML5 canvas image data? </pre>

= License =

{{JonDos}} The DataCollectionTechniques page contains content from the JonDonym documentation [https://anonymous-proxy-servers.net/en/help/wwwprivacy_technik.html DataCollectionTechniques] page.

{{Footer}}

[[Category:Documentation]] [[Category:Design]]
