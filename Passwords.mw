{{Header}}
{{#seo:
|description=Generating Strong Passwords
|og:image=https://www.whonix.org/w/images/b/b6/Passwords2132341.jpg
}}

= Introduction =

If weak passwords (passphrases) are used, they can be easily determined by [https://en.wikipedia.org/wiki/Brute-force_attack brute-force attacks], whether or not Whonix is installed. In essence, attackers systematically try all passwords until the correct one is found, or attempt to guess the key which is created from the password using a key derivation function (an exhaustive key search). This method is very fast for short and/or non-random passwords.

= Generating Unbreakable Passwords =

{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = '''Warning:''' It is safe to assume that advanced adversaries with modern technology can conduct bruteforce attacks at a rate of more than a trillion attempts per second. <ref>https://www.password-depot.com/know-how/brute-force-attacks.htm</ref><ref>https://theintercept.com/2015/03/26/passphrases-can-memorize-attackers-cant-guess/</ref>
}}


To generate passphrases which cannot be bruteforced even over a timeframe of several billion years (barring breakthroughs in quantum computing), users should default to [https://en.wikipedia.org/wiki/Diceware diceware passphrases of 7-8 words in length]. This provides password entropy of 80-96 bits. <ref>https://en.wikipedia.org/wiki/Password_strength#Random_passwords</ref>

== Physically-Generated Randomness ==

It is preferable to rely on physical measures of randomness when creating diceware passphrases. This means the words are guaranteed to be truly random if the dice are correctly weighted. The same cannot be said for RNG or other measures of pseudo-randomness based on software.

Generally speaking, lower entropy is reasonable to prevent online attacks due to limits on incorrect username/password combinations, but up to 128 bits of entropy is suggested for important cryptographic keys; a diceware passphrase of 10 words in length. <ref>https://en.wikipedia.org/wiki/Password_strength#Required_bits_of_entropy</ref>

== Randomness Using Software ==

Advanced users can install the [https://tracker.debian.org/pkg/diceware diceware package] from Debian testing in order to create diceware passphrases from the command line.

To generate a 10 word passphrase, run.

{{CodeSelect|code=
diceware -n 10
}}

= Principles for Stronger Passwords =

Users should read [https://en.wikipedia.org/wiki/Password_strength#Examples_of_weak_passwords Wikipedia: Weak Passwords] to learn better practices for generating strong passwords, and to learn if current passwords are weak. ([http://www.webcitation.org/6EUz4uxz8 w]). The general principles for stronger passwords are: <ref>https://en.wikipedia.org/wiki/Password_strength#Guidelines_for_strong_passwords</ref>

* Avoid short passwords of less than 12-14 characters in length - longer passwords are exponentially more difficult to crack than shorter ones. <ref>https://www.password-depot.com/know-how/brute-force-attacks.htm</ref>
* Include: Upper and lower case characters, special characters, digits, spaces, underscores and brackets (unless using [https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases Diceware passphrases] - see above).
* Contrary to conventional wisdom, do not use two-factor authentication. Besides giving away your identity, you are also making it easier for third parties to break into your account using sim-cloning and social engineering on your cellular provider.<ref>https://www.wired.com/2016/06/hey-stop-using-texts-two-factor-authentication/</ref>
* Do not re-use passwords anywhere. Even variations of a password allows linking multiple identities back to you. Attackers can use them to make templates so they don’t have to fall back on “totally” brute force attacks.
* Generate passwords randomly using specialized tools like diceware. The human brain is not good at picking easily memorable and also secure passwords.
* Never use online password generators for anything but curiosity / learning. That is because there is a very good chance the server could log them. The only place where passwords should be generated is locally, ideally in a VM without internet connection.
* Note that: passwords used at online services don’t need to be super long since the server rate limits how many passwords an attacker can try. However passwords used for offline encryption such as full disk encryption should be since the  threat model here is different. An attacker can parallelize brute forcing the password and is only limited by available system resources. Much more guesses per second are possible. Serious  adversaries can attempt one trillion guesses per second according to Edward Snowden in 2013.<ref>https://theintercept.com/2015/03/26/passphrases-can-memorize-attackers-cant-guess/</ref>
* Avoid dictionary-based passwords or those dependent on keyboard patterns, special letter or number sequences, usernames, phrases from anything read or seen, relative or pet names, biographical information, or persons known to the user.
* Avoid information that might be publicly linked to the user or the user's account, or which is known by friends or acquaintances.
* If passwords are written down, they should not be left in obvious places.
* Consider using a [https://www.keepassx.org/ secure password manager], so hundreds of different passwords can be kept stored in an encrypted password database, with access only requiring one master password (which itself should be a cryptographically strong password).

= Forum Discussion =
https://forums.whonix.org/t/password-advice-wiki-page-enhancements

= See Also =
* [[Two-factor_authentication_2FA|Two-factor authentication (2FA)]]

= Footnotes =
{{reflist|close=1}}

{{Footer}}

[[Category:Documentation]]
