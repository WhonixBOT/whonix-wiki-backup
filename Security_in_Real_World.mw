{{Header}}
{{#seo:
|description=Information Leaks, Whonix Protection Against Inadvertent Leaks
|image=https://www.whonix.org/w/images/0/0d/Flashleaktest.png
}}

== Introduction ==

Readers that are interested in security and privacy may have heard of the term [https://en.wikipedia.org/wiki/Information_leakage information leak]. It is commonly understood that leaks should be blocked in order to maintain anonymity when on-line, but most do not know much more than that. This chapter will consider where information leaks originate from, and more importantly, how Whonix can block these in both theory and practice. Before proceeding further, it is necessary to clearly define what constitutes an information leak.  

The layperson might define information leaks in terms of irretrievably losing data, or perhaps even describe malfunctioning RAM modules which leak data. Although both of these occurrences can cause serious problems, in generalized terms they fall outside the accepted definition. The term "information leak" actually refers to an event that causes the release of secure or private information to an untrusted party or environment <ref name=leaks>[https://en.wikipedia.org/wiki/Information_leakage https://en.wikipedia.org/wiki/Information_leakage]</ref> <ref name=data-breach>[https://en.wikipedia.org/wiki/Data_breach https://en.wikipedia.org/wiki/Data_breach]</ref>. For instance, this could be company trade secrets which might cause immeasurable harm if they fell into a competitor's hands, or personal information that could deanonymize an individual such as a whistleblower or journalist. 

== Leak Prevention Challenges ==

Common wisdom dictates that a main tenet of system security involves the prevention of malicious code like worms, Trojans or viruses from acquiring a persistent foothold. However, system security, privacy and anonymity are equally dependent upon sensitive information or data not escaping the trusted environment, which is protected and under the user's control. This is a challenging task with a multitude of elements to be considered. The numerous applications and background processes running on a system at any given time exacerbate the difficulties encountered. Further complicating matters is the need for the system, with all of its applications and programs, to be simple to learn and easy to use. A secure machine is useless if it is impossible to use except for the most knowledgeable and tech-savvy enthusiasts. Additionally, the information that is considered "sensitive" must be clearly defined.

== Sensitive Data ==

In the context of privacy and anonymity, sensitive information is any information that can be used to identify an individual. An inexhaustive list of sensitive information includes:

*[https://en.wikipedia.org/wiki/Serial_number Hardware serials] - can be used to uniquely identify a computer and in turn be linked to the person who purchased or was using it.
*[https://www.dnsleaktest.com/what-is-a-dns-leak.html DNS leak] - if DNS queries are leaking, an ISP or any on-path eavesdropper can log the sites that are visited.<ref name=DNS>[https://en.wikipedia.org/wiki/DNS_leak|https://en.wikipedia.org/wiki/DNS_leak]</ref>
*[https://browserleaks.com/ip IP leaks] - a user's external (ISP-facing) IP address can be used to identify an individual as well as their location.
*[https://digitalguardian.com/blog/what-personally-identifiable-information Personally identifiable information] (PII) - information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context.<ref name=IPP>[https://en.wikipedia.org/wiki/Personally_identifiable_information https://en.wikipedia.org/wiki/Personally_identifiable_information]</ref>.

== Origin of Leaks ==

Even if sensitive data is only a very small proportion of the total, it is extremely difficult to block all available leak avenues. Information leaks have several primary causes:
       
* '''Misbehaving applications''' ([https://en.wikipedia.org/wiki/Software_bug buggy software]) - programs that do not function as intended, leading directly to data leakage or causing other applications they interact with to leak.
        
* '''Deliberate''' ([https://en.wikipedia.org/wiki/Backdoor_(computing) Backdoors]) - a backdoor is a method, often secret, of bypassing normal authentication or encryption in a computer system, product, or embedded device (like a home router), or its embodiment which forms part of a cryptosystem, an algorithm, a chipset, or a "homunculus computer".<ref name=backdoor>[https://en.wikipedia.org/wiki/Backdoor_(computing) https://en.wikipedia.org/wiki/Backdoor_(computing)</ref>  An example of a backdoor is the U.S government's [https://en.wikipedia.org/wiki/Clipper_chip Clipper chip] which was promoted as a device to secure voice and data messages, but also contained a secret built-in back-door. Also noteworthy is the Tailored Access Operations ([https://en.wikipedia.org/wiki/Tailored_Access_Operations TAO]) group, which intercept routers, servers and other network hardware during transit to install covert firmware implants before they are delivered.<ref name=TAO>[https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting]</ref>
      
* '''Mis-configured applications''' - some applications can leak sensitive information if configured improperly. For instance, VPN clients can [https://en.wikipedia.org/wiki/DNS_leak leak DNS queries]. Other applications that can be used to block information leaks, such as [https://en.wikipedia.org/wiki/Iptables iptables], may be ineffective if configured improperly.

* '''Software vulnerability''' - a weakness which allows an adversary to reduce a system's integrity, availability, authenticity, non-repudiation and confidentiality of user data.<ref name=vulnerability>[https://en.wikipedia.org/wiki/Vulnerability_(computing) https://en.wikipedia.org/wiki/Vulnerability_(computing)]</ref><ref name=assurance>[https://en.wikipedia.org/wiki/Information_assurance|https://en.wikipedia.org/wiki/Information_assurance]</ref>

= Security in the Real World =

Mass data collection programs run by government agencies compound the threat of leaked, sensitive information being obtained by adversaries. For example, the Snowden [https://en.wikipedia.org/wiki/Global_surveillance_disclosures_(2013%E2%80%93present) global surveillance disclosures] revealed advanced adversaries were involved in the indiscriminate collection of massive amounts of data via the [https://en.wikipedia.org/wiki/PRISM_%28surveillance_program%29 PRISM] program. This has collected data directly from various Internet communication companies.<ref name=snowden>[https://en.wikipedia.org/wiki/Edward_Snowden#Global_surveillance_disclosures https://en.wikipedia.org/wiki/Edward_Snowden#Global_surveillance_disclosures]</ref> These intelligence disclosures confirm the advanced capability of governments to obtain user data and how important it is to prevent information leaks in the first place.

== Whonix Security Model ==

Whonix uses a security by isolation model to counter the ever-present threat of information leaks. This model effectively blocks sensitive information from escaping the trusted user environment and is composed of four unique, but essential components. 
  
*  '''Hypervisor''' - also referred to as a virtual machine monitor. This is software, firmware, or hardware that creates and runs [https://en.wikipedia.org/wiki/Virtual_machine virtual machines]. Several elements are involved:
** The computer on which the hypervisor runs is called the host. 
** The hypervisor in turn runs virtual machines which are called guest machines. The hypervisor provides hardware virtualization which hides the characteristics of a computing platform from the user, instead presenting an abstract computing platform. 
** This platform virtualization -- creation of a virtual machine that acts like a real computer -- is performed on a given hardware platform by host software (a control program). 
** The host software creates a simulated computer environment; a virtual machine (VM), for its guest software. 
** The guest software executes as if it were running directly on the physical hardware. 
** Due to these factors, Whonix is able to isolate the the virtual machines from the actual computer hardware. This prevents the virtual machines from accessing sensitive information on the host OS or from each other.<ref name=hypervisor>[https://en.wikipedia.org/wiki/Hypervisor https://en.wikipedia.org/wiki/Hypervisor]</ref><ref name=virt_platform>[https://en.wikipedia.org/wiki/Platform_virtualization https://en.wikipedia.org/wiki/Platform_virtualization]</ref>


*  '''Whonix-Gateway''' - the first of two VMs that make up Whonix. The function of Whonix-Gateway is to run [[Tor]] processes and force all traffic through the Tor network. This is done through a modest application of [https://en.wikipedia.org/wiki/Iptables iptables], which blocks network traffic from passing through any other channel besides the dedicated Tor gateway. As mentioned earlier, the hypervisor enforces the isolation between the two VMs used in Whonix. Consequently, any [[malware]] that might infect Whonix-Workstation (the second VM) will not compromise Whonix-Gateway or the host.


*  '''Whonix-Workstation''' - the second of two VMs, the Workstation is responsible for running user applications. This includes any pre-installed or custom-installed user applications. Since Whonix-Workstation is isolated from both the Whonix-Gateway and host OS, if an application misbehaves or is exploited by an adversary, this will be contained in the isolated Whonix-Workstation. Unless an advanced adversary is able to break out of the VM, there is no way for hardware serials or the externally-facing IP address to leak; Whonix-Workstation is simply unaware of sensitive information. Moreover, DNS leaks are eliminated since all DNS requests are sent over the Tor network via the Whonix-Gateway.


* '''Tor''' - this is an abbreviation for "The Onion Router". [https://www.torproject.org Tor] is an anonymity network run by volunteers around the world which helps users defend against traffic analysis, network surveillance and privacy threats. Tor protects users by bouncing their communications around a distributed network of relays.<ref name=Tor>[https://en.wikipedia.org/wiki/Tor_(anonymity_network) https://en.wikipedia.org/wiki/Tor_(anonymity_network)]</ref>

=== Hypervisor-enforced Boundaries ===

Each of the above components play an essential role in security and the hypervisor is considered the backbone of this security model. A suitably analogy for hypervisor functioning is virtual reality video games. Players don a set of virtual reality goggles which provide a virtual representation of their environment. Players can interact with this virtual environment as if it was real. However, in contrast to reality, virtual environments have artificial boundaries set by the game that players cannot traverse; virtual walls prevent any form circumvention regardless of the effort expended.

These virtual boundaries provide a metaphor for the Whonix-Gateway and Whonix-Workstation VMs in Whonix, which remain isolated from one another and from the host OS. The hypervisor creates virtual hardware -- virtual HDDs / SSDs and virtual RAM -- for each of the VMs to interact with. Critically, the VMs do not realize that the hardware is virtualized. If a malicious application were to compromise a VM like the Whonix-Workstion, its awareness of the environment and range of movement is defined by the virtual boundaries set by the hypervisor. <ref>Unless the exploit is sufficiently advanced to create a breakout scenario, or is programmed to detect if it is running in a virtualized environment.</ref> 

Generally speaking, the malicious application can only see the virtual hardware (which it cannot differentiate from the actual hardware), along with other applications running in Whonix-Workstation, but nothing else. The only method of egress is through the Whonix-Gateway. Readers may ponder what prevents a malicious application from compromising the Whonix-Gateway VM, since this is completely feasible in a non-virtualized environment. The reason is the hypervisor-enforced boundaries that isolate both Whonix VMs from one another. None of the applications running in Whonix-Workstation directly interact with Whonix-Gateway. Although traffic from Whonix-Workstion passes through Whonix-Gateway, the latter is simply a gateway that forces all traffic through the Tor network and blocks everything else. Furthermore, it is doubtful that a malicious application in Whonix-Workstation is even aware of the existence of the Whonix-Gateway. 

===Whonix vs Information Leaks===

[[Image:flash_leak_test.png|Flash Leak Test SocksPort and TransPort|thumb]]

[[Image:flash_leak_test_both_transport.png|Flash Leak Test both TransPort|thumb]]

This section considers how well Whonix defends against past and present exploits, along with protection that is afforded against real world examples.

*'''Flash''' and '''Java''' - Whonix prevents information leaks from browser plugins since it has no knowledge of the real external IP address. This protection also applies to Flash-based applications used by [https://en.wikipedia.org/wiki/Operation_Torpedo advanced adversaries]. Nevertheless, it is not recommended to install browser plugins such as Flash when anonymity is the goal.<ref name=plugin>[https://www.whonix.org/wiki/Comparison_with_Others#Flash_.2F_Browser_Plugin_Security https://www.whonix.org/wiki/Comparison_with_Others#Flash_.2F_Browser_Plugin_Security]</ref> See [[ Browser Plugins]] for further details.     


* '''Skype'''- Whonix will not leak a user's IP address / location while using [[Voip#Skype|Skype]] or other [[Voip|VoIP]] protocols, although it is fairly difficult to anonymize voice over these channels.


*'''BitTorrent''' - [https://blog.torproject.org/bittorrent-over-tor-isnt-good-idea IP leaks]([http://www.webcitation.org/6FDaBuhHi w]) have been reported when using ordinary proxification methods. However, since Whonix prevents information leaks, using BitTorrent will not leak a user's real external IP address (see [[File Sharing]]). The reason is  Whonix-Workstation has no knowledge of the external, ISP-facing IP address.


*'''Thunderbird''' - [https://tails.boum.org Tails] reported [https://tails.boum.org/security/IP_address_leak_with_icedove/index.en.html Thunderbird leaks]([https://www.webcitation.org/6FDZcatic w]) the real external IP address. Although Whonix did not exist when this bug was discovered, it would have been impossible for the real external IP address to leak, since Whonix-Workstation has no knowledge of the external IP address. To be fair to Tails, these kinds of leaks are now considered unlikely since they no longer use transparent torification.<ref name=transparent>[https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html]</ref> 


*'''Pidgin''' - a bug was found in [https://www.webcitation.org/6FDZj1gpN Pidgin source] that would have leaked the real IP address. Whonix did not exist when this bug was discovered. Nevertheless, the security by isolation model adopted by Whonix prevents these kinds of leaks from occurring. It should be noted that this bug only existed in the developmental source code and it was patched before the release date.[https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html source]([https://www.webcitation.org/6FDZe0ZXS w]) 


*'''Tor Browser Bundle'''- a severe [https://blog.torproject.org/blog/firefox-security-bug-proxy-bypass-current-tbbs bug]([https://www.webcitation.org/6FDZlP2Ht w]) was discovered in FireFox which related to WebSockets bypassing the SOCKS proxy DNS configuration.<ref name=proxy-bypass>[https://trac.torproject.org/projects/tor/ticket/5741 https://trac.torproject.org/projects/tor/ticket/5741]</ref> This bug is defeated since Whonix-Gateway forces all traffic through the Tor network or it is blocked. At worst, a proxy bypass would have emitted traffic through Tor's TransPort. The only information that could have leaked is the IP address of another Tor Exit Relay, which would not affect anonymity.


*'''Clock Skew Attack''' - this type of attack allows an adversary to acquire the time stamp of an Onion Service http header and measure the skew. ([https://www.webcitation.org/6FDZnhH5j clock skewing])([https://www.webcitation.org/6FDZnhH5j w]) The adversary then compares the acquired time stamp against Tor relays or other publicly reachable web servers. If the time skew of the Onion Service server matches any publicly reachable servers or Tor relays, it is very likely the Onion Service is hosted on the same server. Whonix defeats this and other [[Time Attacks| time attacks]] since it uses [[sdwdate]]. This program connects to a variety of servers (likely to be hosted on different hardware) at random intervals and extracts time stamps from the https headers. <ref>To be fair, when this attack was first described Whonix did not exist.</ref>


{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       = It is not recommended to run Tor relays on a publicly reachable server along with an Onion Service on the same server. This configuration aids [https://www.webcitation.org/6FDZnhH5j traffic correlation and fingerprinting].
}}


*'''P2P'''- an [https://hal.inria.fr/inria-00574178/en/ attack]([https://www.webcitation.org/6FVK6WpNu w]) was published that targets P2P applications in order to trace and profile Tor users. Whonix defeats this attack and others like it because Whonix-Workstation has no knowledge of the external IP address. Furthermore, Whonix provides extended protection by using [[Stream Isolation|stream isolation]].

 
*'''Tor Browser Bundle (Old)'''- an [https://lists.torproject.org/pipermail/tor-announce/2013-August/000089.html attack] was observed in the wild that exploited a JavaScript vulnerability in Firefox. <ref>JavaScript was enabled by default in Tor Browser at the time this exploit was discovered.</ref> The observed version of the attack collected the [[Security Guide#hostname|hostname]] and [[Computer Security Education#MAC| MAC address]] of the victims' computers, and sent that information to a remote web server. This threat is partially mitigated nowadays by the development of a security slider in the Tor Browser Bundle, which easily prevents the execution of JavaScript code completely with the correct settings. 


*'''Tor Browser Bundle'''- a [https://blog.torproject.org/tor-browser-703-released security bug] was reported in version 7.0.2 that allowed systems with GVfs/GIO support to bypass Firefox proxy settings using a specially crafted URL, leading to an IP address leak. Since Whonix-Gateway forces all traffic through Tor, and information leaks are blocked, Whonix users were not affected by this bug.

== Leak Prevention Limitations ==

Whonix protects users from information leaks that stem from leaky applications, exploitable software bugs and many other sources. Even so, Whonix has [[Advanced Deanonymization Attacks| limited countermeasures]] and protections against most classes of [[Advanced Security Guide#Side Channel Attacks|side-channel attacks]]. At the time of writing, there were two recent disclosures of side-channel attacks that would affect Whonix: Meltdown and Spectre. <ref>Although software patches were subsequently released for both attacks.</ref> Spectre in particularly is "...not easy to fix, it will haunt us for quite some time."<ref name=spec-fix>[https://spectreattack.com/ https://spectreattack.com/]</ref> 

=== Meltdown ===

The [https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability) meltdown] vulnerability affects [https://en.wikipedia.org/wiki/Intel_CPUs Intelx86] microprocessors, [https://en.wikipedia.org/wiki/IBM_POWER_microprocessors IBM POWER] microprocessors and some [https://en.wikipedia.org/wiki/ARM_Holdings ARM]-based microprocessors. It exploits a race condition, inherent in the design of many modern CPUs. This condition occurs between memory access and privilege checking during the processing of instructions. When combined with a cache side-channel attack, this vulnerability allows a process to bypass the normal privilege checks that isolate the exploit process. This means data can be accessed which belongs to the operating system and other running processes. The vulnerability allows an unauthorized process to read data from any address that is mapped to the memory space of the current process.<ref name=meltdown>[https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability) https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)]</ref> Meltdown's name came about because it "melts" these security boundaries normally enforced by hardware.  

=== Spectre === 

Spectre is a vulnerability that impacts modern microprocessors that perform [https://en.wikipedia.org/wiki/Branch_prediction branch prediction] <ref name=spectre>[https://en.wikipedia.org/wiki/Spectre_(security_vulnerability) https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)]</ref> and tricks a program into accessing arbitrary locations in the program's memory space. An attacker may read the content of accessed memory, thus potentially obtaining sensible data. Since the Spectre vulnerability is a flaw an attacker can exploit to force a program to reveal its data, Spectre has the potential of having a greater impact on cloud providers than Meltdown. Whereas Meltdown allows unauthorized applications to read from privileged memory to obtain sensitive data from processes running on the same cloud server, Spectre can allow malicious programs to induce a hypervisor to transmit the data to a guest system running on top of it.<ref name=cert.gov>[https://www.us-cert.gov/ncas/alerts/TA18-004A https://www.us-cert.gov/ncas/alerts/TA18-004A]</ref><ref name=Spectre>[https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)#Impact https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)#Impact]</ref>.<ref name=forbes>[https://www.forbes.com/sites/thomasbrewster/2018/01/03/intel-meltdown-spectre-vulnerabilities-leave-millions-open-to-cyber-attack/#598111403932 https://www.forbes.com/sites/thomasbrewster/2018/01/03/intel-meltdown-spectre-vulnerabilities-leave-millions-open-to-cyber-attack/#598111403932]</ref>

== User Mistakes ==

Many readers incorrectly assume that by using Whonix, anonymity is guaranteed. While a host of information leaks are blocked, user mistakes ''can'' inadvertently lead to sensitive data disclosure and subsequent deanonymization by adversaries or eavesdroppers.

'''Example'''

Alice wants to visit her favorite web sites while using Whonix, but some of these sites are not Tor friendly. Undeterred, Alice decides to purchases a VPN subscription in order to circumvent blacklisting of Tor nodes with the following tunnel configuration: <code>User</code> -> <code>Tor</code> -> <code>VPN</code>. Alice understands that websites will see her network traffic as originating from a VPN server IP address and not a Tor exit node in this arrangement.

When Alice purchases the VPN service from the provider, she uses a combination of Whonix, an anonymous e-mail account and Bitcoin. This way her VPN account is pseudonymous. After Alice configures her Tor-to-VPN Internet chain, she believes she is completely anonymous when web browsing. Alice beings to use her new configuration to surf anonymously, but also begins visiting and logging in to some of her favorite personal websites. Beforehand logging in to any account, she shuts down and restarts Tor Browser to create a new identity. This way the previous sites she visited anonymously cannot be linked to her personal accounts. After creating a fresh Tor Browser instance, Alice logs into her social media accounts, email, and various other sites that are linked to her real identity. Alice is aware that she is not anonymous while visiting these sites since they have all her personal information. Regardless, Alice naively thinks this will do any harm and continues this behavior almost on a daily basis. 

What Alice fails to realize is every time she visits a web site and logs into one of her personal account while using the Tor-to-VPN configuration, a pattern is forming. Although the VPN subscription was paid for anonymously, her (VPN) client always uses the same credentials to authenticate with the service providers server. Web sites are routinely recording the time Alice logged in, the time she logged out, and the originating IP address (the VPN server IP). This pattern can be correlated with the times she was logged into the VPN. Even though the person (Alice) logging into the VPN is using Tor,  this is visible to the VPN service provider or potentially an adversary if the VPN servers are compromised. 

Data trails now reveal that someone with the same username and password (VPN login credentials) is logging into the VPN server and then continually logging into Alice's personal accounts. Under those circumstances, it is not difficult to guess that those "persons" are the one and the same. This is the best case scenario; if the VPN service provider is logging activity, under a court order to provide the private keys, or compromised, then it would be trivial to link Alice's VPN credentials directly to her. Ultimately, this would reveal nearly everything she did whilst logged in to the VPN server.

In the above example, Alice mistakenly thought she was safe because she was using Whonix and the VPN subscription was paid for with Bitcoins via an anonymous e-mail account. Alice believed she was doing everything right and Whonix would keep her anonymous while on the Internet. Do not make the same mistake and think Whonix is a magic bullet that will guarantee anonymity. The Whonix security model can provide little protection to users that make mistakes and de-anonymize themselves in the process. 

{{Footer}}

[[Category:Documentation]] [[Category:Design]]
