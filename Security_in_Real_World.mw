{{Header}}
{{#seo:
|description=Information Leaks
|image=https://www.whonix.org/w/images/0/0d/Flashleaktest.png
}}



==Introduction==
Readers that are interested in security and privacy may have heard of the term [https://en.wikipedia.org/wiki/Information_leakage information leak]. Although many readers know that blocking these leaks is critical to maintaining anonymity when on-line, many do not know much more than that.  Where do they originate from, and more importantly, how does Whonix block these leaks, not just in theory, but in the real world? However, before we move on to that, its important for readers to know, what exactly is an information leak.  


When readers think of information leaks what normally comes to mind? Perhaps loosing data without the ability to restore it. Or even a malfunctioning RAM module leaking data. Although both of these occurrences can cause serious problems, in generalized terms these types of leaks are not what is being referred to. The term "Information leak" is used to describe an event that causes the release of secure or private information to an untrusted party or environment <ref name=leaks>[https://en.wikipedia.org/wiki/Information_leakage https://en.wikipedia.org/wiki/Information_leakage]</ref> <ref name=data-breach>[https://en.wikipedia.org/wiki/Data_breach https://en.wikipedia.org/wiki/Data_breach]</ref>. This could be company trade secrets of which could be very damaging if competitors were able to obtain them, to personal information that could be used to identify an anonymous individual such as a whistleblower or journalist. 

==Leak Prevention Challenges==

There are those that believe the main tenet of system security revolves around preventing malicious code (i.e. worms, Trojans, viruses) from acquiring an avenue from which to enter and corrupt their system. Equally important to maintaining a secure system, and paramount for privacy and anonymity, is blocking sensitive information or data from escaping the trusted environment - to an area that is unprotected and not under user control. This is a challenging task with a multitude of elements to be considered. The difficulty is further exacerbated by the numerous applications and background processes running on a system at any given time. Further complicating matters is the need for the system, with all of its applications and programs, to be simple to learn and easy to use. A secure machine is useless if its impossible to use for all but the most knowledgeable and tech savvy geeks. Additionally, the information that is to be considered "sensitive" must be defined.  

==Sensitive Data==

In the context of privacy and anonymity, sensitive information is any information that can be used to identify an individual. The following examples show information that can be used to identify an individual. However this list is not comprehensive.

*[https://en.wikipedia.org/wiki/Serial_number Hardware serials] - can be used to uniquely identify a computer and in turn be linked to the person who purchased or was using it.
*[https://www.dnsleaktest.com/what-is-a-dns-leak.html DNS leak] If DNS queries are leaking, an ISP or any on-path eavesdropper can log the sites that you visit.<ref name=DNS>[https://en.wikipedia.org/wiki/DNS_leak|https://en.wikipedia.org/wiki/DNS_leak]</ref>
*[https://browserleaks.com/ip IP leaks] - A users external (ISP facing) IP Address can be used to identify an individual as well as their location.
*[https://digitalguardian.com/blog/what-personally-identifiable-information Personally identifiable information] (PII) - Information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context.<ref name=IPP>[https://en.wikipedia.org/wiki/Personally_identifiable_information https://en.wikipedia.org/wiki/Personally_identifiable_information]</ref>.


==Origin of Leaks==


Even if sensitive data is a very small subset of the total, it is exceeding difficult to block these leaks due to the many avenues from which they can occur. There are several causes that are commonly identified with leaks.
       

* '''Misbehaving applications''' ([https://en.wikipedia.org/wiki/Software_bug buggy software]) - Programs that do not function as they are intended to. This could lead to the programs themselves leaking data or causing other applications they interact with to leak.
        
* '''Deliberate''' ([https://en.wikipedia.org/wiki/Backdoor_(computing) Backdoors]) - A backdoor is a method, often secret, of bypassing normal authentication or encryption in a computer system, a product, or an embedded device  (e.g. a home router), or its embodiment, (e.g. as part of a cryptosystem, an algorithm, a chipset, or a "homunculus computer").<ref name=backdoor>[https://en.wikipedia.org/wiki/Backdoor_(computing) https://en.wikipedia.org/wiki/Backdoor_(computing)</ref>  An example of a backdoor is the U.S government's [https://en.wikipedia.org/wiki/Clipper_chip Clipper chip] which was promoted as a device to secure voice and data messages but also contained a secret built-in back-door. Also of note the NSA's Tailored Access Operations ([https://en.wikipedia.org/wiki/Tailored_Access_Operations TAO]) which intercept routers, servers and other network hardware while being shipped to install covert implant firmware into them before they are delivered.<ref name=TAO>[https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting https://en.wikipedia.org/wiki/National_Security_Agency#Hardware_implanting]</ref>
      
* '''Miss-configured applications''' - Some applications can leak sensitive information if configured improperly. For instance, VPN clients can [https://en.wikipedia.org/wiki/DNS_leak leak DNS queries]. Other applications that can be used to block information leaks (e.g. [https://en.wikipedia.org/wiki/Iptables iptables])  may not be effective if configured improperly.

* '''Software vulnerability''' - A weakness which allows an adversary to reduce a system's integrity, availability, authenticity, non-repudiation and confidentiality of user data.<ref name=vulnerability>[https://en.wikipedia.org/wiki/Vulnerability_(computing) https://en.wikipedia.org/wiki/Vulnerability_(computing)]</ref><ref name=assurance>[https://en.wikipedia.org/wiki/Information_assurance|https://en.wikipedia.org/wiki/Information_assurance]</ref>

=Security in the Real World=


Compounding the potential for an adversary to obtain sensitive information (if leaked) is mass data collection programs run by government agencies. For example, through the the Snowden [https://en.wikipedia.org/wiki/Global_surveillance_disclosures_(2013%E2%80%93present) global surveillance disclosures], it was revealed the NSA was involved in the indiscriminate collection of massive amounts of date through a program code named [https://en.wikipedia.org/wiki/PRISM_%28surveillance_program%29 PRISM] which collected date from various INTERNET communication companies.<ref name=snowden>[https://en.wikipedia.org/wiki/Edward_Snowden#Global_surveillance_disclosures https://en.wikipedia.org/wiki/Edward_Snowden#Global_surveillance_disclosures]</ref> These types of disclosures show just how capable governments are at obtaining users data and how important it is to prevent information leaks.


==Whonix Security Model==

With the countless ways in which leaks can occur, how does Whonix prevent them from occurring? Whonix uses a model that is referred to as security by isolation. This model effectively blocks sensitive information from escaping the trusted environment. This security model is made up of four unique but essential components. 
  
*  '''Hypervisor''' - Or virtual machine monitor, is software, firmware, or hardware that creates and runs [https://en.wikipedia.org/wiki/Virtual_machine virtual machines]. The computer on which the hypervisor runs on is called the host. The hypervisor in turn runs virtual machines which are called guest machines. The hypervisor provides hardware virtualization which hides the characteristics of a computing platform from the users, presenting instead an abstract computing platform. This Platform virtualization (i.e. creation of a virtual machine that acts like a real computer) is performed on a given hardware platform by host software (a control program), which creates a simulated computer environment, a virtual machine (VM), for its guest software. The guest software executes as if it were running directly on the physical hardware. Because of this, Whonix is able to isolate the the virtual machines from the actual computer hardware thus preventing the virtual machines from accessing sensitive information on the host OS or each other.<ref name=hypervisor>[https://en.wikipedia.org/wiki/Hypervisor https://en.wikipedia.org/wiki/Hypervisor]</ref><ref name=virt_platform>[https://en.wikipedia.org/wiki/Platform_virtualization https://en.wikipedia.org/wiki/Platform_virtualization]</ref>

*  '''Whonix-Gateway''' - The first of two virtual machines that make up Whonix. The function of Whonix-gateway is to run [[Tor]] processes and force all traffic through the Tor network. This is done through a modest application of [https://en.wikipedia.org/wiki/Iptables iptables] which blocks network traffic from passing through any other channel besides that of the Tor gateway. As mention earlier the hypervisor ensures the isolation between the two virtual machines. Because of this, any [[malware]] that may find its way onto and infect Whonix-Workstation (the second virtual machine) will not compromise Whonix-Gateway or the host.

*  '''Whonix-Workstation''' - The second of two virtual machines, the Workstation is responsible for running user applications. This can be any one of many applications installed by default or custom-installed user applications. Since Whonix-Workstation is isolated from Whonix-Gateway, as well as the host OS,  if an application were to misbehave or an adversary where to find an exploit, they would be contained in the isolated Whonix-Workstation. There would be no way for hardware serial numbers or the externally-facing IP address to leak on account of  Whonix-Workstation being unaware of sensitive information. Moreover, since all DNS requests are sent over the Tor network, through the Whonix-Gateway, DNS leaks are eliminated.

* '''Tor''' - Which is an abbreviation for "The Onion Router" is a anonymity network run by volunteers around the world. The [https://www.torproject.org Tor] network helps users defend against traffic analysis, network surveillance and privacy threats. Tor protects users by bouncing their communications around a distributed network of relays.<ref name=Tor>[https://en.wikipedia.org/wiki/Tor_(anonymity_network) https://en.wikipedia.org/wiki/Tor_(anonymity_network)]</ref>


Each of the above components play an important role in security and the hypervisor is considered the backbone of this security model. The hypervisor may be thought of in the context of a virtual reality video game. Players don a set of virtual reality goggles through which they see a virtual representation of their environment. Players can interact with this virtual environment just like they would if it was real. However, unlike the actual real environment, this virtual one has boundaries set by the game that players may not go beyond. If they try, they find that there is a Virtual wall in front of them that they can't circumvent. Try as they might they can not go around, over or through this wall.

These virtual boundaries hold true for the virtual machines in Whonix (e.g. Whonix-Gateway, Whonix-Workstation) and is how they remain isolated from one another and from the host OS. In order to do this, the hypervisor creates virtual hardware (e.g. virtual HDD, virtual RAM) for each of the virtual machines to interact with. They do not realize that the hardware is virtualized. If a malicious application were to compromise a virtual machine, for example Whonix-Workstion, it could only go as far as the virtual boundaries set by the hypervisor. The malicious application can see the virtual hardware (which it can't tell apart from the actual hardware) along with the other applications running in Whonix-Workstation but nothing else. The only way out is through the Whonix-Gateway. Readers may think that this malicious application could then try to compromise that virtual machine. Normally this could happen in a non-virtaulized environment. Nevertheless, if readers recall both Whonix virtual machines are isolated from one another by means of the hypervisor. None of the applications from Whonix-Workstation interact with Whonix-Gateway. Although traffic from Whonix-Workstion goes through Whonix-Gateway, the latter it is just that, a gateway that forces all traffic through the Tor network. All other traffic is blocked. Furthermore it is doubtful that a malicious application in Whonix-Workstation would even know about Whonix-Gateway. 

===Whonix vs Information Leaks===

[[Image:flash_leak_test.png|Flash Leak Test SocksPort and TransPort|thumb]]

[[Image:flash_leak_test_both_transport.png|Flash Leak Test both TransPort|thumb]]

How does Whonix hold up against past and present exploits. Here are real world examples that Whonix provides protection against.

*'''Flash''' and '''Java''' - Whonix prevents information leaks from browser plugins since it has no knowledge of the real external IP address. This protection also applies to Flash based applications such as used by the FBI in [https://en.wikipedia.org/wiki/Operation_Torpedo Operation Torpedo]. Furthermore it is not recommended to install browser plugins such as Flash when anonymity is the goal.<ref name=plugin>[https://www.whonix.org/wiki/Comparison_with_Others#Flash_.2F_Browser_Plugin_Security https://www.whonix.org/wiki/Comparison_with_Others#Flash_.2F_Browser_Plugin_Security]</ref> See [[ Browser Plugins]] for more details.     

* '''Skype'''- Whonix will not leak IP/location while using [[Voip#Skype|Skype]][[Voip|VoIP]]. It can be somewhat difficult to anonymize voice over IP ([[Voip|VoIP]]), although it is possible. .

*'''BitTorrent''' - [https://blog.torproject.org/bittorrent-over-tor-isnt-good-idea IP leaks]([http://www.webcitation.org/6FDaBuhHi w]) have been reported when using ordinary proxification methods. However, since Whonix prevents information leaks, using BitTorrent will not leak your real external IP address.(see [[File Sharing]]) This is because Whonix-Workstation has no knowledge of the external ISP facing IP address.

*'''Thunderbird''' - [https://tails.boum.org Tails] reported [https://tails.boum.org/security/IP_address_leak_with_icedove/index.en.html Thunderbird leaks]([https://www.webcitation.org/6FDZcatic w]) the real external IP address. Even though Whonix did not exist when this bug was discovered, it would have been impossible for the real external IP address to leak since Whonix-Workstation has no knowledge of the external IP address. To be fair to Tails, these kinds of leaks are now much less likely since they are no longer using transparent torification.<ref name=transparent>[https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html]</ref> 

*'''Pidgin''' - A bug was found in  [https://www.webcitation.org/6FDZj1gpN Pidgin source] that would have leaked the real IP address. Whonix did not exist when this bug was discovered. Nevertheless the model by which Whonix depends on; security by isolation, will prevent these kinds of leak from occurring. It should be noted that this bug only existed in the developmental source code and it was patched before the release date.[https://mailman.boum.org/pipermail/tails-dev/2012-September/001704.html source]([https://www.webcitation.org/6FDZe0ZXS w]) 

*'''Tor Browser Bundle'''- A severe [https://blog.torproject.org/blog/firefox-security-bug-proxy-bypass-current-tbbs bug]([https://www.webcitation.org/6FDZlP2Ht w]) was discovered in FireFox which relates to WebSockets bypassing the SOCKS proxy DNS configuration.<ref name=proxy-bypass>[https://trac.torproject.org/projects/tor/ticket/5741 https://trac.torproject.org/projects/tor/ticket/5741]</ref> - This bug is defeated since Whonix-Gateway forces all traffic through the Tor network or it is blocked. At the most a proxy bypass would have emitted traffic through Tor's TransPort. The only information that could have leaked is the IP address of another Tor Exit Relay which would not affect anonymity.

*'''Clock Skew Attack''' - With this type of attack, an adversary acquires the time stamp of a Hidden Service http header and measures the skew. ([https://www.webcitation.org/6FDZnhH5j clock skewing])([https://www.webcitation.org/6FDZnhH5j w]) The adversary compares the acquired time stamp to that of Tor relays or other publicly reachable web servers. If the time skew of the Hidden Service server matches any of the publicly reachable servers or Tor relays, it is very likely the Hidden Service is hosted on the same server. Whonix defeats this and other [[Time Attacks| time attacks]] since it uses  [[sdwdate]] which connects to a variety of servers (likely to be hosted on different hardware) at random intervals and extracts time stamps from the https headers. To be fair, when this attack was first described Whonix did not exits.



{{mbox
| image   = [[File:Ambox_warning_pn.svg.png|40px]]
| text       =It should be noted that running  Tor relays on a publicly reachable server along with an onion Hidden Service on the same server is recommended against as it helps [https://www.webcitation.org/6FDZnhH5j traffic correlation and fingerprinting].
}}



*'''P2P'''- An [https://hal.inria.fr/inria-00574178/en/ attack]([https://www.webcitation.org/6FVK6WpNu w]) was published that targets P2P applications in order to trace and profile Tor users. Nevertheless Whonix defeats this attack and others like it because Whonix-Workstation has no knowledge of the external IP address. Furthermore, Whonix makes amplitudinous use of [[Stream Isolation|stream isolation]].

 
*'''Tor Browser Bundle (Old)'''- An [https://lists.torproject.org/pipermail/tor-announce/2013-August/000089.html attack] was observed in the wild that exploits a Firefox vulnerability if JavaScript was enabled which was the default setting in Tor Browser when this exploit was discovered. The observed version of the attack appears to collect the [[Security Guide#hostname|hostname]] and [[Computer Security Education#MAC| MAC address]] of the victims computer, then send the information to a remote web server. Nowadays, the Tor Browser Bundle allows for easy security settings, using a slider bar, which may turn off JavaScript completely, thus bypassing this problem by keeping the Browser from executing any JavaScript code. 


*'''Tor Browser Bundle'''- A [https://blog.torproject.org/tor-browser-703-released security bug] was reported in version 7.0.2 that allowed systems with GVfs/GIO support to bypass Firefox proxy settings (IP leak) using a specially crafted URL. Since Whonix Gateway forces all traffic through Tor, and information leaks are blocked, users where not affected by this bug.


==Leak Prevention Limitations==

Whonix protects users from information leaks that stem from leaky applications, exploitable software bugs and many other sources. Even so, Whonix only has some [[Advanced Deanonymization Attacks| limiting counter measures]] and cannot in general provide protection from most classes of [[Advanced Security Guide#Side Channel Attacks|side-channel attacks]]. At the time of this writing there were two recent disclosures of side-channel attacks that would affect Whonix. Nonetheless software patches followed for Meltdown and Spectra. However, Spectre "As it is not easy to fix, it will haunt us for quite some time."<ref name=spec-fix>[https://spectreattack.com/ https://spectreattack.com/]</ref> 


'''Meltdown''' - The [https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability) meltdown] vulnerability affected [https://en.wikipedia.org/wiki/Intel_CPUs Intelx86] microprocessors, [https://en.wikipedia.org/wiki/IBM_POWER_microprocessors IBM POWER] microprocessors and some [https://en.wikipedia.org/wiki/ARM_Holdings ARM]-based microprocessors and exploits a race condition, inherent in the design of many modern CPUs. This occurs between memory access and privilege checking during instruction processing. Additionally, combined with a cache side-channel attack, this vulnerability allows a process to bypass the normal privilege checks that isolate the exploit process from accessing data belonging to the operating system and other running processes. The vulnerability allows an unauthorized process to read data from any address that is mapped to the current process's memory space.<ref name=meltdown>[https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability) https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)]</ref>  Meltdown's name came about because it "melts" these security boundaries normally enforced by the hardware.  


'''Spectre''' - is a vulnerability that impacts modern microprocessors that perform [https://en.wikipedia.org/wiki/Branch_prediction branch prediction] <ref name=spectre>[https://en.wikipedia.org/wiki/Spectre_(security_vulnerability) https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)]</ref> and tricks a program into accessing arbitrary locations in the program's memory space. An attacker may read the content of accessed memory, thus potentially obtains sensible data. Since the Spectre vulnerability is a flaw an attacker can exploit to force a program to reveal its data, Spectre has the potential of having a greater impact on cloud providers than Meltdown. Whereas Meltdown allows unauthorized applications to read from privileged memory to obtain sensitive data from processes running on the same cloud server, Spectre can allow malicious programs to induce a hypervisor to transmit the data to a guest system running on top of it.<ref name=cert.gov>[https://www.us-cert.gov/ncas/alerts/TA18-004A https://www.us-cert.gov/ncas/alerts/TA18-004A]</ref><ref name=Spectre>[https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)#Impact https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)#Impact]</ref>.<ref name=forbes>[https://www.forbes.com/sites/thomasbrewster/2018/01/03/intel-meltdown-spectre-vulnerabilities-leave-millions-open-to-cyber-attack/#598111403932 https://www.forbes.com/sites/thomasbrewster/2018/01/03/intel-meltdown-spectre-vulnerabilities-leave-millions-open-to-cyber-attack/#598111403932]</ref>

==User Mistakes==

Many readers assume that by using Whonix, they will automatically be able to maintain anonymity. Albeit, information leaks are blocked, but there are many instances in which users unwittingly release information that an adversary or easedropper could potentially use to de-anonymitize them. 

'''Example'''

Alice wants to be able to visit her favorite web sites while using Whonix. However, some of these sites are not Tor friendly. Since they block Tor users, Alice decides to purchases a VPN subscription that way she can use the VPN in a User->Tor->VPN->Internet chain. With this configuration websites will see her traffic as coming from the VPN server IP address and not a Tor exit relay. When Alice purchases the VPN from the service provider, she uses Whonix, an anonymous e-mail account and Bitcoin. This way her VPN account will be pseudonymous. After Alice configures her Tor-to-VPN she believes she is completely anonymous when web browsing. Afterwards Alice uses her new configuration to surf anonymously but also wants to visit and login to some of her favorite personal websites. Before hand, she shutdown and restarts Tor Browser to create a new identity. This way the previous sites she visited anonymously can't be linked to her personal accounts. After Alice does this, she logs into her social-media accounts, email, and various other sites that are linked to her real identity. Alice knows that she is not anonymous while visiting these sites since they have all her personal information. Regardless, Alice does not think this will do any harm and continues this behavior almost on a daily basis. 

What Alice doesn't realize is every time she visits a web site and logs into one of her personal account while using the Tor-to-VPN, a pattern is forming. Although the VPN subscription was paid for anonymously, her (VPN) client always uses the same credentials to authenticate with the service providers server. This may not sound to concerning but when considered with the fact that web sites will log the time Alice logged in, the time she logged out, and the IP address from which the login originated from (i.e. the VPN server IP) This could be correlated with the times she was logged onto the VPN. Even though the person logging into the VPN is using Tor (i.e. Alice)this is what the VPN service provider or an adversary would see if the servers were compromised. Someone with the same username and password (VPN login credentials) is logging onto the VPN server and then continually logging into Alice's personal accounts. It would not be hard to guess who is logging into those accounts or who the VPN login credential belong to.  This is assuming the VPN service provider is not logging activity or under some court order to provide the private keys. If the VPN service provider's server(s) where compromised or they were logging user activity or there was a court order forcing the service provider to provide the private keys to the servers, it would be trivial to link Alice's VPN credentials to her and by doing so, could follow everything she did while using the VPN server.

In the above example, Alice thought she was safe because she was using Whonix and the VPN subscription was paid for using Bitcoins and an anonymous e-mail account. Alice believed she was doing everything right and Whonix would keep her anonymous while on the INTERNET. Nevertheless many users also see Whonix as a magic bullet that will keep them safe. However, the Whonix security model can provide little protection to users that make mistake and de-anonymize themselves (i.e shooting oneself in the foot). 




{{Footer}}

[[Category:Documentation]] [[Category:Design]]
